
NTI_STM_Interfacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ecc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001054  08001054  00011054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080010b8  080010b8  000110b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080010bc  080010bc  000110bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  080010c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00000040  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000054  20000054  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00004bcd  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000ed1  00000000  00000000  00024c11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000004e8  00000000  00000000  00025ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000430  00000000  00000000  00025fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001ebf  00000000  00000000  00026400  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000019c2  00000000  00000000  000282bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00029c81  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000011ac  00000000  00000000  00029d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002aeac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800103c 	.word	0x0800103c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	0800103c 	.word	0x0800103c

080001c8 <EEPROM_Init>:
 *      Author: MahmoudH
 */

#include "EEPROM.h"

void EEPROM_Init(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	//I2C1_Init();
	TWI_Init();
 80001cc:	f000 fb1e 	bl	800080c <TWI_Init>
}
 80001d0:	bf00      	nop
 80001d2:	bd80      	pop	{r7, pc}

080001d4 <EEPROM_WriteByte>:
void EEPROM_WriteByte(uint16_t romAddr, uint8_t dataByte){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	460a      	mov	r2, r1
 80001de:	80fb      	strh	r3, [r7, #6]
 80001e0:	4613      	mov	r3, r2
 80001e2:	717b      	strb	r3, [r7, #5]
	/* Calculate: page:3, romAddr byte:8, slave byte */
	uint8_t page 			= ((romAddr&0x7FF)>>8);
 80001e4:	88fb      	ldrh	r3, [r7, #6]
 80001e6:	121b      	asrs	r3, r3, #8
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	f003 0307 	and.w	r3, r3, #7
 80001ee:	73fb      	strb	r3, [r7, #15]
	uint8_t romAddrByte		= (uint8_t)romAddr;
 80001f0:	88fb      	ldrh	r3, [r7, #6]
 80001f2:	73bb      	strb	r3, [r7, #14]
	uint8_t slaveByte		= (0xA0) | (page<<1); /* default write */
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	005b      	lsls	r3, r3, #1
 80001f8:	b25b      	sxtb	r3, r3
 80001fa:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80001fe:	b25b      	sxtb	r3, r3
 8000200:	737b      	strb	r3, [r7, #13]
	I2C1_Start();
 8000202:	f000 fb7b 	bl	80008fc <I2C1_Start>
	I2C1_WriteAddress(slaveByte);
 8000206:	7b7b      	ldrb	r3, [r7, #13]
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fbbd 	bl	8000988 <I2C1_WriteAddress>
	I2C1_WriteData(romAddrByte);
 800020e:	7bbb      	ldrb	r3, [r7, #14]
 8000210:	4618      	mov	r0, r3
 8000212:	f000 fb9f 	bl	8000954 <I2C1_WriteData>
	I2C1_WriteData(dataByte);
 8000216:	797b      	ldrb	r3, [r7, #5]
 8000218:	4618      	mov	r0, r3
 800021a:	f000 fb9b 	bl	8000954 <I2C1_WriteData>
	I2C1_Stop();
 800021e:	f000 fb87 	bl	8000930 <I2C1_Stop>
	delayMs(15);
 8000222:	200f      	movs	r0, #15
 8000224:	f000 fc2a 	bl	8000a7c <delayMs>
}
 8000228:	bf00      	nop
 800022a:	3710      	adds	r7, #16
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}

08000230 <EEPROM_ReadByte>:
void EEPROM_ReadByte(uint16_t romAddr, uint8_t* pDataByte){
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	6039      	str	r1, [r7, #0]
 800023a:	80fb      	strh	r3, [r7, #6]
	/* Calculate: page:3, romAddr byte:8, slave byte */
	uint8_t page 			= ((romAddr&0x7FF)>>8);
 800023c:	88fb      	ldrh	r3, [r7, #6]
 800023e:	121b      	asrs	r3, r3, #8
 8000240:	b2db      	uxtb	r3, r3
 8000242:	f003 0307 	and.w	r3, r3, #7
 8000246:	73fb      	strb	r3, [r7, #15]
	uint8_t romAddrByte		= (uint8_t)romAddr;
 8000248:	88fb      	ldrh	r3, [r7, #6]
 800024a:	73bb      	strb	r3, [r7, #14]
	uint8_t slaveByte		= (0xA0) | (page<<1); /* default write */
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	005b      	lsls	r3, r3, #1
 8000250:	b25b      	sxtb	r3, r3
 8000252:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000256:	b25b      	sxtb	r3, r3
 8000258:	737b      	strb	r3, [r7, #13]
	I2C1_Start();
 800025a:	f000 fb4f 	bl	80008fc <I2C1_Start>
	I2C1_WriteAddress(slaveByte);
 800025e:	7b7b      	ldrb	r3, [r7, #13]
 8000260:	4618      	mov	r0, r3
 8000262:	f000 fb91 	bl	8000988 <I2C1_WriteAddress>
	I2C1_WriteData(romAddrByte);
 8000266:	7bbb      	ldrb	r3, [r7, #14]
 8000268:	4618      	mov	r0, r3
 800026a:	f000 fb73 	bl	8000954 <I2C1_WriteData>
	I2C1_Start();
 800026e:	f000 fb45 	bl	80008fc <I2C1_Start>
	I2C1_WriteAddress(slaveByte|1);
 8000272:	7b7b      	ldrb	r3, [r7, #13]
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	b2db      	uxtb	r3, r3
 800027a:	4618      	mov	r0, r3
 800027c:	f000 fb84 	bl	8000988 <I2C1_WriteAddress>
	(*pDataByte) = I2C1_ReadData();
 8000280:	f000 fb9e 	bl	80009c0 <I2C1_ReadData>
 8000284:	4603      	mov	r3, r0
 8000286:	461a      	mov	r2, r3
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	701a      	strb	r2, [r3, #0]
	I2C1_Stop();
 800028c:	f000 fb50 	bl	8000930 <I2C1_Stop>
	delayMs(15);
 8000290:	200f      	movs	r0, #15
 8000292:	f000 fbf3 	bl	8000a7c <delayMs>
}
 8000296:	bf00      	nop
 8000298:	3710      	adds	r7, #16
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}

0800029e <LCD_GotoXY>:
/* Static Declarations */
static void LCD_GotoXY(uint8_t line, uint8_t col);
static void LCD_SendCMD(uint8_t cmd);
static void LCD_SendData(uint8_t data);

static void LCD_GotoXY(uint8_t line, uint8_t col){
 800029e:	b580      	push	{r7, lr}
 80002a0:	b082      	sub	sp, #8
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	4603      	mov	r3, r0
 80002a6:	460a      	mov	r2, r1
 80002a8:	71fb      	strb	r3, [r7, #7]
 80002aa:	4613      	mov	r3, r2
 80002ac:	71bb      	strb	r3, [r7, #6]
	/* send command of DDRAM Address
	 * First Line: 	0x00
	 * Second Line: 0x40
	 * */
	if (line ==0){
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d106      	bne.n	80002c2 <LCD_GotoXY+0x24>
		LCD_SendCMD(LCD_CMD_DDRAM + LCD_L1_ADDR +col );
 80002b4:	79bb      	ldrb	r3, [r7, #6]
 80002b6:	3b80      	subs	r3, #128	; 0x80
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f80e 	bl	80002dc <LCD_SendCMD>
	}else if(line == 1){
		LCD_SendCMD(LCD_CMD_DDRAM + LCD_L2_ADDR +col );
	}
}
 80002c0:	e008      	b.n	80002d4 <LCD_GotoXY+0x36>
	}else if(line == 1){
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d105      	bne.n	80002d4 <LCD_GotoXY+0x36>
		LCD_SendCMD(LCD_CMD_DDRAM + LCD_L2_ADDR +col );
 80002c8:	79bb      	ldrb	r3, [r7, #6]
 80002ca:	3b40      	subs	r3, #64	; 0x40
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 f804 	bl	80002dc <LCD_SendCMD>
}
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <LCD_SendCMD>:
static void LCD_SendCMD(uint8_t cmd){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
	 * Send low nibble cmd
	 * Start latching
	 * Delay for 40 micro sec
	 */
	/* Command Mode */
	LCD_GPIO->ODR			&= ~(1<<LCD_CTRL_RS);
 80002e6:	4a20      	ldr	r2, [pc, #128]	; (8000368 <LCD_SendCMD+0x8c>)
 80002e8:	4b1f      	ldr	r3, [pc, #124]	; (8000368 <LCD_SendCMD+0x8c>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002f0:	6153      	str	r3, [r2, #20]
	/* Send Most 4 bits */
	LCD_GPIO->ODR			&= ~LCD_DATA_ODR_MASK;
 80002f2:	4a1d      	ldr	r2, [pc, #116]	; (8000368 <LCD_SendCMD+0x8c>)
 80002f4:	4b1c      	ldr	r3, [pc, #112]	; (8000368 <LCD_SendCMD+0x8c>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80002fc:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			|=  ( (cmd >> 4) << LCD_DATA_SHIFT );
 80002fe:	491a      	ldr	r1, [pc, #104]	; (8000368 <LCD_SendCMD+0x8c>)
 8000300:	4b19      	ldr	r3, [pc, #100]	; (8000368 <LCD_SendCMD+0x8c>)
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	79fa      	ldrb	r2, [r7, #7]
 8000306:	0912      	lsrs	r2, r2, #4
 8000308:	b2d2      	uxtb	r2, r2
 800030a:	0312      	lsls	r2, r2, #12
 800030c:	4313      	orrs	r3, r2
 800030e:	614b      	str	r3, [r1, #20]

	LCD_GPIO->ODR			|=  (1<<LCD_CTRL_EN);
 8000310:	4a15      	ldr	r2, [pc, #84]	; (8000368 <LCD_SendCMD+0x8c>)
 8000312:	4b15      	ldr	r3, [pc, #84]	; (8000368 <LCD_SendCMD+0x8c>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f043 0320 	orr.w	r3, r3, #32
 800031a:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			&= ~(1<<LCD_CTRL_EN);
 800031c:	4a12      	ldr	r2, [pc, #72]	; (8000368 <LCD_SendCMD+0x8c>)
 800031e:	4b12      	ldr	r3, [pc, #72]	; (8000368 <LCD_SendCMD+0x8c>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f023 0320 	bic.w	r3, r3, #32
 8000326:	6153      	str	r3, [r2, #20]
	/* Send Least 4 bits */
	LCD_GPIO->ODR			&= ~LCD_DATA_ODR_MASK;
 8000328:	4a0f      	ldr	r2, [pc, #60]	; (8000368 <LCD_SendCMD+0x8c>)
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <LCD_SendCMD+0x8c>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000332:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			|=  ( (cmd) << LCD_DATA_SHIFT );
 8000334:	490c      	ldr	r1, [pc, #48]	; (8000368 <LCD_SendCMD+0x8c>)
 8000336:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <LCD_SendCMD+0x8c>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	79fa      	ldrb	r2, [r7, #7]
 800033c:	0312      	lsls	r2, r2, #12
 800033e:	4313      	orrs	r3, r2
 8000340:	614b      	str	r3, [r1, #20]

	LCD_GPIO->ODR			|=  (1<<LCD_CTRL_EN);
 8000342:	4a09      	ldr	r2, [pc, #36]	; (8000368 <LCD_SendCMD+0x8c>)
 8000344:	4b08      	ldr	r3, [pc, #32]	; (8000368 <LCD_SendCMD+0x8c>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	f043 0320 	orr.w	r3, r3, #32
 800034c:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			&= ~(1<<LCD_CTRL_EN);
 800034e:	4a06      	ldr	r2, [pc, #24]	; (8000368 <LCD_SendCMD+0x8c>)
 8000350:	4b05      	ldr	r3, [pc, #20]	; (8000368 <LCD_SendCMD+0x8c>)
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	f023 0320 	bic.w	r3, r3, #32
 8000358:	6153      	str	r3, [r2, #20]
	/* wait for command to be executed */
	delayMs(1);
 800035a:	2001      	movs	r0, #1
 800035c:	f000 fb8e 	bl	8000a7c <delayMs>
}
 8000360:	bf00      	nop
 8000362:	3708      	adds	r7, #8
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40020400 	.word	0x40020400

0800036c <LCD_Clear>:
void LCD_Clear(void){
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	LCD_SendCMD(LCD_CMD_CLEAR);
 8000370:	2001      	movs	r0, #1
 8000372:	f7ff ffb3 	bl	80002dc <LCD_SendCMD>
	delayMs(5);
 8000376:	2005      	movs	r0, #5
 8000378:	f000 fb80 	bl	8000a7c <delayMs>
}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}

08000380 <LCD_SendData>:

static void LCD_SendData(uint8_t data){
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
	 * Send low nibble data
	 * Start latching
	 * Delay for 40 micro sec
	 */
	/* Command Mode */
	LCD_GPIO->ODR			|=  (1<<LCD_CTRL_RS);
 800038a:	4a20      	ldr	r2, [pc, #128]	; (800040c <LCD_SendData+0x8c>)
 800038c:	4b1f      	ldr	r3, [pc, #124]	; (800040c <LCD_SendData+0x8c>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000394:	6153      	str	r3, [r2, #20]
	/* Send Most 4 bits */
	LCD_GPIO->ODR			&= ~LCD_DATA_ODR_MASK;
 8000396:	4a1d      	ldr	r2, [pc, #116]	; (800040c <LCD_SendData+0x8c>)
 8000398:	4b1c      	ldr	r3, [pc, #112]	; (800040c <LCD_SendData+0x8c>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80003a0:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			|=  ( (data >> 4) << LCD_DATA_SHIFT );
 80003a2:	491a      	ldr	r1, [pc, #104]	; (800040c <LCD_SendData+0x8c>)
 80003a4:	4b19      	ldr	r3, [pc, #100]	; (800040c <LCD_SendData+0x8c>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	79fa      	ldrb	r2, [r7, #7]
 80003aa:	0912      	lsrs	r2, r2, #4
 80003ac:	b2d2      	uxtb	r2, r2
 80003ae:	0312      	lsls	r2, r2, #12
 80003b0:	4313      	orrs	r3, r2
 80003b2:	614b      	str	r3, [r1, #20]

	LCD_GPIO->ODR			|=  (1<<LCD_CTRL_EN);
 80003b4:	4a15      	ldr	r2, [pc, #84]	; (800040c <LCD_SendData+0x8c>)
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <LCD_SendData+0x8c>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f043 0320 	orr.w	r3, r3, #32
 80003be:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			&= ~(1<<LCD_CTRL_EN);
 80003c0:	4a12      	ldr	r2, [pc, #72]	; (800040c <LCD_SendData+0x8c>)
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <LCD_SendData+0x8c>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f023 0320 	bic.w	r3, r3, #32
 80003ca:	6153      	str	r3, [r2, #20]
	/* Send Least 4 bits */
	LCD_GPIO->ODR			&= ~LCD_DATA_ODR_MASK;
 80003cc:	4a0f      	ldr	r2, [pc, #60]	; (800040c <LCD_SendData+0x8c>)
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <LCD_SendData+0x8c>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80003d6:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			|=  ( (data) << LCD_DATA_SHIFT );
 80003d8:	490c      	ldr	r1, [pc, #48]	; (800040c <LCD_SendData+0x8c>)
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <LCD_SendData+0x8c>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	79fa      	ldrb	r2, [r7, #7]
 80003e0:	0312      	lsls	r2, r2, #12
 80003e2:	4313      	orrs	r3, r2
 80003e4:	614b      	str	r3, [r1, #20]

	LCD_GPIO->ODR			|=  (1<<LCD_CTRL_EN);
 80003e6:	4a09      	ldr	r2, [pc, #36]	; (800040c <LCD_SendData+0x8c>)
 80003e8:	4b08      	ldr	r3, [pc, #32]	; (800040c <LCD_SendData+0x8c>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	f043 0320 	orr.w	r3, r3, #32
 80003f0:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			&= ~(1<<LCD_CTRL_EN);
 80003f2:	4a06      	ldr	r2, [pc, #24]	; (800040c <LCD_SendData+0x8c>)
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <LCD_SendData+0x8c>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	f023 0320 	bic.w	r3, r3, #32
 80003fc:	6153      	str	r3, [r2, #20]
	/* wait for command to be executed */
	delayMs(1);
 80003fe:	2001      	movs	r0, #1
 8000400:	f000 fb3c 	bl	8000a7c <delayMs>
}
 8000404:	bf00      	nop
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40020400 	.word	0x40020400

08000410 <LCD_Init>:
void LCD_Init(void){
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	 * Select 4 Bit, 5*7,2 lines (Function Set)
	 * No cursor, Blink (Display CMD)
	 * Auto Inc with no Shift (Entry )
	 * Clear LCD
	 */
	RCC->AHB1ENR 			|=  LCD_RCC;
 8000414:	4a1d      	ldr	r2, [pc, #116]	; (800048c <LCD_Init+0x7c>)
 8000416:	4b1d      	ldr	r3, [pc, #116]	; (800048c <LCD_Init+0x7c>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	f043 0302 	orr.w	r3, r3, #2
 800041e:	6313      	str	r3, [r2, #48]	; 0x30

	LCD_GPIO->MODER			&= ~LCD_DATA_MODER_MASK;
 8000420:	4a1b      	ldr	r2, [pc, #108]	; (8000490 <LCD_Init+0x80>)
 8000422:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <LCD_Init+0x80>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800042a:	6013      	str	r3, [r2, #0]
	LCD_GPIO->MODER			|=  LCD_DATA_MODER_OUT_MASK;
 800042c:	4a18      	ldr	r2, [pc, #96]	; (8000490 <LCD_Init+0x80>)
 800042e:	4b18      	ldr	r3, [pc, #96]	; (8000490 <LCD_Init+0x80>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000436:	6013      	str	r3, [r2, #0]
	LCD_GPIO->ODR			&= ~LCD_DATA_ODR_MASK;
 8000438:	4a15      	ldr	r2, [pc, #84]	; (8000490 <LCD_Init+0x80>)
 800043a:	4b15      	ldr	r3, [pc, #84]	; (8000490 <LCD_Init+0x80>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000442:	6153      	str	r3, [r2, #20]

	LCD_GPIO->MODER			&= ~LCD_CTRL_MODER_MASK;
 8000444:	4a12      	ldr	r2, [pc, #72]	; (8000490 <LCD_Init+0x80>)
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <LCD_Init+0x80>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f423 3343 	bic.w	r3, r3, #199680	; 0x30c00
 800044e:	6013      	str	r3, [r2, #0]
	LCD_GPIO->MODER			|=  LCD_CTRL_MODER_OUT_MASK;
 8000450:	4a0f      	ldr	r2, [pc, #60]	; (8000490 <LCD_Init+0x80>)
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <LCD_Init+0x80>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f443 3382 	orr.w	r3, r3, #66560	; 0x10400
 800045a:	6013      	str	r3, [r2, #0]
	LCD_GPIO->ODR			&= ~((1<<LCD_CTRL_EN)|(1<<LCD_CTRL_RS));
 800045c:	4a0c      	ldr	r2, [pc, #48]	; (8000490 <LCD_Init+0x80>)
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <LCD_Init+0x80>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8000466:	6153      	str	r3, [r2, #20]



	delayMs(500);
 8000468:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800046c:	f000 fb06 	bl	8000a7c <delayMs>
	LCD_SendCMD(LCD_CMD_FUN_SET);
 8000470:	2028      	movs	r0, #40	; 0x28
 8000472:	f7ff ff33 	bl	80002dc <LCD_SendCMD>
	LCD_SendCMD(LCD_CMD_DISP);
 8000476:	200c      	movs	r0, #12
 8000478:	f7ff ff30 	bl	80002dc <LCD_SendCMD>
	LCD_SendCMD(LCD_CMD_ENTRY_INC);
 800047c:	2006      	movs	r0, #6
 800047e:	f7ff ff2d 	bl	80002dc <LCD_SendCMD>
	LCD_Clear();
 8000482:	f7ff ff73 	bl	800036c <LCD_Clear>

	//	LCD_SendCMD(0x01);
	//	delayMs(5);
}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40023800 	.word	0x40023800
 8000490:	40020400 	.word	0x40020400

08000494 <LCD_DispChar>:
void LCD_DispChar(uint8_t data){
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
	LCD_SendData(data);
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ff6d 	bl	8000380 <LCD_SendData>
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <LCD_DispCharXY>:
void LCD_DispCharXY(uint8_t line, uint8_t col,uint8_t data){
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b082      	sub	sp, #8
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	4603      	mov	r3, r0
 80004b6:	71fb      	strb	r3, [r7, #7]
 80004b8:	460b      	mov	r3, r1
 80004ba:	71bb      	strb	r3, [r7, #6]
 80004bc:	4613      	mov	r3, r2
 80004be:	717b      	strb	r3, [r7, #5]
	LCD_GotoXY(line,col);
 80004c0:	79ba      	ldrb	r2, [r7, #6]
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	4611      	mov	r1, r2
 80004c6:	4618      	mov	r0, r3
 80004c8:	f7ff fee9 	bl	800029e <LCD_GotoXY>
	LCD_DispChar(data);
 80004cc:	797b      	ldrb	r3, [r7, #5]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ffe0 	bl	8000494 <LCD_DispChar>
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <LCD_DispStr>:
void LCD_DispStr(uint8_t* str){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	uint8_t	 ind = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	73fb      	strb	r3, [r7, #15]
	while(str[ind]){
 80004e8:	e009      	b.n	80004fe <LCD_DispStr+0x22>
		LCD_DispChar(str[ind]);
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	4413      	add	r3, r2
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff ffce 	bl	8000494 <LCD_DispChar>
		ind++;
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
 80004fa:	3301      	adds	r3, #1
 80004fc:	73fb      	strb	r3, [r7, #15]
	while(str[ind]){
 80004fe:	7bfb      	ldrb	r3, [r7, #15]
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	4413      	add	r3, r2
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1ef      	bne.n	80004ea <LCD_DispStr+0xe>
	}
}
 800050a:	bf00      	nop
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <LCD_DispStrXY>:
void LCD_DispStrXY(uint8_t line, uint8_t col,uint8_t* str){
 8000512:	b580      	push	{r7, lr}
 8000514:	b082      	sub	sp, #8
 8000516:	af00      	add	r7, sp, #0
 8000518:	4603      	mov	r3, r0
 800051a:	603a      	str	r2, [r7, #0]
 800051c:	71fb      	strb	r3, [r7, #7]
 800051e:	460b      	mov	r3, r1
 8000520:	71bb      	strb	r3, [r7, #6]
	LCD_GotoXY(line,col);
 8000522:	79ba      	ldrb	r2, [r7, #6]
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	4611      	mov	r1, r2
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff feb8 	bl	800029e <LCD_GotoXY>
	LCD_DispStr(str);
 800052e:	6838      	ldr	r0, [r7, #0]
 8000530:	f7ff ffd4 	bl	80004dc <LCD_DispStr>
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <Buz_Init>:
 *  Relay	(PC13)
 *  Buttons	(PD2, PA11, PA12, PC0, PC1)
 * */

/* Buzzer */
void Buz_Init(void){
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	/* RCC Clock GPIOC */
	RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOCEN;
 8000540:	4a0a      	ldr	r2, [pc, #40]	; (800056c <Buz_Init+0x30>)
 8000542:	4b0a      	ldr	r3, [pc, #40]	; (800056c <Buz_Init+0x30>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	6313      	str	r3, [r2, #48]	; 0x30
	/* PC4 Out */
	GPIOC->MODER &= ~GPIO_MODER_MODER4;
 800054c:	4a08      	ldr	r2, [pc, #32]	; (8000570 <Buz_Init+0x34>)
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <Buz_Init+0x34>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000556:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  GPIO_MODER_MODER4_0;
 8000558:	4a05      	ldr	r2, [pc, #20]	; (8000570 <Buz_Init+0x34>)
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <Buz_Init+0x34>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000562:	6013      	str	r3, [r2, #0]
	Buz_Off();
 8000564:	f000 f816 	bl	8000594 <Buz_Off>
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40023800 	.word	0x40023800
 8000570:	40020800 	.word	0x40020800

08000574 <Buz_On>:
void Buz_On(void){
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	GPIOC->ODR |= GPIO_ODR_ODR_4;
 8000578:	4a05      	ldr	r2, [pc, #20]	; (8000590 <Buz_On+0x1c>)
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <Buz_On+0x1c>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f043 0310 	orr.w	r3, r3, #16
 8000582:	6153      	str	r3, [r2, #20]
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40020800 	.word	0x40020800

08000594 <Buz_Off>:
void Buz_Off(void){
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	GPIOC->ODR &= ~GPIO_ODR_ODR_4;
 8000598:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <Buz_Off+0x1c>)
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <Buz_Off+0x1c>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f023 0310 	bic.w	r3, r3, #16
 80005a2:	6153      	str	r3, [r2, #20]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40020800 	.word	0x40020800

080005b4 <EXTI0_IRQHandler>:
	default:
		break;
	}
	return (result == 0);
}
void EXTI0_IRQHandler(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	EXTI->PR	|=  EXTI_PR_PR0;
 80005b8:	4a05      	ldr	r2, [pc, #20]	; (80005d0 <EXTI0_IRQHandler+0x1c>)
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <EXTI0_IRQHandler+0x1c>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f043 0301 	orr.w	r3, r3, #1
 80005c2:	6153      	str	r3, [r2, #20]
	handler_down();
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <EXTI0_IRQHandler+0x20>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4798      	blx	r3
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40013c00 	.word	0x40013c00
 80005d4:	20000048 	.word	0x20000048

080005d8 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	EXTI->PR	|=  EXTI_PR_PR1;
 80005dc:	4a05      	ldr	r2, [pc, #20]	; (80005f4 <EXTI1_IRQHandler+0x1c>)
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <EXTI1_IRQHandler+0x1c>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f043 0302 	orr.w	r3, r3, #2
 80005e6:	6153      	str	r3, [r2, #20]
	handler_up();
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <EXTI1_IRQHandler+0x20>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4798      	blx	r3
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40013c00 	.word	0x40013c00
 80005f8:	2000003c 	.word	0x2000003c

080005fc <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	EXTI->PR	|=  EXTI_PR_PR2;
 8000600:	4a05      	ldr	r2, [pc, #20]	; (8000618 <EXTI2_IRQHandler+0x1c>)
 8000602:	4b05      	ldr	r3, [pc, #20]	; (8000618 <EXTI2_IRQHandler+0x1c>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	f043 0304 	orr.w	r3, r3, #4
 800060a:	6153      	str	r3, [r2, #20]
	handler_center();
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <EXTI2_IRQHandler+0x20>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4798      	blx	r3
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40013c00 	.word	0x40013c00
 800061c:	20000040 	.word	0x20000040

08000620 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR11){
 8000624:	4b10      	ldr	r3, [pc, #64]	; (8000668 <EXTI15_10_IRQHandler+0x48>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800062c:	2b00      	cmp	r3, #0
 800062e:	d009      	beq.n	8000644 <EXTI15_10_IRQHandler+0x24>
		EXTI->PR	|=  EXTI_PR_PR11;
 8000630:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <EXTI15_10_IRQHandler+0x48>)
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <EXTI15_10_IRQHandler+0x48>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800063a:	6153      	str	r3, [r2, #20]
		handler_right();
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <EXTI15_10_IRQHandler+0x4c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4798      	blx	r3
	}
	else if(EXTI->PR & EXTI_PR_PR12){
		EXTI->PR	|=  EXTI_PR_PR12;
		handler_left();
	}
}
 8000642:	e00e      	b.n	8000662 <EXTI15_10_IRQHandler+0x42>
	else if(EXTI->PR & EXTI_PR_PR12){
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <EXTI15_10_IRQHandler+0x48>)
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800064c:	2b00      	cmp	r3, #0
 800064e:	d008      	beq.n	8000662 <EXTI15_10_IRQHandler+0x42>
		EXTI->PR	|=  EXTI_PR_PR12;
 8000650:	4a05      	ldr	r2, [pc, #20]	; (8000668 <EXTI15_10_IRQHandler+0x48>)
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <EXTI15_10_IRQHandler+0x48>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800065a:	6153      	str	r3, [r2, #20]
		handler_left();
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <EXTI15_10_IRQHandler+0x50>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4798      	blx	r3
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40013c00 	.word	0x40013c00
 800066c:	20000044 	.word	0x20000044
 8000670:	20000038 	.word	0x20000038

08000674 <Keypad_Init>:
 *  Created on: Nov 9, 2020
 *      Author: MahmoudH
 */
#include "keypad.h"

void 	Keypad_Init(void){
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
	/* RCC */
	RCC->AHB1ENR |= (KEY_ROWS_RCC|KEY_COLS_RCC);
 8000678:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <Keypad_Init+0x64>)
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <Keypad_Init+0x64>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f043 0303 	orr.w	r3, r3, #3
 8000682:	6313      	str	r3, [r2, #48]	; 0x30
	/* Rows -> Out , default high*/
	KEY_ROWS_GPIO->MODER	&= ~KEY_ROWS_MODER_MASK;
 8000684:	4a15      	ldr	r2, [pc, #84]	; (80006dc <Keypad_Init+0x68>)
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <Keypad_Init+0x68>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800068e:	6013      	str	r3, [r2, #0]
	KEY_ROWS_GPIO->MODER	|=  KEY_ROWS_MODER_OUT_MASK;
 8000690:	4a12      	ldr	r2, [pc, #72]	; (80006dc <Keypad_Init+0x68>)
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <Keypad_Init+0x68>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 800069a:	6013      	str	r3, [r2, #0]
	KEY_ROWS_GPIO->ODR		|=  KEY_ROWS_ODR_MASK;
 800069c:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <Keypad_Init+0x68>)
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <Keypad_Init+0x68>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80006a6:	6153      	str	r3, [r2, #20]
	/* Cols -> In , pullup*/
	KEY_COLS_GPIO->MODER	&= ~KEY_COLS_MODER_MASK;
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <Keypad_Init+0x6c>)
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <Keypad_Init+0x6c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006b2:	6013      	str	r3, [r2, #0]
	KEY_COLS_GPIO->PUPDR	&= ~KEY_COLS_PUPDR_MASK;
 80006b4:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <Keypad_Init+0x6c>)
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <Keypad_Init+0x6c>)
 80006b8:	68db      	ldr	r3, [r3, #12]
 80006ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006be:	60d3      	str	r3, [r2, #12]
	KEY_COLS_GPIO->PUPDR	|=  KEY_COLS_PUPDR_UP_MASK;
 80006c0:	4a07      	ldr	r2, [pc, #28]	; (80006e0 <Keypad_Init+0x6c>)
 80006c2:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <Keypad_Init+0x6c>)
 80006c4:	68db      	ldr	r3, [r3, #12]
 80006c6:	f043 0315 	orr.w	r3, r3, #21
 80006ca:	60d3      	str	r3, [r2, #12]
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020000 	.word	0x40020000
 80006e0:	40020400 	.word	0x40020400

080006e4 <Keypad_GetKey>:
/* Key -> 1:9
 * Key 1 -> R1 and C1
 * 0 -> No pressed key
 *  */
uint8_t	Keypad_GetKey(void){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
	 *		de-activate this row
	 *  endfor
	 *
	 *	return 0
	 * */
	uint8_t key = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	717b      	strb	r3, [r7, #5]
	uint8_t rowInd = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	71fb      	strb	r3, [r7, #7]
	uint8_t colInd = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	71bb      	strb	r3, [r7, #6]
	for (rowInd = 0; rowInd < 3; ++rowInd) {
 80006f6:	2300      	movs	r3, #0
 80006f8:	71fb      	strb	r3, [r7, #7]
 80006fa:	e04c      	b.n	8000796 <Keypad_GetKey+0xb2>
		KEY_ROWS_GPIO->ODR &= ~(1<<(rowInd + KEY_ROWS_SHIFT));
 80006fc:	492a      	ldr	r1, [pc, #168]	; (80007a8 <Keypad_GetKey+0xc4>)
 80006fe:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <Keypad_GetKey+0xc4>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	79fa      	ldrb	r2, [r7, #7]
 8000704:	3205      	adds	r2, #5
 8000706:	2001      	movs	r0, #1
 8000708:	fa00 f202 	lsl.w	r2, r0, r2
 800070c:	43d2      	mvns	r2, r2
 800070e:	4013      	ands	r3, r2
 8000710:	614b      	str	r3, [r1, #20]
		delayMs(1);
 8000712:	2001      	movs	r0, #1
 8000714:	f000 f9b2 	bl	8000a7c <delayMs>
		for (colInd = 0; colInd < 3; ++colInd) {
 8000718:	2300      	movs	r3, #0
 800071a:	71bb      	strb	r3, [r7, #6]
 800071c:	e02b      	b.n	8000776 <Keypad_GetKey+0x92>
			if( !((KEY_COLS_GPIO->IDR) & (1<<(colInd + KEY_COLS_SHIFT)) ) ){
 800071e:	4b23      	ldr	r3, [pc, #140]	; (80007ac <Keypad_GetKey+0xc8>)
 8000720:	691b      	ldr	r3, [r3, #16]
 8000722:	79ba      	ldrb	r2, [r7, #6]
 8000724:	2101      	movs	r1, #1
 8000726:	fa01 f202 	lsl.w	r2, r1, r2
 800072a:	4013      	ands	r3, r2
 800072c:	2b00      	cmp	r3, #0
 800072e:	d11f      	bne.n	8000770 <Keypad_GetKey+0x8c>
				key = colInd*1 + rowInd*3 + 1;
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	461a      	mov	r2, r3
 8000734:	0052      	lsls	r2, r2, #1
 8000736:	4413      	add	r3, r2
 8000738:	b2da      	uxtb	r2, r3
 800073a:	79bb      	ldrb	r3, [r7, #6]
 800073c:	4413      	add	r3, r2
 800073e:	b2db      	uxtb	r3, r3
 8000740:	3301      	adds	r3, #1
 8000742:	717b      	strb	r3, [r7, #5]
				KEY_ROWS_GPIO->ODR |= (1<<(rowInd + KEY_ROWS_SHIFT));
 8000744:	4918      	ldr	r1, [pc, #96]	; (80007a8 <Keypad_GetKey+0xc4>)
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <Keypad_GetKey+0xc4>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	79fa      	ldrb	r2, [r7, #7]
 800074c:	3205      	adds	r2, #5
 800074e:	2001      	movs	r0, #1
 8000750:	fa00 f202 	lsl.w	r2, r0, r2
 8000754:	4313      	orrs	r3, r2
 8000756:	614b      	str	r3, [r1, #20]
				while( !((KEY_COLS_GPIO->IDR) & (1<<(colInd + KEY_COLS_SHIFT)) ) );
 8000758:	bf00      	nop
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <Keypad_GetKey+0xc8>)
 800075c:	691b      	ldr	r3, [r3, #16]
 800075e:	79ba      	ldrb	r2, [r7, #6]
 8000760:	2101      	movs	r1, #1
 8000762:	fa01 f202 	lsl.w	r2, r1, r2
 8000766:	4013      	ands	r3, r2
 8000768:	2b00      	cmp	r3, #0
 800076a:	d0f6      	beq.n	800075a <Keypad_GetKey+0x76>
				return key;
 800076c:	797b      	ldrb	r3, [r7, #5]
 800076e:	e016      	b.n	800079e <Keypad_GetKey+0xba>
		for (colInd = 0; colInd < 3; ++colInd) {
 8000770:	79bb      	ldrb	r3, [r7, #6]
 8000772:	3301      	adds	r3, #1
 8000774:	71bb      	strb	r3, [r7, #6]
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	2b02      	cmp	r3, #2
 800077a:	d9d0      	bls.n	800071e <Keypad_GetKey+0x3a>
			}
		}
		KEY_ROWS_GPIO->ODR |= (1<<(rowInd + KEY_ROWS_SHIFT));
 800077c:	490a      	ldr	r1, [pc, #40]	; (80007a8 <Keypad_GetKey+0xc4>)
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <Keypad_GetKey+0xc4>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	79fa      	ldrb	r2, [r7, #7]
 8000784:	3205      	adds	r2, #5
 8000786:	2001      	movs	r0, #1
 8000788:	fa00 f202 	lsl.w	r2, r0, r2
 800078c:	4313      	orrs	r3, r2
 800078e:	614b      	str	r3, [r1, #20]
	for (rowInd = 0; rowInd < 3; ++rowInd) {
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	3301      	adds	r3, #1
 8000794:	71fb      	strb	r3, [r7, #7]
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b02      	cmp	r3, #2
 800079a:	d9af      	bls.n	80006fc <Keypad_GetKey+0x18>
	}
	return 0;
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40020000 	.word	0x40020000
 80007ac:	40020400 	.word	0x40020400

080007b0 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80007b4:	4a12      	ldr	r2, [pc, #72]	; (8000800 <RCC_DeInit+0x50>)
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <RCC_DeInit+0x50>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <RCC_DeInit+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <RCC_DeInit+0x50>)
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <RCC_DeInit+0x50>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 80007d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007d4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <RCC_DeInit+0x50>)
 80007d8:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <RCC_DeInit+0x54>)
 80007da:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <RCC_DeInit+0x50>)
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <RCC_DeInit+0x58>)
 80007e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <RCC_DeInit+0x50>)
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <RCC_DeInit+0x50>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <RCC_DeInit+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	40023800 	.word	0x40023800
 8000804:	24003010 	.word	0x24003010
 8000808:	20003000 	.word	0x20003000

0800080c <TWI_Init>:
/* I2C1:
 * SCK: PB6
 * SDA: PB7
 * EEPROM AT24C16
 *  */
void TWI_Init(void){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR 	|= 	RCC_AHB1ENR_GPIOBEN;
 8000810:	4a37      	ldr	r2, [pc, #220]	; (80008f0 <TWI_Init+0xe4>)
 8000812:	4b37      	ldr	r3, [pc, #220]	; (80008f0 <TWI_Init+0xe4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f043 0302 	orr.w	r3, r3, #2
 800081a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR 	|= 	RCC_APB1ENR_I2C1EN;
 800081c:	4a34      	ldr	r2, [pc, #208]	; (80008f0 <TWI_Init+0xe4>)
 800081e:	4b34      	ldr	r3, [pc, #208]	; (80008f0 <TWI_Init+0xe4>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000826:	6413      	str	r3, [r2, #64]	; 0x40

	GPIOB->MODER 	&= 	~(0xF << (6 * 2));
 8000828:	4a32      	ldr	r2, [pc, #200]	; (80008f4 <TWI_Init+0xe8>)
 800082a:	4b32      	ldr	r3, [pc, #200]	; (80008f4 <TWI_Init+0xe8>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000832:	6013      	str	r3, [r2, #0]
	GPIOB->MODER 	|= 	 (0xA << (6 * 2));
 8000834:	4a2f      	ldr	r2, [pc, #188]	; (80008f4 <TWI_Init+0xe8>)
 8000836:	4b2f      	ldr	r3, [pc, #188]	; (80008f4 <TWI_Init+0xe8>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 800083e:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER	|= 	(3<<6); /* Open drain */
 8000840:	4a2c      	ldr	r2, [pc, #176]	; (80008f4 <TWI_Init+0xe8>)
 8000842:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <TWI_Init+0xe8>)
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800084a:	6053      	str	r3, [r2, #4]


	//GPIOB->AFR[0] |= 0x4<<(6*4);
	//GPIOB->AFR[0] |= 0x4<<(7*4);

	GPIOB->AFR[0] 	&= ~(0xFF << (6 * 4));
 800084c:	4a29      	ldr	r2, [pc, #164]	; (80008f4 <TWI_Init+0xe8>)
 800084e:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <TWI_Init+0xe8>)
 8000850:	6a1b      	ldr	r3, [r3, #32]
 8000852:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000856:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] 	|=  (0x4 << (6 * 4));
 8000858:	4a26      	ldr	r2, [pc, #152]	; (80008f4 <TWI_Init+0xe8>)
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <TWI_Init+0xe8>)
 800085c:	6a1b      	ldr	r3, [r3, #32]
 800085e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000862:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] 	|=  (0x4 << (7 * 4));
 8000864:	4a23      	ldr	r2, [pc, #140]	; (80008f4 <TWI_Init+0xe8>)
 8000866:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <TWI_Init+0xe8>)
 8000868:	6a1b      	ldr	r3, [r3, #32]
 800086a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800086e:	6213      	str	r3, [r2, #32]

	I2C1->CR1		&=	~(I2C_CR1_PE);
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <TWI_Init+0xec>)
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <TWI_Init+0xec>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	b29b      	uxth	r3, r3
 8000878:	f023 0301 	bic.w	r3, r3, #1
 800087c:	b29b      	uxth	r3, r3
 800087e:	8013      	strh	r3, [r2, #0]

	/* Frequency Setup */
	I2C1->CCR 		&=	~I2C_CCR_FS; 	/* standard mode */
 8000880:	4a1d      	ldr	r2, [pc, #116]	; (80008f8 <TWI_Init+0xec>)
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <TWI_Init+0xec>)
 8000884:	8b9b      	ldrh	r3, [r3, #28]
 8000886:	b29b      	uxth	r3, r3
 8000888:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800088c:	b29b      	uxth	r3, r3
 800088e:	8393      	strh	r3, [r2, #28]

	I2C1->CR2		&=	~I2C_CR2_FREQ;	/* Fpclk1 = 2MHz */
 8000890:	4a19      	ldr	r2, [pc, #100]	; (80008f8 <TWI_Init+0xec>)
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <TWI_Init+0xec>)
 8000894:	889b      	ldrh	r3, [r3, #4]
 8000896:	b29b      	uxth	r3, r3
 8000898:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800089c:	b29b      	uxth	r3, r3
 800089e:	8093      	strh	r3, [r2, #4]
	I2C1->CR2		|=   (2<<0);
 80008a0:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <TWI_Init+0xec>)
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <TWI_Init+0xec>)
 80008a4:	889b      	ldrh	r3, [r3, #4]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	8093      	strh	r3, [r2, #4]
	 	 Tp = Th + TL = 2*CCR*Tpclk
		CCR = Tp/(2*Tpclk1)
		CCR = Fpclk1/(2*Fsm)
       	   	= 20/2 = 10
	 */
	I2C1->CCR		&=	~I2C_CCR_CCR;
 80008b0:	4a11      	ldr	r2, [pc, #68]	; (80008f8 <TWI_Init+0xec>)
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <TWI_Init+0xec>)
 80008b4:	8b9b      	ldrh	r3, [r3, #28]
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80008bc:	f023 030f 	bic.w	r3, r3, #15
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	8393      	strh	r3, [r2, #28]
	I2C1->CCR		|=   (10<<0);
 80008c4:	4a0c      	ldr	r2, [pc, #48]	; (80008f8 <TWI_Init+0xec>)
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <TWI_Init+0xec>)
 80008c8:	8b9b      	ldrh	r3, [r3, #28]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	f043 030a 	orr.w	r3, r3, #10
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	8393      	strh	r3, [r2, #28]
	/* Enable I2C */
	I2C1->CR1		|=   (I2C_CR1_PE);
 80008d4:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <TWI_Init+0xec>)
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <TWI_Init+0xec>)
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	b29b      	uxth	r3, r3
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	8013      	strh	r3, [r2, #0]
	delayMs(100);
 80008e4:	2064      	movs	r0, #100	; 0x64
 80008e6:	f000 f8c9 	bl	8000a7c <delayMs>
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020400 	.word	0x40020400
 80008f8:	40005400 	.word	0x40005400

080008fc <I2C1_Start>:
	I2C1->CCR		|=   (10<<0);
	/* Enable I2C */
	I2C1->CR1		|=   (I2C_CR1_PE);
	delayMs(100);
}
void 	I2C1_Start(void){
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
	I2C1->CR1		|= I2C_CR1_START;
 8000900:	4a0a      	ldr	r2, [pc, #40]	; (800092c <I2C1_Start+0x30>)
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <I2C1_Start+0x30>)
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	b29b      	uxth	r3, r3
 8000908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800090c:	b29b      	uxth	r3, r3
 800090e:	8013      	strh	r3, [r2, #0]
	while(!( I2C1->SR1 & I2C_SR1_SB));
 8000910:	bf00      	nop
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <I2C1_Start+0x30>)
 8000914:	8a9b      	ldrh	r3, [r3, #20]
 8000916:	b29b      	uxth	r3, r3
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	2b00      	cmp	r3, #0
 800091e:	d0f8      	beq.n	8000912 <I2C1_Start+0x16>
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40005400 	.word	0x40005400

08000930 <I2C1_Stop>:
void 	I2C1_Stop(void){
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
	I2C1->CR1		|= I2C_CR1_STOP;
 8000934:	4a06      	ldr	r2, [pc, #24]	; (8000950 <I2C1_Stop+0x20>)
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <I2C1_Stop+0x20>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	b29b      	uxth	r3, r3
 800093c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000940:	b29b      	uxth	r3, r3
 8000942:	8013      	strh	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40005400 	.word	0x40005400

08000954 <I2C1_WriteData>:

void 	I2C1_WriteData(uint8_t data){
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	I2C1->DR	 = data;
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <I2C1_WriteData+0x30>)
 8000960:	79fa      	ldrb	r2, [r7, #7]
 8000962:	b292      	uxth	r2, r2
 8000964:	821a      	strh	r2, [r3, #16]
	while(!( I2C1->SR1 & I2C_SR1_TXE));
 8000966:	bf00      	nop
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <I2C1_WriteData+0x30>)
 800096a:	8a9b      	ldrh	r3, [r3, #20]
 800096c:	b29b      	uxth	r3, r3
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	2b00      	cmp	r3, #0
 8000974:	d0f8      	beq.n	8000968 <I2C1_WriteData+0x14>
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40005400 	.word	0x40005400

08000988 <I2C1_WriteAddress>:
void 	I2C1_WriteAddress(uint8_t addr){
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
	I2C1->DR	 = addr;
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <I2C1_WriteAddress+0x34>)
 8000994:	79fa      	ldrb	r2, [r7, #7]
 8000996:	b292      	uxth	r2, r2
 8000998:	821a      	strh	r2, [r3, #16]
	while(!( I2C1->SR1 & I2C_SR1_ADDR));
 800099a:	bf00      	nop
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <I2C1_WriteAddress+0x34>)
 800099e:	8a9b      	ldrh	r3, [r3, #20]
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d0f8      	beq.n	800099c <I2C1_WriteAddress+0x14>
	/* dummy read to SR2 register to clear the address flag */
	(uint32_t)I2C1->SR2;
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <I2C1_WriteAddress+0x34>)
 80009ac:	8b1b      	ldrh	r3, [r3, #24]
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40005400 	.word	0x40005400

080009c0 <I2C1_ReadData>:
uint8_t I2C1_ReadData(void){
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
	/* ACK
	 * CR1_ACK
	 *  */
	while(!( I2C1->SR1 & I2C_SR1_RXNE));
 80009c4:	bf00      	nop
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <I2C1_ReadData+0x28>)
 80009c8:	8a9b      	ldrh	r3, [r3, #20]
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d0f8      	beq.n	80009c6 <I2C1_ReadData+0x6>
	return I2C1->DR;
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <I2C1_ReadData+0x28>)
 80009d6:	8a1b      	ldrh	r3, [r3, #16]
 80009d8:	b29b      	uxth	r3, r3
 80009da:	b2db      	uxtb	r3, r3
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40005400 	.word	0x40005400

080009ec <TIM1_CC_IRQHandler>:



volatile uint32_t pulse_width = 0;
static volatile uint8_t  edge_state  = 0; /* 0: Rising, 1: Falling */
void TIM1_CC_IRQHandler(void){
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
	TIM1->SR &= ~TIM_SR_CC1IF;
 80009f0:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <TIM1_CC_IRQHandler+0x50>)
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <TIM1_CC_IRQHandler+0x50>)
 80009f4:	8a1b      	ldrh	r3, [r3, #16]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	f023 0302 	bic.w	r3, r3, #2
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	8213      	strh	r3, [r2, #16]
	if(edge_state == 0){
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <TIM1_CC_IRQHandler+0x54>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d106      	bne.n	8000a18 <TIM1_CC_IRQHandler+0x2c>
		/* Rising */
		TIM1->CNT = 0;
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <TIM1_CC_IRQHandler+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	625a      	str	r2, [r3, #36]	; 0x24
		edge_state = 1;
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <TIM1_CC_IRQHandler+0x54>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
	}else if(edge_state == 1){
		/* Falling */
		pulse_width = TIM1->CCR1;
		edge_state = 0;
	}
}
 8000a16:	e00b      	b.n	8000a30 <TIM1_CC_IRQHandler+0x44>
	}else if(edge_state == 1){
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <TIM1_CC_IRQHandler+0x54>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d106      	bne.n	8000a30 <TIM1_CC_IRQHandler+0x44>
		pulse_width = TIM1->CCR1;
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <TIM1_CC_IRQHandler+0x50>)
 8000a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a26:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <TIM1_CC_IRQHandler+0x58>)
 8000a28:	6013      	str	r3, [r2, #0]
		edge_state = 0;
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <TIM1_CC_IRQHandler+0x54>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40010000 	.word	0x40010000
 8000a40:	20000034 	.word	0x20000034
 8000a44:	20000030 	.word	0x20000030

08000a48 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	if(TIM3->SR & TIM_SR_UIF){
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <TIM3_IRQHandler+0x2c>)
 8000a4e:	8a1b      	ldrh	r3, [r3, #16]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d00a      	beq.n	8000a70 <TIM3_IRQHandler+0x28>
		TIM3->SR &= ~TIM_SR_UIF;
 8000a5a:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <TIM3_IRQHandler+0x2c>)
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <TIM3_IRQHandler+0x2c>)
 8000a5e:	8a1b      	ldrh	r3, [r3, #16]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	f023 0301 	bic.w	r3, r3, #1
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	8213      	strh	r3, [r2, #16]
		notifyHandle();
 8000a6a:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <TIM3_IRQHandler+0x30>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4798      	blx	r3
		//TIM3->CR1	&= ~TIM_CR1_CEN;
	}
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40000400 	.word	0x40000400
 8000a78:	2000004c 	.word	0x2000004c

08000a7c <delayMs>:
 *  Created on: Nov 5, 2020
 *      Author: MahmoudH
 */
#include "delay.h"

void delayMs(uint32_t delay_ms){
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	uint32_t ind1 = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
	uint32_t ind2 = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
	for (ind1 = 0; ind1 < delay_ms; ++ind1) {
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	e00e      	b.n	8000ab0 <delayMs+0x34>
		for (ind2 = 0; ind2 < 1250; ++ind2) {
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	e003      	b.n	8000aa0 <delayMs+0x24>
			asm("nop");
 8000a98:	bf00      	nop
		for (ind2 = 0; ind2 < 1250; ++ind2) {
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d9f6      	bls.n	8000a98 <delayMs+0x1c>
	for (ind1 = 0; ind1 < delay_ms; ++ind1) {
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	3301      	adds	r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d3ec      	bcc.n	8000a92 <delayMs+0x16>
		}
	}
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <getPassword>:

char g_myPassword[ PASS_LEN ];


void getPassword( char * password )
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	73fb      	strb	r3, [r7, #15]
	for( i = 0 ; i<PASS_LEN; i++ )
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	73fb      	strb	r3, [r7, #15]
 8000ad4:	e019      	b.n	8000b0a <getPassword+0x46>
	{
		while( Keypad_GetKey() == 0 );
 8000ad6:	bf00      	nop
 8000ad8:	f7ff fe04 	bl	80006e4 <Keypad_GetKey>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d0fa      	beq.n	8000ad8 <getPassword+0x14>
		password[i] = Keypad_GetKey();
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	18d4      	adds	r4, r2, r3
 8000ae8:	f7ff fdfc 	bl	80006e4 <Keypad_GetKey>
 8000aec:	4603      	mov	r3, r0
 8000aee:	7023      	strb	r3, [r4, #0]
		delayMs(1000);
 8000af0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af4:	f7ff ffc2 	bl	8000a7c <delayMs>
		LCD_DispCharXY(1,i,'*');
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	222a      	movs	r2, #42	; 0x2a
 8000afc:	4619      	mov	r1, r3
 8000afe:	2001      	movs	r0, #1
 8000b00:	f7ff fcd5 	bl	80004ae <LCD_DispCharXY>
	for( i = 0 ; i<PASS_LEN; i++ )
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	3301      	adds	r3, #1
 8000b08:	73fb      	strb	r3, [r7, #15]
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	2b03      	cmp	r3, #3
 8000b0e:	d9e2      	bls.n	8000ad6 <getPassword+0x12>
	}
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd90      	pop	{r4, r7, pc}

08000b18 <confirmPassword>:

uint8_t confirmPassword( char const * password )
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]
	uint8_t result = CONFIRM_SUCCESS;
 8000b24:	2301      	movs	r3, #1
 8000b26:	73bb      	strb	r3, [r7, #14]
	uint8_t new_key;

	for( i = 0; i<PASS_LEN; i++ )
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	e01f      	b.n	8000b6e <confirmPassword+0x56>
	{
		while( Keypad_GetKey() == 0 );
 8000b2e:	bf00      	nop
 8000b30:	f7ff fdd8 	bl	80006e4 <Keypad_GetKey>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d0fa      	beq.n	8000b30 <confirmPassword+0x18>
		new_key = Keypad_GetKey();
 8000b3a:	f7ff fdd3 	bl	80006e4 <Keypad_GetKey>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	737b      	strb	r3, [r7, #13]
		delayMs(1000);
 8000b42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b46:	f7ff ff99 	bl	8000a7c <delayMs>
		LCD_DispCharXY(1,i,'*');
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	222a      	movs	r2, #42	; 0x2a
 8000b4e:	4619      	mov	r1, r3
 8000b50:	2001      	movs	r0, #1
 8000b52:	f7ff fcac 	bl	80004ae <LCD_DispCharXY>
		if( new_key != password[i] )
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	7b7a      	ldrb	r2, [r7, #13]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d001      	beq.n	8000b68 <confirmPassword+0x50>
		{
			result = CONFIRM_FAIL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73bb      	strb	r3, [r7, #14]
	for( i = 0; i<PASS_LEN; i++ )
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	73fb      	strb	r3, [r7, #15]
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	2b03      	cmp	r3, #3
 8000b72:	d9dc      	bls.n	8000b2e <confirmPassword+0x16>
		}
	}
	return result;
 8000b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <main>:


int main(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0

	uint8_t EEPROM_checkByte = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	717b      	strb	r3, [r7, #5]
	uint8_t Password_count = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	71bb      	strb	r3, [r7, #6]
	/* Clock -> Internal 16 MHz */
	RCC_DeInit();				/* Adapt PLL to the internal 16 MHz RC oscillator */
 8000b92:	f7ff fe0d 	bl	80007b0 <RCC_DeInit>
	SystemCoreClockUpdate();	/* Update SystemCoreClock */
 8000b96:	f000 f935 	bl	8000e04 <SystemCoreClockUpdate>

	LCD_Init();
 8000b9a:	f7ff fc39 	bl	8000410 <LCD_Init>
	Keypad_Init();
 8000b9e:	f7ff fd69 	bl	8000674 <Keypad_Init>
	EEPROM_Init();
 8000ba2:	f7ff fb11 	bl	80001c8 <EEPROM_Init>
	Buz_Init();
 8000ba6:	f7ff fcc9 	bl	800053c <Buz_Init>

	EEPROM_ReadByte(0xFF,&EEPROM_checkByte);
 8000baa:	1d7b      	adds	r3, r7, #5
 8000bac:	4619      	mov	r1, r3
 8000bae:	20ff      	movs	r0, #255	; 0xff
 8000bb0:	f7ff fb3e 	bl	8000230 <EEPROM_ReadByte>
	/* If its first time initializing the system, ask the user for a new password */
	if( EEPROM_checkByte != PASSWORD_SAVED )
 8000bb4:	797b      	ldrb	r3, [r7, #5]
 8000bb6:	2b52      	cmp	r3, #82	; 0x52
 8000bb8:	d039      	beq.n	8000c2e <main+0xae>
	{
		do
		{
			LCD_Clear();
 8000bba:	f7ff fbd7 	bl	800036c <LCD_Clear>
			LCD_DispStrXY(0,0,"Enter pass: ");
 8000bbe:	4a45      	ldr	r2, [pc, #276]	; (8000cd4 <main+0x154>)
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f7ff fca5 	bl	8000512 <LCD_DispStrXY>
			getPassword( g_myPassword );
 8000bc8:	4843      	ldr	r0, [pc, #268]	; (8000cd8 <main+0x158>)
 8000bca:	f7ff ff7b 	bl	8000ac4 <getPassword>
			LCD_Clear();
 8000bce:	f7ff fbcd 	bl	800036c <LCD_Clear>
			LCD_DispStrXY(0,0,"Confirm pass: ");
 8000bd2:	4a42      	ldr	r2, [pc, #264]	; (8000cdc <main+0x15c>)
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff fc9b 	bl	8000512 <LCD_DispStrXY>
		}
		while( confirmPassword( g_myPassword ) != CONFIRM_SUCCESS );
 8000bdc:	483e      	ldr	r0, [pc, #248]	; (8000cd8 <main+0x158>)
 8000bde:	f7ff ff9b 	bl	8000b18 <confirmPassword>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d1e8      	bne.n	8000bba <main+0x3a>

		LCD_Clear();
 8000be8:	f7ff fbc0 	bl	800036c <LCD_Clear>
		LCD_DispStrXY(0,0,"Success ");
 8000bec:	4a3c      	ldr	r2, [pc, #240]	; (8000ce0 <main+0x160>)
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff fc8e 	bl	8000512 <LCD_DispStrXY>
		delayMs(2000);
 8000bf6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bfa:	f7ff ff3f 	bl	8000a7c <delayMs>
		EEPROM_WriteByte(0xFF, PASSWORD_SAVED );
 8000bfe:	2152      	movs	r1, #82	; 0x52
 8000c00:	20ff      	movs	r0, #255	; 0xff
 8000c02:	f7ff fae7 	bl	80001d4 <EEPROM_WriteByte>
		/* Add the new password to the EEPROM */
		for(i=0; i<PASS_LEN; i++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	71bb      	strb	r3, [r7, #6]
 8000c0a:	e00c      	b.n	8000c26 <main+0xa6>
		{
			EEPROM_WriteByte(0xF0+i,g_myPassword[i]);
 8000c0c:	79bb      	ldrb	r3, [r7, #6]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	33f0      	adds	r3, #240	; 0xf0
 8000c12:	b298      	uxth	r0, r3
 8000c14:	79bb      	ldrb	r3, [r7, #6]
 8000c16:	4a30      	ldr	r2, [pc, #192]	; (8000cd8 <main+0x158>)
 8000c18:	5cd3      	ldrb	r3, [r2, r3]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f7ff fada 	bl	80001d4 <EEPROM_WriteByte>
		for(i=0; i<PASS_LEN; i++)
 8000c20:	79bb      	ldrb	r3, [r7, #6]
 8000c22:	3301      	adds	r3, #1
 8000c24:	71bb      	strb	r3, [r7, #6]
 8000c26:	79bb      	ldrb	r3, [r7, #6]
 8000c28:	2b03      	cmp	r3, #3
 8000c2a:	d9ef      	bls.n	8000c0c <main+0x8c>
 8000c2c:	e049      	b.n	8000cc2 <main+0x142>
		}
	}
	else
	{
		/* get the password from EEPROM */
		for(i=0; i<PASS_LEN; i++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	71bb      	strb	r3, [r7, #6]
 8000c32:	e00c      	b.n	8000c4e <main+0xce>
		{
			EEPROM_ReadByte(0xF0+i,&g_myPassword[i]);
 8000c34:	79bb      	ldrb	r3, [r7, #6]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	33f0      	adds	r3, #240	; 0xf0
 8000c3a:	b298      	uxth	r0, r3
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	4a26      	ldr	r2, [pc, #152]	; (8000cd8 <main+0x158>)
 8000c40:	4413      	add	r3, r2
 8000c42:	4619      	mov	r1, r3
 8000c44:	f7ff faf4 	bl	8000230 <EEPROM_ReadByte>
		for(i=0; i<PASS_LEN; i++)
 8000c48:	79bb      	ldrb	r3, [r7, #6]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	71bb      	strb	r3, [r7, #6]
 8000c4e:	79bb      	ldrb	r3, [r7, #6]
 8000c50:	2b03      	cmp	r3, #3
 8000c52:	d9ef      	bls.n	8000c34 <main+0xb4>
		}
		LCD_Clear();
 8000c54:	f7ff fb8a 	bl	800036c <LCD_Clear>
		LCD_DispStrXY(0,0,"Check pass: ");
 8000c58:	4a22      	ldr	r2, [pc, #136]	; (8000ce4 <main+0x164>)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff fc58 	bl	8000512 <LCD_DispStrXY>
		while( (confirmPassword(g_myPassword) != CONFIRM_SUCCESS ) )
 8000c62:	e01d      	b.n	8000ca0 <main+0x120>
		{
			/* Check if the user entered it incorrectly or not in 3 times */
			if( Password_count >=3 )
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d910      	bls.n	8000c8c <main+0x10c>
			{
				LCD_Clear();
 8000c6a:	f7ff fb7f 	bl	800036c <LCD_Clear>
				LCD_DispStrXY(0,0,"Unauthorized ");
 8000c6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ce8 <main+0x168>)
 8000c70:	2100      	movs	r1, #0
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff fc4d 	bl	8000512 <LCD_DispStrXY>
				Buz_On();
 8000c78:	f7ff fc7c 	bl	8000574 <Buz_On>
				delayMs(5000);
 8000c7c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c80:	f7ff fefc 	bl	8000a7c <delayMs>
				Buz_Off();
 8000c84:	f7ff fc86 	bl	8000594 <Buz_Off>
				Password_count = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	71fb      	strb	r3, [r7, #7]
			}
			Password_count++;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	71fb      	strb	r3, [r7, #7]
			LCD_Clear();
 8000c92:	f7ff fb6b 	bl	800036c <LCD_Clear>
			LCD_DispStrXY(0,0,"Check pass: ");
 8000c96:	4a13      	ldr	r2, [pc, #76]	; (8000ce4 <main+0x164>)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff fc39 	bl	8000512 <LCD_DispStrXY>
		while( (confirmPassword(g_myPassword) != CONFIRM_SUCCESS ) )
 8000ca0:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <main+0x158>)
 8000ca2:	f7ff ff39 	bl	8000b18 <confirmPassword>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d1db      	bne.n	8000c64 <main+0xe4>
		}
		LCD_Clear();
 8000cac:	f7ff fb5e 	bl	800036c <LCD_Clear>
		LCD_DispStrXY(0,0,"Confirmed ");
 8000cb0:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <main+0x16c>)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f7ff fc2c 	bl	8000512 <LCD_DispStrXY>
		delayMs(2000);
 8000cba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cbe:	f7ff fedd 	bl	8000a7c <delayMs>

	}

	LCD_Clear();
 8000cc2:	f7ff fb53 	bl	800036c <LCD_Clear>
	LCD_DispStrXY(0,0,"While 1 ");
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <main+0x170>)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fc21 	bl	8000512 <LCD_DispStrXY>

	while(1)
 8000cd0:	e7fe      	b.n	8000cd0 <main+0x150>
 8000cd2:	bf00      	nop
 8000cd4:	08001054 	.word	0x08001054
 8000cd8:	20000050 	.word	0x20000050
 8000cdc:	08001064 	.word	0x08001064
 8000ce0:	08001074 	.word	0x08001074
 8000ce4:	08001080 	.word	0x08001080
 8000ce8:	08001090 	.word	0x08001090
 8000cec:	080010a0 	.word	0x080010a0
 8000cf0:	080010ac 	.word	0x080010ac

08000cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cf8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cfa:	e003      	b.n	8000d04 <LoopCopyDataInit>

08000cfc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cfe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d02:	3104      	adds	r1, #4

08000d04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d04:	480b      	ldr	r0, [pc, #44]	; (8000d34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d0c:	d3f6      	bcc.n	8000cfc <CopyDataInit>
  ldr  r2, =_sbss
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d10:	e002      	b.n	8000d18 <LoopFillZerobss>

08000d12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d14:	f842 3b04 	str.w	r3, [r2], #4

08000d18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d1c:	d3f9      	bcc.n	8000d12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d1e:	f000 f83b 	bl	8000d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d22:	f000 f967 	bl	8000ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d26:	f7ff ff2b 	bl	8000b80 <main>
  bx  lr    
 8000d2a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d2c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000d30:	080010c0 	.word	0x080010c0
  ldr  r0, =_sdata
 8000d34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d38:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000d3c:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000d40:	20000054 	.word	0x20000054

08000d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC_IRQHandler>

08000d46 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <HardFault_Handler+0x4>

08000d5a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <MemManage_Handler+0x4>

08000d60 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <BusFault_Handler+0x4>

08000d66 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <UsageFault_Handler+0x4>

08000d6c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d9c:	4a16      	ldr	r2, [pc, #88]	; (8000df8 <SystemInit+0x60>)
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <SystemInit+0x60>)
 8000da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000dac:	4a13      	ldr	r2, [pc, #76]	; (8000dfc <SystemInit+0x64>)
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <SystemInit+0x64>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <SystemInit+0x64>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000dbe:	4a0f      	ldr	r2, [pc, #60]	; (8000dfc <SystemInit+0x64>)
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <SystemInit+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dcc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <SystemInit+0x64>)
 8000dd0:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <SystemInit+0x68>)
 8000dd2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000dd4:	4a09      	ldr	r2, [pc, #36]	; (8000dfc <SystemInit+0x64>)
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <SystemInit+0x64>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dde:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <SystemInit+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000de6:	f000 f889 	bl	8000efc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dea:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <SystemInit+0x60>)
 8000dec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000df0:	609a      	str	r2, [r3, #8]
#endif
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	24003010 	.word	0x24003010

08000e04 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b087      	sub	sp, #28
 8000e08:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	2302      	movs	r3, #2
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000e1e:	4b32      	ldr	r3, [pc, #200]	; (8000ee8 <SystemCoreClockUpdate+0xe4>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f003 030c 	and.w	r3, r3, #12
 8000e26:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	d007      	beq.n	8000e3e <SystemCoreClockUpdate+0x3a>
 8000e2e:	2b08      	cmp	r3, #8
 8000e30:	d009      	beq.n	8000e46 <SystemCoreClockUpdate+0x42>
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d13d      	bne.n	8000eb2 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000e36:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <SystemCoreClockUpdate+0xe8>)
 8000e38:	4a2d      	ldr	r2, [pc, #180]	; (8000ef0 <SystemCoreClockUpdate+0xec>)
 8000e3a:	601a      	str	r2, [r3, #0]
      break;
 8000e3c:	e03d      	b.n	8000eba <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000e3e:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <SystemCoreClockUpdate+0xe8>)
 8000e40:	4a2c      	ldr	r2, [pc, #176]	; (8000ef4 <SystemCoreClockUpdate+0xf0>)
 8000e42:	601a      	str	r2, [r3, #0]
      break;
 8000e44:	e039      	b.n	8000eba <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000e46:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <SystemCoreClockUpdate+0xe4>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	0d9b      	lsrs	r3, r3, #22
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e52:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <SystemCoreClockUpdate+0xe4>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e5a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00c      	beq.n	8000e7c <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000e62:	4a24      	ldr	r2, [pc, #144]	; (8000ef4 <SystemCoreClockUpdate+0xf0>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ee8 <SystemCoreClockUpdate+0xe4>)
 8000e6c:	6852      	ldr	r2, [r2, #4]
 8000e6e:	0992      	lsrs	r2, r2, #6
 8000e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e74:	fb02 f303 	mul.w	r3, r2, r3
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	e00b      	b.n	8000e94 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000e7c:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <SystemCoreClockUpdate+0xec>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e84:	4a18      	ldr	r2, [pc, #96]	; (8000ee8 <SystemCoreClockUpdate+0xe4>)
 8000e86:	6852      	ldr	r2, [r2, #4]
 8000e88:	0992      	lsrs	r2, r2, #6
 8000e8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e8e:	fb02 f303 	mul.w	r3, r2, r3
 8000e92:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <SystemCoreClockUpdate+0xe4>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	0c1b      	lsrs	r3, r3, #16
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eac:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <SystemCoreClockUpdate+0xe8>)
 8000eae:	6013      	str	r3, [r2, #0]
      break;
 8000eb0:	e003      	b.n	8000eba <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <SystemCoreClockUpdate+0xe8>)
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <SystemCoreClockUpdate+0xec>)
 8000eb6:	601a      	str	r2, [r3, #0]
      break;
 8000eb8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <SystemCoreClockUpdate+0xe4>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	091b      	lsrs	r3, r3, #4
 8000ec0:	f003 030f 	and.w	r3, r3, #15
 8000ec4:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <SystemCoreClockUpdate+0xf4>)
 8000ec6:	5cd3      	ldrb	r3, [r2, r3]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <SystemCoreClockUpdate+0xe8>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <SystemCoreClockUpdate+0xe8>)
 8000ed8:	6013      	str	r3, [r2, #0]
}
 8000eda:	bf00      	nop
 8000edc:	371c      	adds	r7, #28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	00f42400 	.word	0x00f42400
 8000ef4:	017d7840 	.word	0x017d7840
 8000ef8:	20000004 	.word	0x20000004

08000efc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000f0a:	4a36      	ldr	r2, [pc, #216]	; (8000fe4 <SetSysClock+0xe8>)
 8000f0c:	4b35      	ldr	r3, [pc, #212]	; (8000fe4 <SetSysClock+0xe8>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f14:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000f16:	4b33      	ldr	r3, [pc, #204]	; (8000fe4 <SetSysClock+0xe8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3301      	adds	r3, #1
 8000f24:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d103      	bne.n	8000f34 <SetSysClock+0x38>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000f32:	d1f0      	bne.n	8000f16 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000f34:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <SetSysClock+0xe8>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d002      	beq.n	8000f46 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000f40:	2301      	movs	r3, #1
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	e001      	b.n	8000f4a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d142      	bne.n	8000fd6 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000f50:	4a24      	ldr	r2, [pc, #144]	; (8000fe4 <SetSysClock+0xe8>)
 8000f52:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <SetSysClock+0xe8>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000f5c:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <SetSysClock+0xec>)
 8000f5e:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <SetSysClock+0xec>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f66:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000f68:	4a1e      	ldr	r2, [pc, #120]	; (8000fe4 <SetSysClock+0xe8>)
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <SetSysClock+0xe8>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000f70:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <SetSysClock+0xe8>)
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <SetSysClock+0xe8>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f7a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000f7c:	4a19      	ldr	r2, [pc, #100]	; (8000fe4 <SetSysClock+0xe8>)
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <SetSysClock+0xe8>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000f86:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <SetSysClock+0xe8>)
 8000f8a:	4a18      	ldr	r2, [pc, #96]	; (8000fec <SetSysClock+0xf0>)
 8000f8c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000f8e:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <SetSysClock+0xe8>)
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <SetSysClock+0xe8>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f98:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000f9a:	bf00      	nop
 8000f9c:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <SetSysClock+0xe8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0f9      	beq.n	8000f9c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <SetSysClock+0xf4>)
 8000faa:	f240 7205 	movw	r2, #1797	; 0x705
 8000fae:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <SetSysClock+0xe8>)
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <SetSysClock+0xe8>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f023 0303 	bic.w	r3, r3, #3
 8000fba:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000fbc:	4a09      	ldr	r2, [pc, #36]	; (8000fe4 <SetSysClock+0xe8>)
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <SetSysClock+0xe8>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000fc8:	bf00      	nop
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <SetSysClock+0xe8>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 030c 	and.w	r3, r3, #12
 8000fd2:	2b08      	cmp	r3, #8
 8000fd4:	d1f9      	bne.n	8000fca <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40007000 	.word	0x40007000
 8000fec:	07405419 	.word	0x07405419
 8000ff0:	40023c00 	.word	0x40023c00

08000ff4 <__libc_init_array>:
 8000ff4:	b570      	push	{r4, r5, r6, lr}
 8000ff6:	4e0d      	ldr	r6, [pc, #52]	; (800102c <__libc_init_array+0x38>)
 8000ff8:	4c0d      	ldr	r4, [pc, #52]	; (8001030 <__libc_init_array+0x3c>)
 8000ffa:	1ba4      	subs	r4, r4, r6
 8000ffc:	10a4      	asrs	r4, r4, #2
 8000ffe:	2500      	movs	r5, #0
 8001000:	42a5      	cmp	r5, r4
 8001002:	d109      	bne.n	8001018 <__libc_init_array+0x24>
 8001004:	4e0b      	ldr	r6, [pc, #44]	; (8001034 <__libc_init_array+0x40>)
 8001006:	4c0c      	ldr	r4, [pc, #48]	; (8001038 <__libc_init_array+0x44>)
 8001008:	f000 f818 	bl	800103c <_init>
 800100c:	1ba4      	subs	r4, r4, r6
 800100e:	10a4      	asrs	r4, r4, #2
 8001010:	2500      	movs	r5, #0
 8001012:	42a5      	cmp	r5, r4
 8001014:	d105      	bne.n	8001022 <__libc_init_array+0x2e>
 8001016:	bd70      	pop	{r4, r5, r6, pc}
 8001018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800101c:	4798      	blx	r3
 800101e:	3501      	adds	r5, #1
 8001020:	e7ee      	b.n	8001000 <__libc_init_array+0xc>
 8001022:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001026:	4798      	blx	r3
 8001028:	3501      	adds	r5, #1
 800102a:	e7f2      	b.n	8001012 <__libc_init_array+0x1e>
 800102c:	080010b8 	.word	0x080010b8
 8001030:	080010b8 	.word	0x080010b8
 8001034:	080010b8 	.word	0x080010b8
 8001038:	080010bc 	.word	0x080010bc

0800103c <_init>:
 800103c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800103e:	bf00      	nop
 8001040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001042:	bc08      	pop	{r3}
 8001044:	469e      	mov	lr, r3
 8001046:	4770      	bx	lr

08001048 <_fini>:
 8001048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104a:	bf00      	nop
 800104c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800104e:	bc08      	pop	{r3}
 8001050:	469e      	mov	lr, r3
 8001052:	4770      	bx	lr
