
SmartHome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002990  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08002b18  08002b18  00012b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002cf4  08002cf4  00012cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002cf8  08002cf8  00012cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08002cfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00000044  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000058  20000058  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007172  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000018c8  00000000  00000000  000271b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006d8  00000000  00000000  00028a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005a0  00000000  00000000  00029158  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002f0c  00000000  00000000  000296f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001e29  00000000  00000000  0002c604  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002e42d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001914  00000000  00000000  0002e4ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002fdc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b00 	.word	0x08002b00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08002b00 	.word	0x08002b00

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <getPassword>:

char g_myPassword[ PASS_LEN ];


void getPassword( char * password )
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for( i = 0 ; i<PASS_LEN; i++ )
 8000a54:	2300      	movs	r3, #0
 8000a56:	73fb      	strb	r3, [r7, #15]
 8000a58:	e019      	b.n	8000a8e <getPassword+0x42>
	{
		while( Keypad_GetKey() == 0 );
 8000a5a:	bf00      	nop
 8000a5c:	f001 f800 	bl	8001a60 <Keypad_GetKey>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d0fa      	beq.n	8000a5c <getPassword+0x10>
		password[i] = Keypad_GetKey();
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	18d4      	adds	r4, r2, r3
 8000a6c:	f000 fff8 	bl	8001a60 <Keypad_GetKey>
 8000a70:	4603      	mov	r3, r0
 8000a72:	7023      	strb	r3, [r4, #0]
		delayMs(1000);
 8000a74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a78:	f001 fd7a 	bl	8002570 <delayMs>
		LCD_DispCharXY(1,i,'*');
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	222a      	movs	r2, #42	; 0x2a
 8000a80:	4619      	mov	r1, r3
 8000a82:	2001      	movs	r0, #1
 8000a84:	f000 fc2b 	bl	80012de <LCD_DispCharXY>
	for( i = 0 ; i<PASS_LEN; i++ )
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	73fb      	strb	r3, [r7, #15]
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	d9e2      	bls.n	8000a5a <getPassword+0xe>
	}
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd90      	pop	{r4, r7, pc}

08000a9c <confirmPassword>:

uint8_t confirmPassword( char const * password )
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	73fb      	strb	r3, [r7, #15]
	uint8_t result = CONFIRM_SUCCESS;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	73bb      	strb	r3, [r7, #14]
	uint8_t new_key;

	for( i = 0; i<PASS_LEN; i++ )
 8000aac:	2300      	movs	r3, #0
 8000aae:	73fb      	strb	r3, [r7, #15]
 8000ab0:	e01f      	b.n	8000af2 <confirmPassword+0x56>
	{
		while( Keypad_GetKey() == 0 );
 8000ab2:	bf00      	nop
 8000ab4:	f000 ffd4 	bl	8001a60 <Keypad_GetKey>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d0fa      	beq.n	8000ab4 <confirmPassword+0x18>
		new_key = Keypad_GetKey();
 8000abe:	f000 ffcf 	bl	8001a60 <Keypad_GetKey>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	737b      	strb	r3, [r7, #13]
		delayMs(1000);
 8000ac6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aca:	f001 fd51 	bl	8002570 <delayMs>
		LCD_DispCharXY(1,i,'*');
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	222a      	movs	r2, #42	; 0x2a
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f000 fc02 	bl	80012de <LCD_DispCharXY>
		if( new_key != password[i] )
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	7b7a      	ldrb	r2, [r7, #13]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d001      	beq.n	8000aec <confirmPassword+0x50>
		{
			result = CONFIRM_FAIL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	73bb      	strb	r3, [r7, #14]
	for( i = 0; i<PASS_LEN; i++ )
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	3301      	adds	r3, #1
 8000af0:	73fb      	strb	r3, [r7, #15]
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d9dc      	bls.n	8000ab2 <confirmPassword+0x16>
		}
	}
	return result;
 8000af8:	7bbb      	ldrb	r3, [r7, #14]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <FirstTimePassword>:


void FirstTimePassword(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	71fb      	strb	r3, [r7, #7]
	do
	{
		LCD_Clear();
 8000b0e:	f000 fb45 	bl	800119c <LCD_Clear>
		LCD_DispStrXY(0,0,"Enter pass: ");
 8000b12:	4a1d      	ldr	r2, [pc, #116]	; (8000b88 <FirstTimePassword+0x84>)
 8000b14:	2100      	movs	r1, #0
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 fc13 	bl	8001342 <LCD_DispStrXY>
		getPassword( g_myPassword );
 8000b1c:	481b      	ldr	r0, [pc, #108]	; (8000b8c <FirstTimePassword+0x88>)
 8000b1e:	f7ff ff95 	bl	8000a4c <getPassword>
		LCD_Clear();
 8000b22:	f000 fb3b 	bl	800119c <LCD_Clear>
		LCD_DispStrXY(0,0,"Confirm pass: ");
 8000b26:	4a1a      	ldr	r2, [pc, #104]	; (8000b90 <FirstTimePassword+0x8c>)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f000 fc09 	bl	8001342 <LCD_DispStrXY>
	}
	while( confirmPassword( g_myPassword ) != CONFIRM_SUCCESS );
 8000b30:	4816      	ldr	r0, [pc, #88]	; (8000b8c <FirstTimePassword+0x88>)
 8000b32:	f7ff ffb3 	bl	8000a9c <confirmPassword>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d1e8      	bne.n	8000b0e <FirstTimePassword+0xa>

	LCD_Clear();
 8000b3c:	f000 fb2e 	bl	800119c <LCD_Clear>
	LCD_DispStrXY(0,0,"Success ");
 8000b40:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <FirstTimePassword+0x90>)
 8000b42:	2100      	movs	r1, #0
 8000b44:	2000      	movs	r0, #0
 8000b46:	f000 fbfc 	bl	8001342 <LCD_DispStrXY>
	delayMs(2000);
 8000b4a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b4e:	f001 fd0f 	bl	8002570 <delayMs>
	EEPROM_WriteByte(0xFF, PASSWORD_SAVED );
 8000b52:	2151      	movs	r1, #81	; 0x51
 8000b54:	20ff      	movs	r0, #255	; 0xff
 8000b56:	f000 fa55 	bl	8001004 <EEPROM_WriteByte>
	/* Add the new password to the EEPROM */
	for(i=0; i<PASS_LEN; i++)
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	71fb      	strb	r3, [r7, #7]
 8000b5e:	e00c      	b.n	8000b7a <FirstTimePassword+0x76>
	{
		EEPROM_WriteByte(0xF0+i,g_myPassword[i]);
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	33f0      	adds	r3, #240	; 0xf0
 8000b66:	b298      	uxth	r0, r3
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <FirstTimePassword+0x88>)
 8000b6c:	5cd3      	ldrb	r3, [r2, r3]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f000 fa48 	bl	8001004 <EEPROM_WriteByte>
	for(i=0; i<PASS_LEN; i++)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	3301      	adds	r3, #1
 8000b78:	71fb      	strb	r3, [r7, #7]
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d9ef      	bls.n	8000b60 <FirstTimePassword+0x5c>
	}
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	08002b18 	.word	0x08002b18
 8000b8c:	2000003c 	.word	0x2000003c
 8000b90:	08002b28 	.word	0x08002b28
 8000b94:	08002b38 	.word	0x08002b38

08000b98 <SavedPassword>:


void SavedPassword(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	uint8_t Password_count = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	71bb      	strb	r3, [r7, #6]
	for(i=0; i<PASS_LEN; i++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	71fb      	strb	r3, [r7, #7]
 8000baa:	e00c      	b.n	8000bc6 <SavedPassword+0x2e>
	{
		EEPROM_ReadByte(0xF0+i,&g_myPassword[i]);
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	33f0      	adds	r3, #240	; 0xf0
 8000bb2:	b298      	uxth	r0, r3
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	4a23      	ldr	r2, [pc, #140]	; (8000c44 <SavedPassword+0xac>)
 8000bb8:	4413      	add	r3, r2
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f000 fa50 	bl	8001060 <EEPROM_ReadByte>
	for(i=0; i<PASS_LEN; i++)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	71fb      	strb	r3, [r7, #7]
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d9ef      	bls.n	8000bac <SavedPassword+0x14>
	}
	LCD_Clear();
 8000bcc:	f000 fae6 	bl	800119c <LCD_Clear>
	LCD_DispStrXY(0,0,"Check pass: ");
 8000bd0:	4a1d      	ldr	r2, [pc, #116]	; (8000c48 <SavedPassword+0xb0>)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f000 fbb4 	bl	8001342 <LCD_DispStrXY>
	while( (confirmPassword(g_myPassword) != CONFIRM_SUCCESS ) )
 8000bda:	e01d      	b.n	8000c18 <SavedPassword+0x80>
	{
		/* Check if the user entered it incorrectly or not in 3 times */
		if( Password_count >=3 )
 8000bdc:	79bb      	ldrb	r3, [r7, #6]
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d910      	bls.n	8000c04 <SavedPassword+0x6c>
		{
			LCD_Clear();
 8000be2:	f000 fadb 	bl	800119c <LCD_Clear>
			LCD_DispStrXY(0,0,"Unauthorized ");
 8000be6:	4a19      	ldr	r2, [pc, #100]	; (8000c4c <SavedPassword+0xb4>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 fba9 	bl	8001342 <LCD_DispStrXY>
			Buz_On();
 8000bf0:	f000 fcce 	bl	8001590 <Buz_On>
			delayMs(5000);
 8000bf4:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bf8:	f001 fcba 	bl	8002570 <delayMs>
			Buz_Off();
 8000bfc:	f000 fcd8 	bl	80015b0 <Buz_Off>
			Password_count = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	71bb      	strb	r3, [r7, #6]
		}
		Password_count++;
 8000c04:	79bb      	ldrb	r3, [r7, #6]
 8000c06:	3301      	adds	r3, #1
 8000c08:	71bb      	strb	r3, [r7, #6]
		LCD_Clear();
 8000c0a:	f000 fac7 	bl	800119c <LCD_Clear>
		LCD_DispStrXY(0,0,"Check pass: ");
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <SavedPassword+0xb0>)
 8000c10:	2100      	movs	r1, #0
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 fb95 	bl	8001342 <LCD_DispStrXY>
	while( (confirmPassword(g_myPassword) != CONFIRM_SUCCESS ) )
 8000c18:	480a      	ldr	r0, [pc, #40]	; (8000c44 <SavedPassword+0xac>)
 8000c1a:	f7ff ff3f 	bl	8000a9c <confirmPassword>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d1db      	bne.n	8000bdc <SavedPassword+0x44>
	}
	LCD_Clear();
 8000c24:	f000 faba 	bl	800119c <LCD_Clear>
	LCD_DispStrXY(0,0,"Confirmed ");
 8000c28:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <SavedPassword+0xb8>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f000 fb88 	bl	8001342 <LCD_DispStrXY>
	delayMs(2000);
 8000c32:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c36:	f001 fc9b 	bl	8002570 <delayMs>

}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000003c 	.word	0x2000003c
 8000c48:	08002b44 	.word	0x08002b44
 8000c4c:	08002b54 	.word	0x08002b54
 8000c50:	08002b64 	.word	0x08002b64

08000c54 <ChangePassword>:

void ChangePassword(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	SavedPassword();
 8000c58:	f7ff ff9e 	bl	8000b98 <SavedPassword>
	FirstTimePassword();
 8000c5c:	f7ff ff52 	bl	8000b04 <FirstTimePassword>
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <DoorLock>:

void DoorLock(void){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
	uint8_t key = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	71fb      	strb	r3, [r7, #7]

	LCD_Clear();
 8000c6e:	f000 fa95 	bl	800119c <LCD_Clear>
	LCD_DispStrXY(0,0,"1. Enter PW");
 8000c72:	4a1a      	ldr	r2, [pc, #104]	; (8000cdc <DoorLock+0x78>)
 8000c74:	2100      	movs	r1, #0
 8000c76:	2000      	movs	r0, #0
 8000c78:	f000 fb63 	bl	8001342 <LCD_DispStrXY>
	LCD_DispStrXY(1,0,"2. Change PW");
 8000c7c:	4a18      	ldr	r2, [pc, #96]	; (8000ce0 <DoorLock+0x7c>)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2001      	movs	r0, #1
 8000c82:	f000 fb5e 	bl	8001342 <LCD_DispStrXY>

	while( Keypad_GetKey() == 0);
 8000c86:	bf00      	nop
 8000c88:	f000 feea 	bl	8001a60 <Keypad_GetKey>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d0fa      	beq.n	8000c88 <DoorLock+0x24>
	key = Keypad_GetKey();
 8000c92:	f000 fee5 	bl	8001a60 <Keypad_GetKey>
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
	delayMs(1000);
 8000c9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c9e:	f001 fc67 	bl	8002570 <delayMs>
	switch(key)
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d002      	beq.n	8000cae <DoorLock+0x4a>
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d010      	beq.n	8000cce <DoorLock+0x6a>
	Led_On(LED0);
	break;
	case 2: ChangePassword();
	break;
	default:
		break;
 8000cac:	e012      	b.n	8000cd4 <DoorLock+0x70>
	case 1: SavedPassword();
 8000cae:	f7ff ff73 	bl	8000b98 <SavedPassword>
	Servo_SetPosition(POS_DEG_90);
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f000 fbc7 	bl	8001446 <Servo_SetPosition>
	delayMs(5000);
 8000cb8:	f241 3088 	movw	r0, #5000	; 0x1388
 8000cbc:	f001 fc58 	bl	8002570 <delayMs>
	Servo_SetPosition(POS_DEG_0);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f000 fbc0 	bl	8001446 <Servo_SetPosition>
	Led_On(LED0);
 8000cc6:	2005      	movs	r0, #5
 8000cc8:	f000 fcbe 	bl	8001648 <Led_On>
	break;
 8000ccc:	e002      	b.n	8000cd4 <DoorLock+0x70>
	case 2: ChangePassword();
 8000cce:	f7ff ffc1 	bl	8000c54 <ChangePassword>
	break;
 8000cd2:	bf00      	nop
	}



}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	08002b70 	.word	0x08002b70
 8000ce0:	08002b7c 	.word	0x08002b7c

08000ce4 <Temp_Sensor>:
//////////////////////////////////////////////////////////////////////////////////////////////////////
void Temp_Sensor(void){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
	uint32_t adcValue = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t str[30];
	ADC1_SelectChannel(CH1);
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f000 ffc4 	bl	8001c7c <ADC1_SelectChannel>
	LCD_DispStrXY(0,0,"Room Temp = ");
 8000cf4:	4a23      	ldr	r2, [pc, #140]	; (8000d84 <Temp_Sensor+0xa0>)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f000 fb22 	bl	8001342 <LCD_DispStrXY>

	adcValue = ADC1_Read();
 8000cfe:	f000 fffb 	bl	8001cf8 <ADC1_Read>
 8000d02:	4603      	mov	r3, r0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
	adcValue = adcValue*(330)/4096;
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8000d0c:	fb02 f303 	mul.w	r3, r2, r3
 8000d10:	0b1b      	lsrs	r3, r3, #12
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
	LCD_DispStrXY(1,5,"    ");
 8000d14:	4a1c      	ldr	r2, [pc, #112]	; (8000d88 <Temp_Sensor+0xa4>)
 8000d16:	2105      	movs	r1, #5
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f000 fb12 	bl	8001342 <LCD_DispStrXY>
	LCD_DispIntXY(1,5,adcValue);
 8000d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d20:	2105      	movs	r1, #5
 8000d22:	2001      	movs	r0, #1
 8000d24:	f000 fb74 	bl	8001410 <LCD_DispIntXY>
	if(adcValue>25){
 8000d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2a:	2b19      	cmp	r3, #25
 8000d2c:	d91f      	bls.n	8000d6e <Temp_Sensor+0x8a>
		Buz_On();
 8000d2e:	f000 fc2f 	bl	8001590 <Buz_On>
		if(WIFI_SendCmd("AT+CIPSEND=26\r\n","OK",1000)){
 8000d32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d36:	4915      	ldr	r1, [pc, #84]	; (8000d8c <Temp_Sensor+0xa8>)
 8000d38:	4815      	ldr	r0, [pc, #84]	; (8000d90 <Temp_Sensor+0xac>)
 8000d3a:	f000 fba9 	bl	8001490 <WIFI_SendCmd>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d00d      	beq.n	8000d60 <Temp_Sensor+0x7c>
			delayMs(10);
 8000d44:	200a      	movs	r0, #10
 8000d46:	f001 fc13 	bl	8002570 <delayMs>
			sprintf(str,"The Temp. is too high  %d  C",adcValue);
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d4e:	4911      	ldr	r1, [pc, #68]	; (8000d94 <Temp_Sensor+0xb0>)
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 fe9b 	bl	8002a8c <siprintf>
			Uart_SendString(USART1,str);
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480f      	ldr	r0, [pc, #60]	; (8000d98 <Temp_Sensor+0xb4>)
 8000d5c:	f001 fbce 	bl	80024fc <Uart_SendString>
		}
	delayMs(3000);
 8000d60:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d64:	f001 fc04 	bl	8002570 <delayMs>
	Buz_Off();
 8000d68:	f000 fc22 	bl	80015b0 <Buz_Off>
 8000d6c:	e001      	b.n	8000d72 <Temp_Sensor+0x8e>
	}else{
		Buz_Off();
 8000d6e:	f000 fc1f 	bl	80015b0 <Buz_Off>
	}
	delayMs(5000);
 8000d72:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d76:	f001 fbfb 	bl	8002570 <delayMs>

}
 8000d7a:	bf00      	nop
 8000d7c:	3728      	adds	r7, #40	; 0x28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	08002b8c 	.word	0x08002b8c
 8000d88:	08002b9c 	.word	0x08002b9c
 8000d8c:	08002ba4 	.word	0x08002ba4
 8000d90:	08002ba8 	.word	0x08002ba8
 8000d94:	08002bb8 	.word	0x08002bb8
 8000d98:	40011000 	.word	0x40011000

08000d9c <InDoor_Ultra>:
/////////////////////////////////////////////////////////////////////////////////////////////////////
void InDoor_Ultra(void){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
	uint16_t Distance = Ultra_GetDistance();
 8000da2:	f000 fee5 	bl	8001b70 <Ultra_GetDistance>
 8000da6:	4603      	mov	r3, r0
 8000da8:	80fb      	strh	r3, [r7, #6]
	if(Distance < InDoorDis){
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	2b13      	cmp	r3, #19
 8000dae:	d810      	bhi.n	8000dd2 <InDoor_Ultra+0x36>
		LCD_Clear();
 8000db0:	f000 f9f4 	bl	800119c <LCD_Clear>
		LCD_DispInt(Distance);
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 fad8 	bl	800136c <LCD_DispInt>
		Relay_On();
 8000dbc:	f000 fc24 	bl	8001608 <Relay_On>
		delayMs(2000);
 8000dc0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dc4:	f001 fbd4 	bl	8002570 <delayMs>
		Relay_Off();
 8000dc8:	f000 fc2e 	bl	8001628 <Relay_Off>
		Led_On(LED1);
 8000dcc:	2006      	movs	r0, #6
 8000dce:	f000 fc3b 	bl	8001648 <Led_On>
	}
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <EXTI1_IRQHandler>:
}
#endif


/////////////////////////////////////////////////////////////////////////////////////////////////////
void EXTI1_IRQHandler(void){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	EXTI->PR	|=  EXTI_PR_PR1;
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <EXTI1_IRQHandler+0x18>)
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <EXTI1_IRQHandler+0x18>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	6153      	str	r3, [r2, #20]
	DoorLock();
 8000dec:	f7ff ff3a 	bl	8000c64 <DoorLock>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40013c00 	.word	0x40013c00

08000df8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR11){
 8000dfc:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <EXTI15_10_IRQHandler+0x48>)
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d009      	beq.n	8000e1c <EXTI15_10_IRQHandler+0x24>
		EXTI->PR	|=  EXTI_PR_PR11;
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <EXTI15_10_IRQHandler+0x48>)
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <EXTI15_10_IRQHandler+0x48>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e12:	6153      	str	r3, [r2, #20]
		Leds_Toggle(0x0F);
 8000e14:	200f      	movs	r0, #15
 8000e16:	f000 fc6b 	bl	80016f0 <Leds_Toggle>
	}
	else if(EXTI->PR & EXTI_PR_PR12){
		EXTI->PR	|=  EXTI_PR_PR12;
		Leds_Toggle(0xF0);
	}
}
 8000e1a:	e00e      	b.n	8000e3a <EXTI15_10_IRQHandler+0x42>
	else if(EXTI->PR & EXTI_PR_PR12){
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <EXTI15_10_IRQHandler+0x48>)
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d008      	beq.n	8000e3a <EXTI15_10_IRQHandler+0x42>
		EXTI->PR	|=  EXTI_PR_PR12;
 8000e28:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <EXTI15_10_IRQHandler+0x48>)
 8000e2a:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <EXTI15_10_IRQHandler+0x48>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e32:	6153      	str	r3, [r2, #20]
		Leds_Toggle(0xF0);
 8000e34:	20f0      	movs	r0, #240	; 0xf0
 8000e36:	f000 fc5b 	bl	80016f0 <Leds_Toggle>
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40013c00 	.word	0x40013c00

08000e44 <WifiApp>:
///////////////////////////////////////////////////////////////////////////////////////////////////
void WifiApp (void){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0

	if(WIFI_SendCmd("AT\r\n","OK",1000)){
 8000e48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e4c:	4934      	ldr	r1, [pc, #208]	; (8000f20 <WifiApp+0xdc>)
 8000e4e:	4835      	ldr	r0, [pc, #212]	; (8000f24 <WifiApp+0xe0>)
 8000e50:	f000 fb1e 	bl	8001490 <WIFI_SendCmd>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d004      	beq.n	8000e64 <WifiApp+0x20>
		Uart_SendString(USART2,"WIFI is Up\n");
 8000e5a:	4933      	ldr	r1, [pc, #204]	; (8000f28 <WifiApp+0xe4>)
 8000e5c:	4833      	ldr	r0, [pc, #204]	; (8000f2c <WifiApp+0xe8>)
 8000e5e:	f001 fb4d 	bl	80024fc <Uart_SendString>
 8000e62:	e003      	b.n	8000e6c <WifiApp+0x28>
	}else{
		Uart_SendString(USART2,"WIFI is Down\n");
 8000e64:	4932      	ldr	r1, [pc, #200]	; (8000f30 <WifiApp+0xec>)
 8000e66:	4831      	ldr	r0, [pc, #196]	; (8000f2c <WifiApp+0xe8>)
 8000e68:	f001 fb48 	bl	80024fc <Uart_SendString>
	}
	delayMs(100);
 8000e6c:	2064      	movs	r0, #100	; 0x64
 8000e6e:	f001 fb7f 	bl	8002570 <delayMs>
	/* Echo Command */
	if(WIFI_SendCmd("ATE0\r\n","OK",1000)){
 8000e72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e76:	492a      	ldr	r1, [pc, #168]	; (8000f20 <WifiApp+0xdc>)
 8000e78:	482e      	ldr	r0, [pc, #184]	; (8000f34 <WifiApp+0xf0>)
 8000e7a:	f000 fb09 	bl	8001490 <WIFI_SendCmd>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d004      	beq.n	8000e8e <WifiApp+0x4a>
		Uart_SendString(USART2,"Echo Disabled\n");
 8000e84:	492c      	ldr	r1, [pc, #176]	; (8000f38 <WifiApp+0xf4>)
 8000e86:	4829      	ldr	r0, [pc, #164]	; (8000f2c <WifiApp+0xe8>)
 8000e88:	f001 fb38 	bl	80024fc <Uart_SendString>
 8000e8c:	e003      	b.n	8000e96 <WifiApp+0x52>
	}else{
		Uart_SendString(USART2,"Echo not Disabled\n");
 8000e8e:	492b      	ldr	r1, [pc, #172]	; (8000f3c <WifiApp+0xf8>)
 8000e90:	4826      	ldr	r0, [pc, #152]	; (8000f2c <WifiApp+0xe8>)
 8000e92:	f001 fb33 	bl	80024fc <Uart_SendString>
	}
	delayMs(100);
 8000e96:	2064      	movs	r0, #100	; 0x64
 8000e98:	f001 fb6a 	bl	8002570 <delayMs>
	/* Station Mode Command */
	if(WIFI_SendCmd("AT+CWMODE=1\r\n","OK",1000)){
 8000e9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ea0:	491f      	ldr	r1, [pc, #124]	; (8000f20 <WifiApp+0xdc>)
 8000ea2:	4827      	ldr	r0, [pc, #156]	; (8000f40 <WifiApp+0xfc>)
 8000ea4:	f000 faf4 	bl	8001490 <WIFI_SendCmd>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d004      	beq.n	8000eb8 <WifiApp+0x74>
		Uart_SendString(USART2,"Station Mode Done\n");
 8000eae:	4925      	ldr	r1, [pc, #148]	; (8000f44 <WifiApp+0x100>)
 8000eb0:	481e      	ldr	r0, [pc, #120]	; (8000f2c <WifiApp+0xe8>)
 8000eb2:	f001 fb23 	bl	80024fc <Uart_SendString>
 8000eb6:	e003      	b.n	8000ec0 <WifiApp+0x7c>
	}else{
		Uart_SendString(USART2,"Station Mode ERROR\n");
 8000eb8:	4923      	ldr	r1, [pc, #140]	; (8000f48 <WifiApp+0x104>)
 8000eba:	481c      	ldr	r0, [pc, #112]	; (8000f2c <WifiApp+0xe8>)
 8000ebc:	f001 fb1e 	bl	80024fc <Uart_SendString>
	}
	delayMs(100);
 8000ec0:	2064      	movs	r0, #100	; 0x64
 8000ec2:	f001 fb55 	bl	8002570 <delayMs>
	/* WI-FI Network Connection */
	if(WIFI_SendCmd("AT+CWJAP=\"Ahmed Samy\",\"ahmedsamy1463\"\r\n","OK",10000)){
 8000ec6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000eca:	4915      	ldr	r1, [pc, #84]	; (8000f20 <WifiApp+0xdc>)
 8000ecc:	481f      	ldr	r0, [pc, #124]	; (8000f4c <WifiApp+0x108>)
 8000ece:	f000 fadf 	bl	8001490 <WIFI_SendCmd>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d004      	beq.n	8000ee2 <WifiApp+0x9e>
		Uart_SendString(USART2,"Network Connected\n");
 8000ed8:	491d      	ldr	r1, [pc, #116]	; (8000f50 <WifiApp+0x10c>)
 8000eda:	4814      	ldr	r0, [pc, #80]	; (8000f2c <WifiApp+0xe8>)
 8000edc:	f001 fb0e 	bl	80024fc <Uart_SendString>
 8000ee0:	e003      	b.n	8000eea <WifiApp+0xa6>
	}else{
		Uart_SendString(USART2,"Network ERROR\n");
 8000ee2:	491c      	ldr	r1, [pc, #112]	; (8000f54 <WifiApp+0x110>)
 8000ee4:	4811      	ldr	r0, [pc, #68]	; (8000f2c <WifiApp+0xe8>)
 8000ee6:	f001 fb09 	bl	80024fc <Uart_SendString>
	}
	delayMs(100);
 8000eea:	2064      	movs	r0, #100	; 0x64
 8000eec:	f001 fb40 	bl	8002570 <delayMs>
	/* TCP Connection */
	if(WIFI_SendCmd("AT+CIPSTART=\"TCP\",\"192.168.0.101\",4444\r\n","OK",10000)){
 8000ef0:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ef4:	490a      	ldr	r1, [pc, #40]	; (8000f20 <WifiApp+0xdc>)
 8000ef6:	4818      	ldr	r0, [pc, #96]	; (8000f58 <WifiApp+0x114>)
 8000ef8:	f000 faca 	bl	8001490 <WIFI_SendCmd>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d004      	beq.n	8000f0c <WifiApp+0xc8>
		Uart_SendString(USART2,"TCP Connected\n");
 8000f02:	4916      	ldr	r1, [pc, #88]	; (8000f5c <WifiApp+0x118>)
 8000f04:	4809      	ldr	r0, [pc, #36]	; (8000f2c <WifiApp+0xe8>)
 8000f06:	f001 faf9 	bl	80024fc <Uart_SendString>
 8000f0a:	e003      	b.n	8000f14 <WifiApp+0xd0>
	}else{
		Uart_SendString(USART2,"TCP ERROR\n");
 8000f0c:	4914      	ldr	r1, [pc, #80]	; (8000f60 <WifiApp+0x11c>)
 8000f0e:	4807      	ldr	r0, [pc, #28]	; (8000f2c <WifiApp+0xe8>)
 8000f10:	f001 faf4 	bl	80024fc <Uart_SendString>
	}
	delayMs(100);
 8000f14:	2064      	movs	r0, #100	; 0x64
 8000f16:	f001 fb2b 	bl	8002570 <delayMs>
		if(Uart_ReceiveByte_Unblock(USART2,&data)){
			LCD_DispStr(data);
		}
		delayMs(100);
	 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	08002ba4 	.word	0x08002ba4
 8000f24:	08002bd8 	.word	0x08002bd8
 8000f28:	08002be0 	.word	0x08002be0
 8000f2c:	40004400 	.word	0x40004400
 8000f30:	08002bec 	.word	0x08002bec
 8000f34:	08002bfc 	.word	0x08002bfc
 8000f38:	08002c04 	.word	0x08002c04
 8000f3c:	08002c14 	.word	0x08002c14
 8000f40:	08002c28 	.word	0x08002c28
 8000f44:	08002c38 	.word	0x08002c38
 8000f48:	08002c4c 	.word	0x08002c4c
 8000f4c:	08002c60 	.word	0x08002c60
 8000f50:	08002c88 	.word	0x08002c88
 8000f54:	08002c9c 	.word	0x08002c9c
 8000f58:	08002cac 	.word	0x08002cac
 8000f5c:	08002cd8 	.word	0x08002cd8
 8000f60:	08002ce8 	.word	0x08002ce8

08000f64 <System_Init>:
///////////////////////////////////////////////////////////////////////////////////////////////////
void System_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
	uint8_t EEPROM_checkByte = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	71fb      	strb	r3, [r7, #7]

	RCC_DeInit();				/* Adapt PLL to the internal 16 MHz RC oscillator */
 8000f6e:	f000 fe39 	bl	8001be4 <RCC_DeInit>
	SystemCoreClockUpdate();	/* Update SystemCoreClock */
 8000f72:	f001 fbb3 	bl	80026dc <SystemCoreClockUpdate>
	LCD_Init();
 8000f76:	f000 f963 	bl	8001240 <LCD_Init>
	Keypad_Init();
 8000f7a:	f000 fd39 	bl	80019f0 <Keypad_Init>
	EEPROM_Init();
 8000f7e:	f000 f83b 	bl	8000ff8 <EEPROM_Init>
	Buz_Init();
 8000f82:	f000 fae9 	bl	8001558 <Buz_Init>
	Servo_Init();
 8000f86:	f000 fa58 	bl	800143a <Servo_Init>
	ADC1_Init();
 8000f8a:	f000 fe59 	bl	8001c40 <ADC1_Init>
	Ultra_Init();
 8000f8e:	f000 fdcd 	bl	8001b2c <Ultra_Init>
	Relay_Init();
 8000f92:	f000 fb1d 	bl	80015d0 <Relay_Init>
	Leds_Init(0xFF);
 8000f96:	20ff      	movs	r0, #255	; 0xff
 8000f98:	f000 fb6c 	bl	8001674 <Leds_Init>
	Uart_Init(USART1,115200);
 8000f9c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000fa0:	4811      	ldr	r0, [pc, #68]	; (8000fe8 <System_Init+0x84>)
 8000fa2:	f001 f96f 	bl	8002284 <Uart_Init>
	Uart_Init(USART2,115200);
 8000fa6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000faa:	4810      	ldr	r0, [pc, #64]	; (8000fec <System_Init+0x88>)
 8000fac:	f001 f96a 	bl	8002284 <Uart_Init>
	WifiApp();
 8000fb0:	f7ff ff48 	bl	8000e44 <WifiApp>
	Btn_Init_EXTI(BTN_UP,EXTI1_IRQHandler);
 8000fb4:	490e      	ldr	r1, [pc, #56]	; (8000ff0 <System_Init+0x8c>)
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	f000 fbae 	bl	8001718 <Btn_Init_EXTI>
	Btn_Init_EXTI(BTN_RIGHT,EXTI15_10_IRQHandler);
 8000fbc:	490d      	ldr	r1, [pc, #52]	; (8000ff4 <System_Init+0x90>)
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f000 fbaa 	bl	8001718 <Btn_Init_EXTI>
	Btn_Init_EXTI(BTN_LEFT,EXTI15_10_IRQHandler);
 8000fc4:	490b      	ldr	r1, [pc, #44]	; (8000ff4 <System_Init+0x90>)
 8000fc6:	2002      	movs	r0, #2
 8000fc8:	f000 fba6 	bl	8001718 <Btn_Init_EXTI>


	EEPROM_ReadByte(0xFF,&EEPROM_checkByte);
 8000fcc:	1dfb      	adds	r3, r7, #7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	20ff      	movs	r0, #255	; 0xff
 8000fd2:	f000 f845 	bl	8001060 <EEPROM_ReadByte>
	/* If its first time initializing the system, ask the user for a new password */
	if( EEPROM_checkByte != PASSWORD_SAVED )
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b51      	cmp	r3, #81	; 0x51
 8000fda:	d001      	beq.n	8000fe0 <System_Init+0x7c>
	{
		FirstTimePassword();
 8000fdc:	f7ff fd92 	bl	8000b04 <FirstTimePassword>
	}
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40011000 	.word	0x40011000
 8000fec:	40004400 	.word	0x40004400
 8000ff0:	08000ddd 	.word	0x08000ddd
 8000ff4:	08000df9 	.word	0x08000df9

08000ff8 <EEPROM_Init>:
 *      Author: MahmoudH
 */

#include "EEPROM.h"

void EEPROM_Init(void){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	//I2C1_Init();
	TWI_Init();
 8000ffc:	f000 fe96 	bl	8001d2c <TWI_Init>
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <EEPROM_WriteByte>:
void EEPROM_WriteByte(uint16_t romAddr, uint8_t dataByte){
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	460a      	mov	r2, r1
 800100e:	80fb      	strh	r3, [r7, #6]
 8001010:	4613      	mov	r3, r2
 8001012:	717b      	strb	r3, [r7, #5]
	/* Calculate: page:3, romAddr byte:8, slave byte */
	uint8_t page 			= ((romAddr&0x7FF)>>8);
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	121b      	asrs	r3, r3, #8
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	73fb      	strb	r3, [r7, #15]
	uint8_t romAddrByte		= (uint8_t)romAddr;
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	73bb      	strb	r3, [r7, #14]
	uint8_t slaveByte		= (0xA0) | (page<<1); /* default write */
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	b25b      	sxtb	r3, r3
 800102a:	f063 035f 	orn	r3, r3, #95	; 0x5f
 800102e:	b25b      	sxtb	r3, r3
 8001030:	737b      	strb	r3, [r7, #13]
	I2C1_Start();
 8001032:	f000 fef3 	bl	8001e1c <I2C1_Start>
	I2C1_WriteAddress(slaveByte);
 8001036:	7b7b      	ldrb	r3, [r7, #13]
 8001038:	4618      	mov	r0, r3
 800103a:	f000 ff35 	bl	8001ea8 <I2C1_WriteAddress>
	I2C1_WriteData(romAddrByte);
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	4618      	mov	r0, r3
 8001042:	f000 ff17 	bl	8001e74 <I2C1_WriteData>
	I2C1_WriteData(dataByte);
 8001046:	797b      	ldrb	r3, [r7, #5]
 8001048:	4618      	mov	r0, r3
 800104a:	f000 ff13 	bl	8001e74 <I2C1_WriteData>
	I2C1_Stop();
 800104e:	f000 feff 	bl	8001e50 <I2C1_Stop>
	delayMs(15);
 8001052:	200f      	movs	r0, #15
 8001054:	f001 fa8c 	bl	8002570 <delayMs>
}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <EEPROM_ReadByte>:
void EEPROM_ReadByte(uint16_t romAddr, uint8_t* pDataByte){
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	80fb      	strh	r3, [r7, #6]
	/* Calculate: page:3, romAddr byte:8, slave byte */
	uint8_t page 			= ((romAddr&0x7FF)>>8);
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	121b      	asrs	r3, r3, #8
 8001070:	b2db      	uxtb	r3, r3
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	73fb      	strb	r3, [r7, #15]
	uint8_t romAddrByte		= (uint8_t)romAddr;
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	73bb      	strb	r3, [r7, #14]
	uint8_t slaveByte		= (0xA0) | (page<<1); /* default write */
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	b25b      	sxtb	r3, r3
 8001082:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001086:	b25b      	sxtb	r3, r3
 8001088:	737b      	strb	r3, [r7, #13]
	I2C1_Start();
 800108a:	f000 fec7 	bl	8001e1c <I2C1_Start>
	I2C1_WriteAddress(slaveByte);
 800108e:	7b7b      	ldrb	r3, [r7, #13]
 8001090:	4618      	mov	r0, r3
 8001092:	f000 ff09 	bl	8001ea8 <I2C1_WriteAddress>
	I2C1_WriteData(romAddrByte);
 8001096:	7bbb      	ldrb	r3, [r7, #14]
 8001098:	4618      	mov	r0, r3
 800109a:	f000 feeb 	bl	8001e74 <I2C1_WriteData>
	I2C1_Start();
 800109e:	f000 febd 	bl	8001e1c <I2C1_Start>
	I2C1_WriteAddress(slaveByte|1);
 80010a2:	7b7b      	ldrb	r3, [r7, #13]
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fefc 	bl	8001ea8 <I2C1_WriteAddress>
	(*pDataByte) = I2C1_ReadData();
 80010b0:	f000 ff16 	bl	8001ee0 <I2C1_ReadData>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	701a      	strb	r2, [r3, #0]
	I2C1_Stop();
 80010bc:	f000 fec8 	bl	8001e50 <I2C1_Stop>
	delayMs(15);
 80010c0:	200f      	movs	r0, #15
 80010c2:	f001 fa55 	bl	8002570 <delayMs>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <LCD_GotoXY>:
/* Static Declarations */
static void LCD_GotoXY(uint8_t line, uint8_t col);
static void LCD_SendCMD(uint8_t cmd);
static void LCD_SendData(uint8_t data);

static void LCD_GotoXY(uint8_t line, uint8_t col){
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	460a      	mov	r2, r1
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	4613      	mov	r3, r2
 80010dc:	71bb      	strb	r3, [r7, #6]
	/* send command of DDRAM Address
	 * First Line: 	0x00
	 * Second Line: 0x40
	 * */
	if (line ==0){
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d106      	bne.n	80010f2 <LCD_GotoXY+0x24>
		LCD_SendCMD(LCD_CMD_DDRAM + LCD_L1_ADDR +col );
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	3b80      	subs	r3, #128	; 0x80
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f80e 	bl	800110c <LCD_SendCMD>
	}else if(line == 1){
		LCD_SendCMD(LCD_CMD_DDRAM + LCD_L2_ADDR +col );
	}
}
 80010f0:	e008      	b.n	8001104 <LCD_GotoXY+0x36>
	}else if(line == 1){
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d105      	bne.n	8001104 <LCD_GotoXY+0x36>
		LCD_SendCMD(LCD_CMD_DDRAM + LCD_L2_ADDR +col );
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	3b40      	subs	r3, #64	; 0x40
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f804 	bl	800110c <LCD_SendCMD>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <LCD_SendCMD>:
static void LCD_SendCMD(uint8_t cmd){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	 * Send low nibble cmd
	 * Start latching
	 * Delay for 40 micro sec
	 */
	/* Command Mode */
	LCD_GPIO->ODR			&= ~(1<<LCD_CTRL_RS);
 8001116:	4a20      	ldr	r2, [pc, #128]	; (8001198 <LCD_SendCMD+0x8c>)
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <LCD_SendCMD+0x8c>)
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001120:	6153      	str	r3, [r2, #20]
	/* Send Most 4 bits */
	LCD_GPIO->ODR			&= ~LCD_DATA_ODR_MASK;
 8001122:	4a1d      	ldr	r2, [pc, #116]	; (8001198 <LCD_SendCMD+0x8c>)
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <LCD_SendCMD+0x8c>)
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800112c:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			|=  ( (cmd >> 4) << LCD_DATA_SHIFT );
 800112e:	491a      	ldr	r1, [pc, #104]	; (8001198 <LCD_SendCMD+0x8c>)
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <LCD_SendCMD+0x8c>)
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	79fa      	ldrb	r2, [r7, #7]
 8001136:	0912      	lsrs	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	0312      	lsls	r2, r2, #12
 800113c:	4313      	orrs	r3, r2
 800113e:	614b      	str	r3, [r1, #20]

	LCD_GPIO->ODR			|=  (1<<LCD_CTRL_EN);
 8001140:	4a15      	ldr	r2, [pc, #84]	; (8001198 <LCD_SendCMD+0x8c>)
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <LCD_SendCMD+0x8c>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	f043 0320 	orr.w	r3, r3, #32
 800114a:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			&= ~(1<<LCD_CTRL_EN);
 800114c:	4a12      	ldr	r2, [pc, #72]	; (8001198 <LCD_SendCMD+0x8c>)
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <LCD_SendCMD+0x8c>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	f023 0320 	bic.w	r3, r3, #32
 8001156:	6153      	str	r3, [r2, #20]
	/* Send Least 4 bits */
	LCD_GPIO->ODR			&= ~LCD_DATA_ODR_MASK;
 8001158:	4a0f      	ldr	r2, [pc, #60]	; (8001198 <LCD_SendCMD+0x8c>)
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <LCD_SendCMD+0x8c>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001162:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			|=  ( (cmd) << LCD_DATA_SHIFT );
 8001164:	490c      	ldr	r1, [pc, #48]	; (8001198 <LCD_SendCMD+0x8c>)
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <LCD_SendCMD+0x8c>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	79fa      	ldrb	r2, [r7, #7]
 800116c:	0312      	lsls	r2, r2, #12
 800116e:	4313      	orrs	r3, r2
 8001170:	614b      	str	r3, [r1, #20]

	LCD_GPIO->ODR			|=  (1<<LCD_CTRL_EN);
 8001172:	4a09      	ldr	r2, [pc, #36]	; (8001198 <LCD_SendCMD+0x8c>)
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <LCD_SendCMD+0x8c>)
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	f043 0320 	orr.w	r3, r3, #32
 800117c:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			&= ~(1<<LCD_CTRL_EN);
 800117e:	4a06      	ldr	r2, [pc, #24]	; (8001198 <LCD_SendCMD+0x8c>)
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <LCD_SendCMD+0x8c>)
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	f023 0320 	bic.w	r3, r3, #32
 8001188:	6153      	str	r3, [r2, #20]
	/* wait for command to be executed */
	delayMs(1);
 800118a:	2001      	movs	r0, #1
 800118c:	f001 f9f0 	bl	8002570 <delayMs>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40020400 	.word	0x40020400

0800119c <LCD_Clear>:
void LCD_Clear(void){
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	LCD_SendCMD(LCD_CMD_CLEAR);
 80011a0:	2001      	movs	r0, #1
 80011a2:	f7ff ffb3 	bl	800110c <LCD_SendCMD>
	delayMs(5);
 80011a6:	2005      	movs	r0, #5
 80011a8:	f001 f9e2 	bl	8002570 <delayMs>
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <LCD_SendData>:

static void LCD_SendData(uint8_t data){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	 * Send low nibble data
	 * Start latching
	 * Delay for 40 micro sec
	 */
	/* Command Mode */
	LCD_GPIO->ODR			|=  (1<<LCD_CTRL_RS);
 80011ba:	4a20      	ldr	r2, [pc, #128]	; (800123c <LCD_SendData+0x8c>)
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <LCD_SendData+0x8c>)
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c4:	6153      	str	r3, [r2, #20]
	/* Send Most 4 bits */
	LCD_GPIO->ODR			&= ~LCD_DATA_ODR_MASK;
 80011c6:	4a1d      	ldr	r2, [pc, #116]	; (800123c <LCD_SendData+0x8c>)
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <LCD_SendData+0x8c>)
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80011d0:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			|=  ( (data >> 4) << LCD_DATA_SHIFT );
 80011d2:	491a      	ldr	r1, [pc, #104]	; (800123c <LCD_SendData+0x8c>)
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <LCD_SendData+0x8c>)
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	79fa      	ldrb	r2, [r7, #7]
 80011da:	0912      	lsrs	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	0312      	lsls	r2, r2, #12
 80011e0:	4313      	orrs	r3, r2
 80011e2:	614b      	str	r3, [r1, #20]

	LCD_GPIO->ODR			|=  (1<<LCD_CTRL_EN);
 80011e4:	4a15      	ldr	r2, [pc, #84]	; (800123c <LCD_SendData+0x8c>)
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <LCD_SendData+0x8c>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	f043 0320 	orr.w	r3, r3, #32
 80011ee:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			&= ~(1<<LCD_CTRL_EN);
 80011f0:	4a12      	ldr	r2, [pc, #72]	; (800123c <LCD_SendData+0x8c>)
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <LCD_SendData+0x8c>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f023 0320 	bic.w	r3, r3, #32
 80011fa:	6153      	str	r3, [r2, #20]
	/* Send Least 4 bits */
	LCD_GPIO->ODR			&= ~LCD_DATA_ODR_MASK;
 80011fc:	4a0f      	ldr	r2, [pc, #60]	; (800123c <LCD_SendData+0x8c>)
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <LCD_SendData+0x8c>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001206:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			|=  ( (data) << LCD_DATA_SHIFT );
 8001208:	490c      	ldr	r1, [pc, #48]	; (800123c <LCD_SendData+0x8c>)
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <LCD_SendData+0x8c>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	79fa      	ldrb	r2, [r7, #7]
 8001210:	0312      	lsls	r2, r2, #12
 8001212:	4313      	orrs	r3, r2
 8001214:	614b      	str	r3, [r1, #20]

	LCD_GPIO->ODR			|=  (1<<LCD_CTRL_EN);
 8001216:	4a09      	ldr	r2, [pc, #36]	; (800123c <LCD_SendData+0x8c>)
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <LCD_SendData+0x8c>)
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	f043 0320 	orr.w	r3, r3, #32
 8001220:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			&= ~(1<<LCD_CTRL_EN);
 8001222:	4a06      	ldr	r2, [pc, #24]	; (800123c <LCD_SendData+0x8c>)
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <LCD_SendData+0x8c>)
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	f023 0320 	bic.w	r3, r3, #32
 800122c:	6153      	str	r3, [r2, #20]
	/* wait for command to be executed */
	delayMs(1);
 800122e:	2001      	movs	r0, #1
 8001230:	f001 f99e 	bl	8002570 <delayMs>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40020400 	.word	0x40020400

08001240 <LCD_Init>:
void LCD_Init(void){
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	 * Select 4 Bit, 5*7,2 lines (Function Set)
	 * No cursor, Blink (Display CMD)
	 * Auto Inc with no Shift (Entry )
	 * Clear LCD
	 */
	RCC->AHB1ENR 			|=  LCD_RCC;
 8001244:	4a1d      	ldr	r2, [pc, #116]	; (80012bc <LCD_Init+0x7c>)
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <LCD_Init+0x7c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f043 0302 	orr.w	r3, r3, #2
 800124e:	6313      	str	r3, [r2, #48]	; 0x30

	LCD_GPIO->MODER			&= ~LCD_DATA_MODER_MASK;
 8001250:	4a1b      	ldr	r2, [pc, #108]	; (80012c0 <LCD_Init+0x80>)
 8001252:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <LCD_Init+0x80>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800125a:	6013      	str	r3, [r2, #0]
	LCD_GPIO->MODER			|=  LCD_DATA_MODER_OUT_MASK;
 800125c:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <LCD_Init+0x80>)
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <LCD_Init+0x80>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8001266:	6013      	str	r3, [r2, #0]
	LCD_GPIO->ODR			&= ~LCD_DATA_ODR_MASK;
 8001268:	4a15      	ldr	r2, [pc, #84]	; (80012c0 <LCD_Init+0x80>)
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <LCD_Init+0x80>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001272:	6153      	str	r3, [r2, #20]

	LCD_GPIO->MODER			&= ~LCD_CTRL_MODER_MASK;
 8001274:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <LCD_Init+0x80>)
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <LCD_Init+0x80>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f423 3343 	bic.w	r3, r3, #199680	; 0x30c00
 800127e:	6013      	str	r3, [r2, #0]
	LCD_GPIO->MODER			|=  LCD_CTRL_MODER_OUT_MASK;
 8001280:	4a0f      	ldr	r2, [pc, #60]	; (80012c0 <LCD_Init+0x80>)
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <LCD_Init+0x80>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f443 3382 	orr.w	r3, r3, #66560	; 0x10400
 800128a:	6013      	str	r3, [r2, #0]
	LCD_GPIO->ODR			&= ~((1<<LCD_CTRL_EN)|(1<<LCD_CTRL_RS));
 800128c:	4a0c      	ldr	r2, [pc, #48]	; (80012c0 <LCD_Init+0x80>)
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <LCD_Init+0x80>)
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001296:	6153      	str	r3, [r2, #20]



	delayMs(500);
 8001298:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800129c:	f001 f968 	bl	8002570 <delayMs>
	LCD_SendCMD(LCD_CMD_FUN_SET);
 80012a0:	2028      	movs	r0, #40	; 0x28
 80012a2:	f7ff ff33 	bl	800110c <LCD_SendCMD>
	LCD_SendCMD(LCD_CMD_DISP);
 80012a6:	200c      	movs	r0, #12
 80012a8:	f7ff ff30 	bl	800110c <LCD_SendCMD>
	LCD_SendCMD(LCD_CMD_ENTRY_INC);
 80012ac:	2006      	movs	r0, #6
 80012ae:	f7ff ff2d 	bl	800110c <LCD_SendCMD>
	LCD_Clear();
 80012b2:	f7ff ff73 	bl	800119c <LCD_Clear>

	//	LCD_SendCMD(0x01);
	//	delayMs(5);
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020400 	.word	0x40020400

080012c4 <LCD_DispChar>:
void LCD_DispChar(uint8_t data){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
	LCD_SendData(data);
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff6d 	bl	80011b0 <LCD_SendData>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <LCD_DispCharXY>:
void LCD_DispCharXY(uint8_t line, uint8_t col,uint8_t data){
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	71fb      	strb	r3, [r7, #7]
 80012e8:	460b      	mov	r3, r1
 80012ea:	71bb      	strb	r3, [r7, #6]
 80012ec:	4613      	mov	r3, r2
 80012ee:	717b      	strb	r3, [r7, #5]
	LCD_GotoXY(line,col);
 80012f0:	79ba      	ldrb	r2, [r7, #6]
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	4611      	mov	r1, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fee9 	bl	80010ce <LCD_GotoXY>
	LCD_DispChar(data);
 80012fc:	797b      	ldrb	r3, [r7, #5]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ffe0 	bl	80012c4 <LCD_DispChar>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <LCD_DispStr>:
void LCD_DispStr(uint8_t* str){
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	uint8_t	 ind = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	73fb      	strb	r3, [r7, #15]
	while(str[ind]){
 8001318:	e009      	b.n	800132e <LCD_DispStr+0x22>
		LCD_DispChar(str[ind]);
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	4413      	add	r3, r2
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ffce 	bl	80012c4 <LCD_DispChar>
		ind++;
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	3301      	adds	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
	while(str[ind]){
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	4413      	add	r3, r2
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1ef      	bne.n	800131a <LCD_DispStr+0xe>
	}
}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <LCD_DispStrXY>:
void LCD_DispStrXY(uint8_t line, uint8_t col,uint8_t* str){
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	603a      	str	r2, [r7, #0]
 800134c:	71fb      	strb	r3, [r7, #7]
 800134e:	460b      	mov	r3, r1
 8001350:	71bb      	strb	r3, [r7, #6]
	LCD_GotoXY(line,col);
 8001352:	79ba      	ldrb	r2, [r7, #6]
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff feb8 	bl	80010ce <LCD_GotoXY>
	LCD_DispStr(str);
 800135e:	6838      	ldr	r0, [r7, #0]
 8001360:	f7ff ffd4 	bl	800130c <LCD_DispStr>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <LCD_DispInt>:
void LCD_DispInt(uint32_t num){
 800136c:	b580      	push	{r7, lr}
 800136e:	b09c      	sub	sp, #112	; 0x70
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	uint8_t i=0,arr[100],j;
 8001374:	2300      	movs	r3, #0
 8001376:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	while(num>0)
 800137a:	e01e      	b.n	80013ba <LCD_DispInt+0x4e>
	{
		arr[i]=num%10+'0';
 800137c:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <LCD_DispInt+0xa0>)
 8001384:	fba3 2301 	umull	r2, r3, r3, r1
 8001388:	08da      	lsrs	r2, r3, #3
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	1aca      	subs	r2, r1, r3
 8001394:	b2d3      	uxtb	r3, r2
 8001396:	3330      	adds	r3, #48	; 0x30
 8001398:	b2da      	uxtb	r2, r3
 800139a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800139e:	4403      	add	r3, r0
 80013a0:	f803 2c68 	strb.w	r2, [r3, #-104]
		i++;
 80013a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013a8:	3301      	adds	r3, #1
 80013aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		num/=10;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a16      	ldr	r2, [pc, #88]	; (800140c <LCD_DispInt+0xa0>)
 80013b2:	fba2 2303 	umull	r2, r3, r2, r3
 80013b6:	08db      	lsrs	r3, r3, #3
 80013b8:	607b      	str	r3, [r7, #4]
	while(num>0)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1dd      	bne.n	800137c <LCD_DispInt+0x10>
	}
	arr[i]='\0';
 80013c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013c4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80013c8:	4413      	add	r3, r2
 80013ca:	2200      	movs	r2, #0
 80013cc:	f803 2c68 	strb.w	r2, [r3, #-104]
	for(j=i;j>0;j--)
 80013d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013d4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80013d8:	e00f      	b.n	80013fa <LCD_DispInt+0x8e>
	{
		LCD_DispChar(arr[j-1]);
 80013da:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80013de:	3b01      	subs	r3, #1
 80013e0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80013e4:	4413      	add	r3, r2
 80013e6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff6a 	bl	80012c4 <LCD_DispChar>
	for(j=i;j>0;j--)
 80013f0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80013f4:	3b01      	subs	r3, #1
 80013f6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80013fa:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1eb      	bne.n	80013da <LCD_DispInt+0x6e>
	}
	/*uint8_t numStr[21] = {0};
	sprintf(numStr, "%u",num);
	LCD_DispStr(numStr);*/
}
 8001402:	bf00      	nop
 8001404:	3770      	adds	r7, #112	; 0x70
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	cccccccd 	.word	0xcccccccd

08001410 <LCD_DispIntXY>:
void LCD_DispIntXY(uint8_t line, uint8_t col,uint32_t num){
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	603a      	str	r2, [r7, #0]
 800141a:	71fb      	strb	r3, [r7, #7]
 800141c:	460b      	mov	r3, r1
 800141e:	71bb      	strb	r3, [r7, #6]
	LCD_GotoXY(line,col);
 8001420:	79ba      	ldrb	r2, [r7, #6]
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fe51 	bl	80010ce <LCD_GotoXY>
	LCD_DispInt(num);
 800142c:	6838      	ldr	r0, [r7, #0]
 800142e:	f7ff ff9d 	bl	800136c <LCD_DispInt>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <Servo_Init>:
 *  Created on: Nov 17, 2020
 *      Author: MahmoudH
 */
#include "Servo.h"

void Servo_Init(void){
 800143a:	b580      	push	{r7, lr}
 800143c:	af00      	add	r7, sp, #0
	Timer_PWMInit();
 800143e:	f000 fe1d 	bl	800207c <Timer_PWMInit>
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}

08001446 <Servo_SetPosition>:
void Servo_SetPosition(Servo_Position position){
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
	switch (position) {
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d008      	beq.n	8001468 <Servo_SetPosition+0x22>
 8001456:	2b02      	cmp	r3, #2
 8001458:	d00a      	beq.n	8001470 <Servo_SetPosition+0x2a>
 800145a:	2b00      	cmp	r3, #0
 800145c:	d000      	beq.n	8001460 <Servo_SetPosition+0x1a>
		break;
	case POS_DEG_180:
		Timer_PWMSetDuty(2);
		break;
	default:
		break;
 800145e:	e00b      	b.n	8001478 <Servo_SetPosition+0x32>
		Timer_PWMSetDuty(7);
 8001460:	2007      	movs	r0, #7
 8001462:	f000 fe9b 	bl	800219c <Timer_PWMSetDuty>
		break;
 8001466:	e007      	b.n	8001478 <Servo_SetPosition+0x32>
		Timer_PWMSetDuty(12);
 8001468:	200c      	movs	r0, #12
 800146a:	f000 fe97 	bl	800219c <Timer_PWMSetDuty>
		break;
 800146e:	e003      	b.n	8001478 <Servo_SetPosition+0x32>
		Timer_PWMSetDuty(2);
 8001470:	2002      	movs	r0, #2
 8001472:	f000 fe93 	bl	800219c <Timer_PWMSetDuty>
		break;
 8001476:	bf00      	nop
	}
	delayMs(600);
 8001478:	f44f 7016 	mov.w	r0, #600	; 0x258
 800147c:	f001 f878 	bl	8002570 <delayMs>
	Timer_PWMSetDuty(0);
 8001480:	2000      	movs	r0, #0
 8001482:	f000 fe8b 	bl	800219c <Timer_PWMSetDuty>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <WIFI_SendCmd>:
 *      Author: MahmoudH
 */

#include "WIFI.h"
/* timeout in ms */
uint8_t WIFI_SendCmd(uint8_t* cmd, uint8_t* expResp, uint32_t timeout){
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
	uint8_t	status 		= 0;
 800149c:	2300      	movs	r3, #0
 800149e:	77fb      	strb	r3, [r7, #31]
	uint8_t	data 		= 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	74fb      	strb	r3, [r7, #19]
	uint32_t compInd 	= 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
	uint32_t len        = strlen(expResp);
 80014a8:	68b8      	ldr	r0, [r7, #8]
 80014aa:	f7fe fe8d 	bl	80001c8 <strlen>
 80014ae:	6178      	str	r0, [r7, #20]
	Uart_SendString(USART1,cmd);
 80014b0:	68f9      	ldr	r1, [r7, #12]
 80014b2:	481b      	ldr	r0, [pc, #108]	; (8001520 <WIFI_SendCmd+0x90>)
 80014b4:	f001 f822 	bl	80024fc <Uart_SendString>
	SysTick_Restart();
 80014b8:	f000 fd28 	bl	8001f0c <SysTick_Restart>
	/*\r\nOK\r\n*/
	while(SysTick_GetTicks() < timeout && status == 0){
 80014bc:	e020      	b.n	8001500 <WIFI_SendCmd+0x70>
		if(compInd < len){
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d216      	bcs.n	80014f4 <WIFI_SendCmd+0x64>
			if(Uart_ReceiveByte_Unblock(USART1,&data))
 80014c6:	f107 0313 	add.w	r3, r7, #19
 80014ca:	4619      	mov	r1, r3
 80014cc:	4814      	ldr	r0, [pc, #80]	; (8001520 <WIFI_SendCmd+0x90>)
 80014ce:	f001 f832 	bl	8002536 <Uart_ReceiveByte_Unblock>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d013      	beq.n	8001500 <WIFI_SendCmd+0x70>
			{
				if(data == expResp[compInd]){
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	4413      	add	r3, r2
 80014de:	781a      	ldrb	r2, [r3, #0]
 80014e0:	7cfb      	ldrb	r3, [r7, #19]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d103      	bne.n	80014ee <WIFI_SendCmd+0x5e>
					compInd++;
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	3301      	adds	r3, #1
 80014ea:	61bb      	str	r3, [r7, #24]
 80014ec:	e008      	b.n	8001500 <WIFI_SendCmd+0x70>
				}
				else{
					compInd = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
 80014f2:	e005      	b.n	8001500 <WIFI_SendCmd+0x70>
				}
			}
		}
		else if(compInd == len){
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d101      	bne.n	8001500 <WIFI_SendCmd+0x70>
			status = 1;
 80014fc:	2301      	movs	r3, #1
 80014fe:	77fb      	strb	r3, [r7, #31]
	while(SysTick_GetTicks() < timeout && status == 0){
 8001500:	f000 fd16 	bl	8001f30 <SysTick_GetTicks>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	429a      	cmp	r2, r3
 800150c:	d202      	bcs.n	8001514 <WIFI_SendCmd+0x84>
 800150e:	7ffb      	ldrb	r3, [r7, #31]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0d4      	beq.n	80014be <WIFI_SendCmd+0x2e>
		}
	}
	return status;
 8001514:	7ffb      	ldrb	r3, [r7, #31]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3720      	adds	r7, #32
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40011000 	.word	0x40011000

08001524 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800152e:	4909      	ldr	r1, [pc, #36]	; (8001554 <NVIC_EnableIRQ+0x30>)
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	095b      	lsrs	r3, r3, #5
 8001536:	79fa      	ldrb	r2, [r7, #7]
 8001538:	f002 021f 	and.w	r2, r2, #31
 800153c:	2001      	movs	r0, #1
 800153e:	fa00 f202 	lsl.w	r2, r0, r2
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000e100 	.word	0xe000e100

08001558 <Buz_Init>:
 *  Relay	(PC13)
 *  Buttons	(PD2, PA11, PA12, PC0, PC1)
 * */

/* Buzzer */
void Buz_Init(void){
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	/* RCC Clock GPIOC */
	RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOCEN;
 800155c:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <Buz_Init+0x30>)
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <Buz_Init+0x30>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f043 0304 	orr.w	r3, r3, #4
 8001566:	6313      	str	r3, [r2, #48]	; 0x30
	/* PC4 Out */
	GPIOC->MODER &= ~GPIO_MODER_MODER4;
 8001568:	4a08      	ldr	r2, [pc, #32]	; (800158c <Buz_Init+0x34>)
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <Buz_Init+0x34>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001572:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  GPIO_MODER_MODER4_0;
 8001574:	4a05      	ldr	r2, [pc, #20]	; (800158c <Buz_Init+0x34>)
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <Buz_Init+0x34>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157e:	6013      	str	r3, [r2, #0]
	Buz_Off();
 8001580:	f000 f816 	bl	80015b0 <Buz_Off>
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800
 800158c:	40020800 	.word	0x40020800

08001590 <Buz_On>:
void Buz_On(void){
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
	GPIOC->ODR |= GPIO_ODR_ODR_4;
 8001594:	4a05      	ldr	r2, [pc, #20]	; (80015ac <Buz_On+0x1c>)
 8001596:	4b05      	ldr	r3, [pc, #20]	; (80015ac <Buz_On+0x1c>)
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	f043 0310 	orr.w	r3, r3, #16
 800159e:	6153      	str	r3, [r2, #20]
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40020800 	.word	0x40020800

080015b0 <Buz_Off>:
void Buz_Off(void){
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
	GPIOC->ODR &= ~GPIO_ODR_ODR_4;
 80015b4:	4a05      	ldr	r2, [pc, #20]	; (80015cc <Buz_Off+0x1c>)
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <Buz_Off+0x1c>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f023 0310 	bic.w	r3, r3, #16
 80015be:	6153      	str	r3, [r2, #20]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40020800 	.word	0x40020800

080015d0 <Relay_Init>:
void Buz_Toggle(void){
	GPIOC->ODR ^= GPIO_ODR_ODR_4;
}

/* Relay */
void Relay_Init(void){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	/* RCC Clock GPIOC */
	RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOCEN;
 80015d4:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <Relay_Init+0x30>)
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <Relay_Init+0x30>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6313      	str	r3, [r2, #48]	; 0x30
	/* PC13 Out */
	GPIOC->MODER &= ~GPIO_MODER_MODER13;
 80015e0:	4a08      	ldr	r2, [pc, #32]	; (8001604 <Relay_Init+0x34>)
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <Relay_Init+0x34>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80015ea:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  GPIO_MODER_MODER13_0;
 80015ec:	4a05      	ldr	r2, [pc, #20]	; (8001604 <Relay_Init+0x34>)
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <Relay_Init+0x34>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015f6:	6013      	str	r3, [r2, #0]
	Relay_Off();
 80015f8:	f000 f816 	bl	8001628 <Relay_Off>
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	40020800 	.word	0x40020800

08001608 <Relay_On>:
void Relay_On(void){
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
	GPIOC->ODR |= GPIO_ODR_ODR_13;
 800160c:	4a05      	ldr	r2, [pc, #20]	; (8001624 <Relay_On+0x1c>)
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <Relay_On+0x1c>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001616:	6153      	str	r3, [r2, #20]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40020800 	.word	0x40020800

08001628 <Relay_Off>:
void Relay_Off(void){
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
	GPIOC->ODR &= ~GPIO_ODR_ODR_13;
 800162c:	4a05      	ldr	r2, [pc, #20]	; (8001644 <Relay_Off+0x1c>)
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <Relay_Off+0x1c>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001636:	6153      	str	r3, [r2, #20]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40020800 	.word	0x40020800

08001648 <Led_On>:
	/* PCx Out */
	GPIOC->MODER &= ~(3<<(ledNo*2));
	GPIOC->MODER |=  (1<<(ledNo*2));
	Relay_Off();
}
void Led_On(LED_Type ledNo){
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR |= (1<<ledNo);
 8001652:	4907      	ldr	r1, [pc, #28]	; (8001670 <Led_On+0x28>)
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <Led_On+0x28>)
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	79fa      	ldrb	r2, [r7, #7]
 800165a:	2001      	movs	r0, #1
 800165c:	fa00 f202 	lsl.w	r2, r0, r2
 8001660:	4313      	orrs	r3, r2
 8001662:	614b      	str	r3, [r1, #20]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	40020800 	.word	0x40020800

08001674 <Leds_Init>:
}
void Led_Toggle(LED_Type ledNo){
	GPIOC->ODR ^= (1<<ledNo);
}
/* Group of leds */
void Leds_Init(uint8_t ledsMask){
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
	/* RCC Clock GPIOC */
	RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOCEN;
 800167e:	4a0f      	ldr	r2, [pc, #60]	; (80016bc <Leds_Init+0x48>)
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <Leds_Init+0x48>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER &= ~(0xFFFF<<(5*2));
 800168a:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <Leds_Init+0x4c>)
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <Leds_Init+0x4c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8001694:	f423 337f 	bic.w	r3, r3, #261120	; 0x3fc00
 8001698:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x5555<<(5*2));
 800169a:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <Leds_Init+0x4c>)
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <Leds_Init+0x4c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f043 73aa 	orr.w	r3, r3, #22282240	; 0x1540000
 80016a4:	f443 33aa 	orr.w	r3, r3, #87040	; 0x15400
 80016a8:	6013      	str	r3, [r2, #0]
	Leds_Off(ledsMask);
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 f809 	bl	80016c4 <Leds_Off>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020800 	.word	0x40020800

080016c4 <Leds_Off>:
void Leds_On(uint8_t ledsMask){
	GPIOC->ODR |= (ledsMask<<5);
}
void Leds_Off(uint8_t ledsMask){
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR &= ~(ledsMask<<5);
 80016ce:	4907      	ldr	r1, [pc, #28]	; (80016ec <Leds_Off+0x28>)
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <Leds_Off+0x28>)
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	79fa      	ldrb	r2, [r7, #7]
 80016d6:	0152      	lsls	r2, r2, #5
 80016d8:	43d2      	mvns	r2, r2
 80016da:	4013      	ands	r3, r2
 80016dc:	614b      	str	r3, [r1, #20]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40020800 	.word	0x40020800

080016f0 <Leds_Toggle>:
void Leds_Toggle(uint8_t ledsMask){
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR ^= (ledsMask<<5);
 80016fa:	4906      	ldr	r1, [pc, #24]	; (8001714 <Leds_Toggle+0x24>)
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <Leds_Toggle+0x24>)
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	79fa      	ldrb	r2, [r7, #7]
 8001702:	0152      	lsls	r2, r2, #5
 8001704:	4053      	eors	r3, r2
 8001706:	614b      	str	r3, [r1, #20]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	40020800 	.word	0x40020800

08001718 <Btn_Init_EXTI>:
void (*handler_left)(void);
void (*handler_right)(void);
void (*handler_center)(void);

/* Buttons	(PD2 C, PA11 R, PA12 L, PC0 D, PC1 U)*/
void Btn_Init_EXTI(BTN_Type btnNo, void (*handler)(void)){
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001724:	4a95      	ldr	r2, [pc, #596]	; (800197c <Btn_Init_EXTI+0x264>)
 8001726:	4b95      	ldr	r3, [pc, #596]	; (800197c <Btn_Init_EXTI+0x264>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172e:	6453      	str	r3, [r2, #68]	; 0x44
	switch (btnNo) {
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	2b04      	cmp	r3, #4
 8001734:	f200 811d 	bhi.w	8001972 <Btn_Init_EXTI+0x25a>
 8001738:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <Btn_Init_EXTI+0x28>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	08001755 	.word	0x08001755
 8001744:	0800182d 	.word	0x0800182d
 8001748:	080017c3 	.word	0x080017c3
 800174c:	08001897 	.word	0x08001897
 8001750:	08001905 	.word	0x08001905
	case BTN_CENTER:
		RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIODEN;
 8001754:	4a89      	ldr	r2, [pc, #548]	; (800197c <Btn_Init_EXTI+0x264>)
 8001756:	4b89      	ldr	r3, [pc, #548]	; (800197c <Btn_Init_EXTI+0x264>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f043 0308 	orr.w	r3, r3, #8
 800175e:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOD->MODER	&= ~GPIO_MODER_MODER2;
 8001760:	4a87      	ldr	r2, [pc, #540]	; (8001980 <Btn_Init_EXTI+0x268>)
 8001762:	4b87      	ldr	r3, [pc, #540]	; (8001980 <Btn_Init_EXTI+0x268>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800176a:	6013      	str	r3, [r2, #0]
		GPIOD->PUPDR	&= ~GPIO_PUPDR_PUPDR2;
 800176c:	4a84      	ldr	r2, [pc, #528]	; (8001980 <Btn_Init_EXTI+0x268>)
 800176e:	4b84      	ldr	r3, [pc, #528]	; (8001980 <Btn_Init_EXTI+0x268>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001776:	60d3      	str	r3, [r2, #12]
		GPIOD->PUPDR	|=  GPIO_PUPDR_PUPDR2_0;
 8001778:	4a81      	ldr	r2, [pc, #516]	; (8001980 <Btn_Init_EXTI+0x268>)
 800177a:	4b81      	ldr	r3, [pc, #516]	; (8001980 <Btn_Init_EXTI+0x268>)
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	f043 0310 	orr.w	r3, r3, #16
 8001782:	60d3      	str	r3, [r2, #12]

		handler_center = handler;
 8001784:	4a7f      	ldr	r2, [pc, #508]	; (8001984 <Btn_Init_EXTI+0x26c>)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	6013      	str	r3, [r2, #0]
		SYSCFG->EXTICR[0]	&= ~SYSCFG_EXTICR1_EXTI2;
 800178a:	4a7f      	ldr	r2, [pc, #508]	; (8001988 <Btn_Init_EXTI+0x270>)
 800178c:	4b7e      	ldr	r3, [pc, #504]	; (8001988 <Btn_Init_EXTI+0x270>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001794:	6093      	str	r3, [r2, #8]
		SYSCFG->EXTICR[0]	|=  SYSCFG_EXTICR1_EXTI2_PD;
 8001796:	4a7c      	ldr	r2, [pc, #496]	; (8001988 <Btn_Init_EXTI+0x270>)
 8001798:	4b7b      	ldr	r3, [pc, #492]	; (8001988 <Btn_Init_EXTI+0x270>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80017a0:	6093      	str	r3, [r2, #8]
		EXTI->FTSR			|=  EXTI_FTSR_TR2;
 80017a2:	4a7a      	ldr	r2, [pc, #488]	; (800198c <Btn_Init_EXTI+0x274>)
 80017a4:	4b79      	ldr	r3, [pc, #484]	; (800198c <Btn_Init_EXTI+0x274>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	60d3      	str	r3, [r2, #12]
		EXTI->IMR			|=  EXTI_IMR_MR2;
 80017ae:	4a77      	ldr	r2, [pc, #476]	; (800198c <Btn_Init_EXTI+0x274>)
 80017b0:	4b76      	ldr	r3, [pc, #472]	; (800198c <Btn_Init_EXTI+0x274>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	6013      	str	r3, [r2, #0]
		NVIC_EnableIRQ(EXTI2_IRQn);
 80017ba:	2008      	movs	r0, #8
 80017bc:	f7ff feb2 	bl	8001524 <NVIC_EnableIRQ>
		break;
 80017c0:	e0d8      	b.n	8001974 <Btn_Init_EXTI+0x25c>
	case BTN_LEFT:
		RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOAEN;
 80017c2:	4a6e      	ldr	r2, [pc, #440]	; (800197c <Btn_Init_EXTI+0x264>)
 80017c4:	4b6d      	ldr	r3, [pc, #436]	; (800197c <Btn_Init_EXTI+0x264>)
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	&= ~GPIO_MODER_MODER12;
 80017ce:	4a70      	ldr	r2, [pc, #448]	; (8001990 <Btn_Init_EXTI+0x278>)
 80017d0:	4b6f      	ldr	r3, [pc, #444]	; (8001990 <Btn_Init_EXTI+0x278>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80017d8:	6013      	str	r3, [r2, #0]
		GPIOA->PUPDR	&= ~GPIO_PUPDR_PUPDR12;
 80017da:	4a6d      	ldr	r2, [pc, #436]	; (8001990 <Btn_Init_EXTI+0x278>)
 80017dc:	4b6c      	ldr	r3, [pc, #432]	; (8001990 <Btn_Init_EXTI+0x278>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80017e4:	60d3      	str	r3, [r2, #12]
		GPIOA->PUPDR	|=  GPIO_PUPDR_PUPDR12_0;
 80017e6:	4a6a      	ldr	r2, [pc, #424]	; (8001990 <Btn_Init_EXTI+0x278>)
 80017e8:	4b69      	ldr	r3, [pc, #420]	; (8001990 <Btn_Init_EXTI+0x278>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017f0:	60d3      	str	r3, [r2, #12]

		handler_left = handler;
 80017f2:	4a68      	ldr	r2, [pc, #416]	; (8001994 <Btn_Init_EXTI+0x27c>)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	6013      	str	r3, [r2, #0]
		SYSCFG->EXTICR[3]	&= ~SYSCFG_EXTICR4_EXTI12;
 80017f8:	4a63      	ldr	r2, [pc, #396]	; (8001988 <Btn_Init_EXTI+0x270>)
 80017fa:	4b63      	ldr	r3, [pc, #396]	; (8001988 <Btn_Init_EXTI+0x270>)
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	f023 030f 	bic.w	r3, r3, #15
 8001802:	6153      	str	r3, [r2, #20]
		SYSCFG->EXTICR[3]	|=  SYSCFG_EXTICR4_EXTI12_PA;
 8001804:	4a60      	ldr	r2, [pc, #384]	; (8001988 <Btn_Init_EXTI+0x270>)
 8001806:	4b60      	ldr	r3, [pc, #384]	; (8001988 <Btn_Init_EXTI+0x270>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	6153      	str	r3, [r2, #20]
		EXTI->FTSR			|=  EXTI_FTSR_TR12;
 800180c:	4a5f      	ldr	r2, [pc, #380]	; (800198c <Btn_Init_EXTI+0x274>)
 800180e:	4b5f      	ldr	r3, [pc, #380]	; (800198c <Btn_Init_EXTI+0x274>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001816:	60d3      	str	r3, [r2, #12]
		EXTI->IMR			|=  EXTI_IMR_MR12;
 8001818:	4a5c      	ldr	r2, [pc, #368]	; (800198c <Btn_Init_EXTI+0x274>)
 800181a:	4b5c      	ldr	r3, [pc, #368]	; (800198c <Btn_Init_EXTI+0x274>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001822:	6013      	str	r3, [r2, #0]
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001824:	2028      	movs	r0, #40	; 0x28
 8001826:	f7ff fe7d 	bl	8001524 <NVIC_EnableIRQ>
		break;
 800182a:	e0a3      	b.n	8001974 <Btn_Init_EXTI+0x25c>
	case BTN_RIGHT:
		RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOAEN;
 800182c:	4a53      	ldr	r2, [pc, #332]	; (800197c <Btn_Init_EXTI+0x264>)
 800182e:	4b53      	ldr	r3, [pc, #332]	; (800197c <Btn_Init_EXTI+0x264>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	&= ~GPIO_MODER_MODER11;
 8001838:	4a55      	ldr	r2, [pc, #340]	; (8001990 <Btn_Init_EXTI+0x278>)
 800183a:	4b55      	ldr	r3, [pc, #340]	; (8001990 <Btn_Init_EXTI+0x278>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001842:	6013      	str	r3, [r2, #0]
		GPIOA->PUPDR	&= ~GPIO_PUPDR_PUPDR11;
 8001844:	4a52      	ldr	r2, [pc, #328]	; (8001990 <Btn_Init_EXTI+0x278>)
 8001846:	4b52      	ldr	r3, [pc, #328]	; (8001990 <Btn_Init_EXTI+0x278>)
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800184e:	60d3      	str	r3, [r2, #12]
		GPIOA->PUPDR	|=  GPIO_PUPDR_PUPDR11_0;
 8001850:	4a4f      	ldr	r2, [pc, #316]	; (8001990 <Btn_Init_EXTI+0x278>)
 8001852:	4b4f      	ldr	r3, [pc, #316]	; (8001990 <Btn_Init_EXTI+0x278>)
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800185a:	60d3      	str	r3, [r2, #12]

		handler_right 		 = handler;
 800185c:	4a4e      	ldr	r2, [pc, #312]	; (8001998 <Btn_Init_EXTI+0x280>)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	6013      	str	r3, [r2, #0]
		SYSCFG->EXTICR[2]	&= ~SYSCFG_EXTICR3_EXTI11;
 8001862:	4a49      	ldr	r2, [pc, #292]	; (8001988 <Btn_Init_EXTI+0x270>)
 8001864:	4b48      	ldr	r3, [pc, #288]	; (8001988 <Btn_Init_EXTI+0x270>)
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800186c:	6113      	str	r3, [r2, #16]
		SYSCFG->EXTICR[2]	|=  SYSCFG_EXTICR3_EXTI11_PA;
 800186e:	4a46      	ldr	r2, [pc, #280]	; (8001988 <Btn_Init_EXTI+0x270>)
 8001870:	4b45      	ldr	r3, [pc, #276]	; (8001988 <Btn_Init_EXTI+0x270>)
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	6113      	str	r3, [r2, #16]
		EXTI->FTSR			|=  EXTI_FTSR_TR11;
 8001876:	4a45      	ldr	r2, [pc, #276]	; (800198c <Btn_Init_EXTI+0x274>)
 8001878:	4b44      	ldr	r3, [pc, #272]	; (800198c <Btn_Init_EXTI+0x274>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001880:	60d3      	str	r3, [r2, #12]
		EXTI->IMR			|=  EXTI_IMR_MR11;
 8001882:	4a42      	ldr	r2, [pc, #264]	; (800198c <Btn_Init_EXTI+0x274>)
 8001884:	4b41      	ldr	r3, [pc, #260]	; (800198c <Btn_Init_EXTI+0x274>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800188c:	6013      	str	r3, [r2, #0]
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800188e:	2028      	movs	r0, #40	; 0x28
 8001890:	f7ff fe48 	bl	8001524 <NVIC_EnableIRQ>
		break;
 8001894:	e06e      	b.n	8001974 <Btn_Init_EXTI+0x25c>
	case BTN_UP:
		RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOCEN;
 8001896:	4a39      	ldr	r2, [pc, #228]	; (800197c <Btn_Init_EXTI+0x264>)
 8001898:	4b38      	ldr	r3, [pc, #224]	; (800197c <Btn_Init_EXTI+0x264>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	f043 0304 	orr.w	r3, r3, #4
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOC->MODER	&= ~GPIO_MODER_MODER1;
 80018a2:	4a3e      	ldr	r2, [pc, #248]	; (800199c <Btn_Init_EXTI+0x284>)
 80018a4:	4b3d      	ldr	r3, [pc, #244]	; (800199c <Btn_Init_EXTI+0x284>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f023 030c 	bic.w	r3, r3, #12
 80018ac:	6013      	str	r3, [r2, #0]
		GPIOC->PUPDR	&= ~GPIO_PUPDR_PUPDR1;
 80018ae:	4a3b      	ldr	r2, [pc, #236]	; (800199c <Btn_Init_EXTI+0x284>)
 80018b0:	4b3a      	ldr	r3, [pc, #232]	; (800199c <Btn_Init_EXTI+0x284>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	f023 030c 	bic.w	r3, r3, #12
 80018b8:	60d3      	str	r3, [r2, #12]
		GPIOC->PUPDR	|=  GPIO_PUPDR_PUPDR1_0;
 80018ba:	4a38      	ldr	r2, [pc, #224]	; (800199c <Btn_Init_EXTI+0x284>)
 80018bc:	4b37      	ldr	r3, [pc, #220]	; (800199c <Btn_Init_EXTI+0x284>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f043 0304 	orr.w	r3, r3, #4
 80018c4:	60d3      	str	r3, [r2, #12]

		handler_up		 = handler;
 80018c6:	4a36      	ldr	r2, [pc, #216]	; (80019a0 <Btn_Init_EXTI+0x288>)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	6013      	str	r3, [r2, #0]
		SYSCFG->EXTICR[0]	&= ~SYSCFG_EXTICR1_EXTI1;
 80018cc:	4a2e      	ldr	r2, [pc, #184]	; (8001988 <Btn_Init_EXTI+0x270>)
 80018ce:	4b2e      	ldr	r3, [pc, #184]	; (8001988 <Btn_Init_EXTI+0x270>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018d6:	6093      	str	r3, [r2, #8]
		SYSCFG->EXTICR[0]	|=  SYSCFG_EXTICR1_EXTI1_PC;
 80018d8:	4a2b      	ldr	r2, [pc, #172]	; (8001988 <Btn_Init_EXTI+0x270>)
 80018da:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <Btn_Init_EXTI+0x270>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f043 0320 	orr.w	r3, r3, #32
 80018e2:	6093      	str	r3, [r2, #8]
		EXTI->FTSR			|=  EXTI_FTSR_TR1;
 80018e4:	4a29      	ldr	r2, [pc, #164]	; (800198c <Btn_Init_EXTI+0x274>)
 80018e6:	4b29      	ldr	r3, [pc, #164]	; (800198c <Btn_Init_EXTI+0x274>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	f043 0302 	orr.w	r3, r3, #2
 80018ee:	60d3      	str	r3, [r2, #12]
		EXTI->IMR			|=  EXTI_IMR_MR1;
 80018f0:	4a26      	ldr	r2, [pc, #152]	; (800198c <Btn_Init_EXTI+0x274>)
 80018f2:	4b26      	ldr	r3, [pc, #152]	; (800198c <Btn_Init_EXTI+0x274>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	6013      	str	r3, [r2, #0]
		NVIC_EnableIRQ(EXTI1_IRQn);
 80018fc:	2007      	movs	r0, #7
 80018fe:	f7ff fe11 	bl	8001524 <NVIC_EnableIRQ>
		break;
 8001902:	e037      	b.n	8001974 <Btn_Init_EXTI+0x25c>
	case BTN_DOWN:
		RCC->AHB1ENR 	|=  RCC_AHB1ENR_GPIOCEN;
 8001904:	4a1d      	ldr	r2, [pc, #116]	; (800197c <Btn_Init_EXTI+0x264>)
 8001906:	4b1d      	ldr	r3, [pc, #116]	; (800197c <Btn_Init_EXTI+0x264>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f043 0304 	orr.w	r3, r3, #4
 800190e:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOC->MODER	&= ~GPIO_MODER_MODER0;
 8001910:	4a22      	ldr	r2, [pc, #136]	; (800199c <Btn_Init_EXTI+0x284>)
 8001912:	4b22      	ldr	r3, [pc, #136]	; (800199c <Btn_Init_EXTI+0x284>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 0303 	bic.w	r3, r3, #3
 800191a:	6013      	str	r3, [r2, #0]
		GPIOC->PUPDR	&= ~GPIO_PUPDR_PUPDR0;
 800191c:	4a1f      	ldr	r2, [pc, #124]	; (800199c <Btn_Init_EXTI+0x284>)
 800191e:	4b1f      	ldr	r3, [pc, #124]	; (800199c <Btn_Init_EXTI+0x284>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	f023 0303 	bic.w	r3, r3, #3
 8001926:	60d3      	str	r3, [r2, #12]
		GPIOC->PUPDR	|=  GPIO_PUPDR_PUPDR0_0;
 8001928:	4a1c      	ldr	r2, [pc, #112]	; (800199c <Btn_Init_EXTI+0x284>)
 800192a:	4b1c      	ldr	r3, [pc, #112]	; (800199c <Btn_Init_EXTI+0x284>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	60d3      	str	r3, [r2, #12]

		handler_down 		 =  handler;
 8001934:	4a1b      	ldr	r2, [pc, #108]	; (80019a4 <Btn_Init_EXTI+0x28c>)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	6013      	str	r3, [r2, #0]
		SYSCFG->EXTICR[0]	&= ~SYSCFG_EXTICR1_EXTI0;
 800193a:	4a13      	ldr	r2, [pc, #76]	; (8001988 <Btn_Init_EXTI+0x270>)
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <Btn_Init_EXTI+0x270>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f023 030f 	bic.w	r3, r3, #15
 8001944:	6093      	str	r3, [r2, #8]
		SYSCFG->EXTICR[0]	|=  SYSCFG_EXTICR1_EXTI0_PC;
 8001946:	4a10      	ldr	r2, [pc, #64]	; (8001988 <Btn_Init_EXTI+0x270>)
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <Btn_Init_EXTI+0x270>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	6093      	str	r3, [r2, #8]
		EXTI->FTSR			|=  EXTI_FTSR_TR0;
 8001952:	4a0e      	ldr	r2, [pc, #56]	; (800198c <Btn_Init_EXTI+0x274>)
 8001954:	4b0d      	ldr	r3, [pc, #52]	; (800198c <Btn_Init_EXTI+0x274>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	60d3      	str	r3, [r2, #12]
		EXTI->IMR			|=  EXTI_IMR_MR0;
 800195e:	4a0b      	ldr	r2, [pc, #44]	; (800198c <Btn_Init_EXTI+0x274>)
 8001960:	4b0a      	ldr	r3, [pc, #40]	; (800198c <Btn_Init_EXTI+0x274>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6013      	str	r3, [r2, #0]
		NVIC_EnableIRQ(EXTI0_IRQn);
 800196a:	2006      	movs	r0, #6
 800196c:	f7ff fdda 	bl	8001524 <NVIC_EnableIRQ>
		break;
 8001970:	e000      	b.n	8001974 <Btn_Init_EXTI+0x25c>
	default:
		break;
 8001972:	bf00      	nop
	}
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40023800 	.word	0x40023800
 8001980:	40020c00 	.word	0x40020c00
 8001984:	20000048 	.word	0x20000048
 8001988:	40013800 	.word	0x40013800
 800198c:	40013c00 	.word	0x40013c00
 8001990:	40020000 	.word	0x40020000
 8001994:	20000040 	.word	0x20000040
 8001998:	2000004c 	.word	0x2000004c
 800199c:	40020800 	.word	0x40020800
 80019a0:	20000044 	.word	0x20000044
 80019a4:	20000050 	.word	0x20000050

080019a8 <EXTI0_IRQHandler>:
	default:
		break;
	}
	return (result == 0);
}
void EXTI0_IRQHandler(void){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	EXTI->PR	|=  EXTI_PR_PR0;
 80019ac:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <EXTI0_IRQHandler+0x1c>)
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <EXTI0_IRQHandler+0x1c>)
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6153      	str	r3, [r2, #20]
	handler_down();
 80019b8:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <EXTI0_IRQHandler+0x20>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4798      	blx	r3
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40013c00 	.word	0x40013c00
 80019c8:	20000050 	.word	0x20000050

080019cc <EXTI2_IRQHandler>:
void EXTI1_IRQHandler(void){
	EXTI->PR	|=  EXTI_PR_PR1;
	handler_up();
}
*/
void EXTI2_IRQHandler(void){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
	EXTI->PR	|=  EXTI_PR_PR2;
 80019d0:	4a05      	ldr	r2, [pc, #20]	; (80019e8 <EXTI2_IRQHandler+0x1c>)
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <EXTI2_IRQHandler+0x1c>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	6153      	str	r3, [r2, #20]
	handler_center();
 80019dc:	4b03      	ldr	r3, [pc, #12]	; (80019ec <EXTI2_IRQHandler+0x20>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4798      	blx	r3
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40013c00 	.word	0x40013c00
 80019ec:	20000048 	.word	0x20000048

080019f0 <Keypad_Init>:
 *  Created on: Nov 9, 2020
 *      Author: MahmoudH
 */
#include "keypad.h"

void 	Keypad_Init(void){
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
	/* RCC */
	RCC->AHB1ENR |= (KEY_ROWS_RCC|KEY_COLS_RCC);
 80019f4:	4a17      	ldr	r2, [pc, #92]	; (8001a54 <Keypad_Init+0x64>)
 80019f6:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <Keypad_Init+0x64>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f043 0303 	orr.w	r3, r3, #3
 80019fe:	6313      	str	r3, [r2, #48]	; 0x30
	/* Rows -> Out , default high*/
	KEY_ROWS_GPIO->MODER	&= ~KEY_ROWS_MODER_MASK;
 8001a00:	4a15      	ldr	r2, [pc, #84]	; (8001a58 <Keypad_Init+0x68>)
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <Keypad_Init+0x68>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8001a0a:	6013      	str	r3, [r2, #0]
	KEY_ROWS_GPIO->MODER	|=  KEY_ROWS_MODER_OUT_MASK;
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <Keypad_Init+0x68>)
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <Keypad_Init+0x68>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 8001a16:	6013      	str	r3, [r2, #0]
	KEY_ROWS_GPIO->ODR		|=  KEY_ROWS_ODR_MASK;
 8001a18:	4a0f      	ldr	r2, [pc, #60]	; (8001a58 <Keypad_Init+0x68>)
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <Keypad_Init+0x68>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001a22:	6153      	str	r3, [r2, #20]
	/* Cols -> In , pullup*/
	KEY_COLS_GPIO->MODER	&= ~KEY_COLS_MODER_MASK;
 8001a24:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <Keypad_Init+0x6c>)
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <Keypad_Init+0x6c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a2e:	6013      	str	r3, [r2, #0]
	KEY_COLS_GPIO->PUPDR	&= ~KEY_COLS_PUPDR_MASK;
 8001a30:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <Keypad_Init+0x6c>)
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <Keypad_Init+0x6c>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a3a:	60d3      	str	r3, [r2, #12]
	KEY_COLS_GPIO->PUPDR	|=  KEY_COLS_PUPDR_UP_MASK;
 8001a3c:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <Keypad_Init+0x6c>)
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <Keypad_Init+0x6c>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f043 0315 	orr.w	r3, r3, #21
 8001a46:	60d3      	str	r3, [r2, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020000 	.word	0x40020000
 8001a5c:	40020400 	.word	0x40020400

08001a60 <Keypad_GetKey>:
/* Key -> 1:9
 * Key 1 -> R1 and C1
 * 0 -> No pressed key
 *  */
uint8_t	Keypad_GetKey(void){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
	 *		de-activate this row
	 *  endfor
	 *
	 *	return 0
	 * */
	uint8_t key = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	717b      	strb	r3, [r7, #5]
	uint8_t rowInd = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	71fb      	strb	r3, [r7, #7]
	uint8_t colInd = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	71bb      	strb	r3, [r7, #6]
	for (rowInd = 0; rowInd < 3; ++rowInd) {
 8001a72:	2300      	movs	r3, #0
 8001a74:	71fb      	strb	r3, [r7, #7]
 8001a76:	e04c      	b.n	8001b12 <Keypad_GetKey+0xb2>
		KEY_ROWS_GPIO->ODR &= ~(1<<(rowInd + KEY_ROWS_SHIFT));
 8001a78:	492a      	ldr	r1, [pc, #168]	; (8001b24 <Keypad_GetKey+0xc4>)
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <Keypad_GetKey+0xc4>)
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	79fa      	ldrb	r2, [r7, #7]
 8001a80:	3205      	adds	r2, #5
 8001a82:	2001      	movs	r0, #1
 8001a84:	fa00 f202 	lsl.w	r2, r0, r2
 8001a88:	43d2      	mvns	r2, r2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	614b      	str	r3, [r1, #20]
		delayMs(1);
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f000 fd6e 	bl	8002570 <delayMs>
		for (colInd = 0; colInd < 3; ++colInd) {
 8001a94:	2300      	movs	r3, #0
 8001a96:	71bb      	strb	r3, [r7, #6]
 8001a98:	e02b      	b.n	8001af2 <Keypad_GetKey+0x92>
			if( !((KEY_COLS_GPIO->IDR) & (1<<(colInd + KEY_COLS_SHIFT)) ) ){
 8001a9a:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <Keypad_GetKey+0xc8>)
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	79ba      	ldrb	r2, [r7, #6]
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d11f      	bne.n	8001aec <Keypad_GetKey+0x8c>
				key = colInd*1 + rowInd*3 + 1;
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	0052      	lsls	r2, r2, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	79bb      	ldrb	r3, [r7, #6]
 8001ab8:	4413      	add	r3, r2
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	3301      	adds	r3, #1
 8001abe:	717b      	strb	r3, [r7, #5]
				KEY_ROWS_GPIO->ODR |= (1<<(rowInd + KEY_ROWS_SHIFT));
 8001ac0:	4918      	ldr	r1, [pc, #96]	; (8001b24 <Keypad_GetKey+0xc4>)
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <Keypad_GetKey+0xc4>)
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	79fa      	ldrb	r2, [r7, #7]
 8001ac8:	3205      	adds	r2, #5
 8001aca:	2001      	movs	r0, #1
 8001acc:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	614b      	str	r3, [r1, #20]
				while( !((KEY_COLS_GPIO->IDR) & (1<<(colInd + KEY_COLS_SHIFT)) ) );
 8001ad4:	bf00      	nop
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <Keypad_GetKey+0xc8>)
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	79ba      	ldrb	r2, [r7, #6]
 8001adc:	2101      	movs	r1, #1
 8001ade:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f6      	beq.n	8001ad6 <Keypad_GetKey+0x76>
				return key;
 8001ae8:	797b      	ldrb	r3, [r7, #5]
 8001aea:	e016      	b.n	8001b1a <Keypad_GetKey+0xba>
		for (colInd = 0; colInd < 3; ++colInd) {
 8001aec:	79bb      	ldrb	r3, [r7, #6]
 8001aee:	3301      	adds	r3, #1
 8001af0:	71bb      	strb	r3, [r7, #6]
 8001af2:	79bb      	ldrb	r3, [r7, #6]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d9d0      	bls.n	8001a9a <Keypad_GetKey+0x3a>
			}
		}
		KEY_ROWS_GPIO->ODR |= (1<<(rowInd + KEY_ROWS_SHIFT));
 8001af8:	490a      	ldr	r1, [pc, #40]	; (8001b24 <Keypad_GetKey+0xc4>)
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <Keypad_GetKey+0xc4>)
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	79fa      	ldrb	r2, [r7, #7]
 8001b00:	3205      	adds	r2, #5
 8001b02:	2001      	movs	r0, #1
 8001b04:	fa00 f202 	lsl.w	r2, r0, r2
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	614b      	str	r3, [r1, #20]
	for (rowInd = 0; rowInd < 3; ++rowInd) {
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	71fb      	strb	r3, [r7, #7]
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d9af      	bls.n	8001a78 <Keypad_GetKey+0x18>
	}
	return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40020000 	.word	0x40020000
 8001b28:	40020400 	.word	0x40020400

08001b2c <Ultra_Init>:

#include "ultrasonic.h"

extern volatile uint32_t pulse_width;

void Ultra_Init(void){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	/* setup trigger */
	RCC->AHB1ENR		|= 	RCC_AHB1ENR_GPIOAEN;
 8001b30:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <Ultra_Init+0x3c>)
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <Ultra_Init+0x3c>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER		&= ~(3<<(4*2));
 8001b3c:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <Ultra_Init+0x40>)
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <Ultra_Init+0x40>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b46:	6013      	str	r3, [r2, #0]
	GPIOA->MODER		|=  (1<<(4*2));
 8001b48:	4a08      	ldr	r2, [pc, #32]	; (8001b6c <Ultra_Init+0x40>)
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <Ultra_Init+0x40>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b52:	6013      	str	r3, [r2, #0]
	GPIOA->ODR			&= ~GPIO_ODR_ODR_4;
 8001b54:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <Ultra_Init+0x40>)
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <Ultra_Init+0x40>)
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f023 0310 	bic.w	r3, r3, #16
 8001b5e:	6153      	str	r3, [r2, #20]
	/* setup timer 1 channel 1 to be ready */
	Timer_CaptureInit();
 8001b60:	f000 fa1a 	bl	8001f98 <Timer_CaptureInit>
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40020000 	.word	0x40020000

08001b70 <Ultra_GetDistance>:
uint16_t 	Ultra_GetDistance(void){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
	uint16_t distance 	= 0; /* in cm */
 8001b76:	2300      	movs	r3, #0
 8001b78:	807b      	strh	r3, [r7, #2]
	uint32_t delay 		= 0; /* in ms */
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
	pulse_width = 0;
 8001b7e:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <Ultra_GetDistance+0x68>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
	/* Send the trigger pulse on PA4*/
	GPIOA->ODR			|=  GPIO_ODR_ODR_4;
 8001b84:	4a15      	ldr	r2, [pc, #84]	; (8001bdc <Ultra_GetDistance+0x6c>)
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <Ultra_GetDistance+0x6c>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f043 0310 	orr.w	r3, r3, #16
 8001b8e:	6153      	str	r3, [r2, #20]
	delayMs(1);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f000 fced 	bl	8002570 <delayMs>
	GPIOA->ODR			&= ~GPIO_ODR_ODR_4;
 8001b96:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <Ultra_GetDistance+0x6c>)
 8001b98:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <Ultra_GetDistance+0x6c>)
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	f023 0310 	bic.w	r3, r3, #16
 8001ba0:	6153      	str	r3, [r2, #20]
	/* wait for pulse width measurement to be completed */
	while(pulse_width == 0 && delay < 50){
 8001ba2:	e005      	b.n	8001bb0 <Ultra_GetDistance+0x40>
		delayMs(1);
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f000 fce3 	bl	8002570 <delayMs>
		delay++;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3301      	adds	r3, #1
 8001bae:	607b      	str	r3, [r7, #4]
	while(pulse_width == 0 && delay < 50){
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <Ultra_GetDistance+0x68>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d102      	bne.n	8001bbe <Ultra_GetDistance+0x4e>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b31      	cmp	r3, #49	; 0x31
 8001bbc:	d9f2      	bls.n	8001ba4 <Ultra_GetDistance+0x34>
	}
	/* Calculate Distance (2 to 400), where distance = width/58*/
	distance = pulse_width/58;
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <Ultra_GetDistance+0x68>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <Ultra_GetDistance+0x70>)
 8001bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc8:	095b      	lsrs	r3, r3, #5
 8001bca:	807b      	strh	r3, [r7, #2]
	/* return  the distance */
	return distance;
 8001bcc:	887b      	ldrh	r3, [r7, #2]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000034 	.word	0x20000034
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	8d3dcb09 	.word	0x8d3dcb09

08001be4 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001be8:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <RCC_DeInit+0x50>)
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <RCC_DeInit+0x50>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <RCC_DeInit+0x50>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 8001bfa:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <RCC_DeInit+0x50>)
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <RCC_DeInit+0x50>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8001c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <RCC_DeInit+0x50>)
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <RCC_DeInit+0x54>)
 8001c0e:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <RCC_DeInit+0x50>)
 8001c12:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <RCC_DeInit+0x58>)
 8001c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c18:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <RCC_DeInit+0x50>)
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <RCC_DeInit+0x50>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <RCC_DeInit+0x50>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	40023800 	.word	0x40023800
 8001c38:	24003010 	.word	0x24003010
 8001c3c:	20003000 	.word	0x20003000

08001c40 <ADC1_Init>:
 *      Author: MahmoudH
 */

#include "ADC.h"

void ADC1_Init(void){
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
	/* ADC1 RCC */
	RCC->APB2ENR	|=	RCC_APB2ENR_ADC1EN;
 8001c44:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <ADC1_Init+0x34>)
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <ADC1_Init+0x34>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4e:	6453      	str	r3, [r2, #68]	; 0x44
	/* ADC ON */
	ADC1->CR2		|=	ADC_CR2_ADON;
 8001c50:	4a09      	ldr	r2, [pc, #36]	; (8001c78 <ADC1_Init+0x38>)
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <ADC1_Init+0x38>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6093      	str	r3, [r2, #8]
	/* SQR1 -> Number of total conversions  = 1 */
	ADC1->SQR1		&= ~ADC_SQR1_L;
 8001c5c:	4a06      	ldr	r2, [pc, #24]	; (8001c78 <ADC1_Init+0x38>)
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <ADC1_Init+0x38>)
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001c66:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40012000 	.word	0x40012000

08001c7c <ADC1_SelectChannel>:
void ADC1_SelectChannel(ADC_CH channel){
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
	switch (channel) {
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d002      	beq.n	8001c92 <ADC1_SelectChannel+0x16>
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d00d      	beq.n	8001cac <ADC1_SelectChannel+0x30>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
		/* Analog */
		GPIOA->MODER	|=  GPIO_MODER_MODER1;
		break;
	default:
		break;
 8001c90:	e019      	b.n	8001cc6 <ADC1_SelectChannel+0x4a>
		RCC->AHB1ENR 	|=  RCC_AHB1ENR_GPIOAEN;
 8001c92:	4a16      	ldr	r2, [pc, #88]	; (8001cec <ADC1_SelectChannel+0x70>)
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <ADC1_SelectChannel+0x70>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	|=  GPIO_MODER_MODER0;
 8001c9e:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <ADC1_SelectChannel+0x74>)
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <ADC1_SelectChannel+0x74>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f043 0303 	orr.w	r3, r3, #3
 8001ca8:	6013      	str	r3, [r2, #0]
		break;
 8001caa:	e00c      	b.n	8001cc6 <ADC1_SelectChannel+0x4a>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001cac:	4a0f      	ldr	r2, [pc, #60]	; (8001cec <ADC1_SelectChannel+0x70>)
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <ADC1_SelectChannel+0x70>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	|=  GPIO_MODER_MODER1;
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <ADC1_SelectChannel+0x74>)
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <ADC1_SelectChannel+0x74>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f043 030c 	orr.w	r3, r3, #12
 8001cc2:	6013      	str	r3, [r2, #0]
		break;
 8001cc4:	bf00      	nop
	}
	ADC1->SQR3		&= ~ADC_SQR3_SQ1;
 8001cc6:	4a0b      	ldr	r2, [pc, #44]	; (8001cf4 <ADC1_SelectChannel+0x78>)
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <ADC1_SelectChannel+0x78>)
 8001cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ccc:	f023 031f 	bic.w	r3, r3, #31
 8001cd0:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3		|=  channel;
 8001cd2:	4908      	ldr	r1, [pc, #32]	; (8001cf4 <ADC1_SelectChannel+0x78>)
 8001cd4:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <ADC1_SelectChannel+0x78>)
 8001cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	634b      	str	r3, [r1, #52]	; 0x34
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	40012000 	.word	0x40012000

08001cf8 <ADC1_Read>:
uint16_t ADC1_Read(void){
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
	/* Start Conversion */
	ADC1->CR2		|=	ADC_CR2_SWSTART;
 8001cfc:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <ADC1_Read+0x30>)
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <ADC1_Read+0x30>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d06:	6093      	str	r3, [r2, #8]
	/* Wait until conversion is completed */
	while( !(ADC1->SR & ADC_SR_EOC) );
 8001d08:	bf00      	nop
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <ADC1_Read+0x30>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f9      	beq.n	8001d0a <ADC1_Read+0x12>
	/* return the conversion result */
	return ADC1->DR;
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <ADC1_Read+0x30>)
 8001d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1a:	b29b      	uxth	r3, r3
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40012000 	.word	0x40012000

08001d2c <TWI_Init>:
/* I2C1:
 * SCK: PB6
 * SDA: PB7
 * EEPROM AT24C16
 *  */
void TWI_Init(void){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR 	|= 	RCC_AHB1ENR_GPIOBEN;
 8001d30:	4a37      	ldr	r2, [pc, #220]	; (8001e10 <TWI_Init+0xe4>)
 8001d32:	4b37      	ldr	r3, [pc, #220]	; (8001e10 <TWI_Init+0xe4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f043 0302 	orr.w	r3, r3, #2
 8001d3a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR 	|= 	RCC_APB1ENR_I2C1EN;
 8001d3c:	4a34      	ldr	r2, [pc, #208]	; (8001e10 <TWI_Init+0xe4>)
 8001d3e:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <TWI_Init+0xe4>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d46:	6413      	str	r3, [r2, #64]	; 0x40

	GPIOB->MODER 	&= 	~(0xF << (6 * 2));
 8001d48:	4a32      	ldr	r2, [pc, #200]	; (8001e14 <TWI_Init+0xe8>)
 8001d4a:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <TWI_Init+0xe8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d52:	6013      	str	r3, [r2, #0]
	GPIOB->MODER 	|= 	 (0xA << (6 * 2));
 8001d54:	4a2f      	ldr	r2, [pc, #188]	; (8001e14 <TWI_Init+0xe8>)
 8001d56:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <TWI_Init+0xe8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8001d5e:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER	|= 	(3<<6); /* Open drain */
 8001d60:	4a2c      	ldr	r2, [pc, #176]	; (8001e14 <TWI_Init+0xe8>)
 8001d62:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <TWI_Init+0xe8>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d6a:	6053      	str	r3, [r2, #4]


	//GPIOB->AFR[0] |= 0x4<<(6*4);
	//GPIOB->AFR[0] |= 0x4<<(7*4);

	GPIOB->AFR[0] 	&= ~(0xFF << (6 * 4));
 8001d6c:	4a29      	ldr	r2, [pc, #164]	; (8001e14 <TWI_Init+0xe8>)
 8001d6e:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <TWI_Init+0xe8>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d76:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] 	|=  (0x4 << (6 * 4));
 8001d78:	4a26      	ldr	r2, [pc, #152]	; (8001e14 <TWI_Init+0xe8>)
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <TWI_Init+0xe8>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d82:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] 	|=  (0x4 << (7 * 4));
 8001d84:	4a23      	ldr	r2, [pc, #140]	; (8001e14 <TWI_Init+0xe8>)
 8001d86:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <TWI_Init+0xe8>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d8e:	6213      	str	r3, [r2, #32]

	I2C1->CR1		&=	~(I2C_CR1_PE);
 8001d90:	4a21      	ldr	r2, [pc, #132]	; (8001e18 <TWI_Init+0xec>)
 8001d92:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <TWI_Init+0xec>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	8013      	strh	r3, [r2, #0]

	/* Frequency Setup */
	I2C1->CCR 		&=	~I2C_CCR_FS; 	/* standard mode */
 8001da0:	4a1d      	ldr	r2, [pc, #116]	; (8001e18 <TWI_Init+0xec>)
 8001da2:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <TWI_Init+0xec>)
 8001da4:	8b9b      	ldrh	r3, [r3, #28]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	8393      	strh	r3, [r2, #28]

	I2C1->CR2		&=	~I2C_CR2_FREQ;	/* Fpclk1 = 2MHz */
 8001db0:	4a19      	ldr	r2, [pc, #100]	; (8001e18 <TWI_Init+0xec>)
 8001db2:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <TWI_Init+0xec>)
 8001db4:	889b      	ldrh	r3, [r3, #4]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	8093      	strh	r3, [r2, #4]
	I2C1->CR2		|=   (2<<0);
 8001dc0:	4a15      	ldr	r2, [pc, #84]	; (8001e18 <TWI_Init+0xec>)
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <TWI_Init+0xec>)
 8001dc4:	889b      	ldrh	r3, [r3, #4]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	8093      	strh	r3, [r2, #4]
	 	 Tp = Th + TL = 2*CCR*Tpclk
		CCR = Tp/(2*Tpclk1)
		CCR = Fpclk1/(2*Fsm)
       	   	= 20/2 = 10
	 */
	I2C1->CCR		&=	~I2C_CCR_CCR;
 8001dd0:	4a11      	ldr	r2, [pc, #68]	; (8001e18 <TWI_Init+0xec>)
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <TWI_Init+0xec>)
 8001dd4:	8b9b      	ldrh	r3, [r3, #28]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001ddc:	f023 030f 	bic.w	r3, r3, #15
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	8393      	strh	r3, [r2, #28]
	I2C1->CCR		|=   (10<<0);
 8001de4:	4a0c      	ldr	r2, [pc, #48]	; (8001e18 <TWI_Init+0xec>)
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <TWI_Init+0xec>)
 8001de8:	8b9b      	ldrh	r3, [r3, #28]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	f043 030a 	orr.w	r3, r3, #10
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	8393      	strh	r3, [r2, #28]
	/* Enable I2C */
	I2C1->CR1		|=   (I2C_CR1_PE);
 8001df4:	4a08      	ldr	r2, [pc, #32]	; (8001e18 <TWI_Init+0xec>)
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <TWI_Init+0xec>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	8013      	strh	r3, [r2, #0]
	delayMs(100);
 8001e04:	2064      	movs	r0, #100	; 0x64
 8001e06:	f000 fbb3 	bl	8002570 <delayMs>
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020400 	.word	0x40020400
 8001e18:	40005400 	.word	0x40005400

08001e1c <I2C1_Start>:
	I2C1->CCR		|=   (10<<0);
	/* Enable I2C */
	I2C1->CR1		|=   (I2C_CR1_PE);
	delayMs(100);
}
void 	I2C1_Start(void){
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
	I2C1->CR1		|= I2C_CR1_START;
 8001e20:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <I2C1_Start+0x30>)
 8001e22:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <I2C1_Start+0x30>)
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	8013      	strh	r3, [r2, #0]
	while(!( I2C1->SR1 & I2C_SR1_SB));
 8001e30:	bf00      	nop
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <I2C1_Start+0x30>)
 8001e34:	8a9b      	ldrh	r3, [r3, #20]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f8      	beq.n	8001e32 <I2C1_Start+0x16>
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40005400 	.word	0x40005400

08001e50 <I2C1_Stop>:
void 	I2C1_Stop(void){
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
	I2C1->CR1		|= I2C_CR1_STOP;
 8001e54:	4a06      	ldr	r2, [pc, #24]	; (8001e70 <I2C1_Stop+0x20>)
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <I2C1_Stop+0x20>)
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	8013      	strh	r3, [r2, #0]
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40005400 	.word	0x40005400

08001e74 <I2C1_WriteData>:

void 	I2C1_WriteData(uint8_t data){
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
	I2C1->DR	 = data;
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <I2C1_WriteData+0x30>)
 8001e80:	79fa      	ldrb	r2, [r7, #7]
 8001e82:	b292      	uxth	r2, r2
 8001e84:	821a      	strh	r2, [r3, #16]
	while(!( I2C1->SR1 & I2C_SR1_TXE));
 8001e86:	bf00      	nop
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <I2C1_WriteData+0x30>)
 8001e8a:	8a9b      	ldrh	r3, [r3, #20]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f8      	beq.n	8001e88 <I2C1_WriteData+0x14>
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40005400 	.word	0x40005400

08001ea8 <I2C1_WriteAddress>:
void 	I2C1_WriteAddress(uint8_t addr){
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
	I2C1->DR	 = addr;
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <I2C1_WriteAddress+0x34>)
 8001eb4:	79fa      	ldrb	r2, [r7, #7]
 8001eb6:	b292      	uxth	r2, r2
 8001eb8:	821a      	strh	r2, [r3, #16]
	while(!( I2C1->SR1 & I2C_SR1_ADDR));
 8001eba:	bf00      	nop
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <I2C1_WriteAddress+0x34>)
 8001ebe:	8a9b      	ldrh	r3, [r3, #20]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f8      	beq.n	8001ebc <I2C1_WriteAddress+0x14>
	/* dummy read to SR2 register to clear the address flag */
	(uint32_t)I2C1->SR2;
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <I2C1_WriteAddress+0x34>)
 8001ecc:	8b1b      	ldrh	r3, [r3, #24]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40005400 	.word	0x40005400

08001ee0 <I2C1_ReadData>:
uint8_t I2C1_ReadData(void){
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
	/* ACK
	 * CR1_ACK
	 *  */
	while(!( I2C1->SR1 & I2C_SR1_RXNE));
 8001ee4:	bf00      	nop
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <I2C1_ReadData+0x28>)
 8001ee8:	8a9b      	ldrh	r3, [r3, #20]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f8      	beq.n	8001ee6 <I2C1_ReadData+0x6>
	return I2C1->DR;
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <I2C1_ReadData+0x28>)
 8001ef6:	8a1b      	ldrh	r3, [r3, #16]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40005400 	.word	0x40005400

08001f0c <SysTick_Restart>:
void 		SysTick_Init(uint32_t underFlowValue){
	SysTick->CTRL |= (SysTick_CTRL_CLKSOURCE_Msk|SysTick_CTRL_ENABLE_Msk|SysTick_CTRL_TICKINT_Msk);
	SysTick->LOAD = underFlowValue - 1;
	SysTick->VAL  = SysTick->LOAD;
}
void 		SysTick_Restart(void){
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
	SysTick->VAL  = SysTick->LOAD;
 8001f10:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <SysTick_Restart+0x1c>)
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <SysTick_Restart+0x1c>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	6093      	str	r3, [r2, #8]
	ticks = 0;
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <SysTick_Restart+0x20>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000e010 	.word	0xe000e010
 8001f2c:	20000030 	.word	0x20000030

08001f30 <SysTick_GetTicks>:
uint32_t 	SysTick_GetTicks(void){
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
	return ticks;
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <SysTick_GetTicks+0x14>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000030 	.word	0x20000030

08001f48 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
	ticks++;
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <SysTick_Handler+0x18>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3301      	adds	r3, #1
 8001f52:	4a03      	ldr	r2, [pc, #12]	; (8001f60 <SysTick_Handler+0x18>)
 8001f54:	6013      	str	r3, [r2, #0]
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	20000030 	.word	0x20000030

08001f64 <NVIC_EnableIRQ>:
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001f6e:	4909      	ldr	r1, [pc, #36]	; (8001f94 <NVIC_EnableIRQ+0x30>)
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	095b      	lsrs	r3, r3, #5
 8001f76:	79fa      	ldrb	r2, [r7, #7]
 8001f78:	f002 021f 	and.w	r2, r2, #31
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000e100 	.word	0xe000e100

08001f98 <Timer_CaptureInit>:
	TIM3->ARR = notifyPeriod;

}

/* Input Capture */
void Timer_CaptureInit(void){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
	/* GPIOA PA8 (RCC, TIM1 alterate) */
	RCC->AHB1ENR 		|=  RCC_AHB1ENR_GPIOAEN;
 8001f9c:	4a34      	ldr	r2, [pc, #208]	; (8002070 <Timer_CaptureInit+0xd8>)
 8001f9e:	4b34      	ldr	r3, [pc, #208]	; (8002070 <Timer_CaptureInit+0xd8>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER		&= ~(3<<(8*2));
 8001fa8:	4a32      	ldr	r2, [pc, #200]	; (8002074 <Timer_CaptureInit+0xdc>)
 8001faa:	4b32      	ldr	r3, [pc, #200]	; (8002074 <Timer_CaptureInit+0xdc>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001fb2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER		|=  (2<<(8*2));
 8001fb4:	4a2f      	ldr	r2, [pc, #188]	; (8002074 <Timer_CaptureInit+0xdc>)
 8001fb6:	4b2f      	ldr	r3, [pc, #188]	; (8002074 <Timer_CaptureInit+0xdc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fbe:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[1]		&= ~(0xF<<(0*4));
 8001fc0:	4a2c      	ldr	r2, [pc, #176]	; (8002074 <Timer_CaptureInit+0xdc>)
 8001fc2:	4b2c      	ldr	r3, [pc, #176]	; (8002074 <Timer_CaptureInit+0xdc>)
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	f023 030f 	bic.w	r3, r3, #15
 8001fca:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1]		|=  (0x1<<(0*4));
 8001fcc:	4a29      	ldr	r2, [pc, #164]	; (8002074 <Timer_CaptureInit+0xdc>)
 8001fce:	4b29      	ldr	r3, [pc, #164]	; (8002074 <Timer_CaptureInit+0xdc>)
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6253      	str	r3, [r2, #36]	; 0x24

	/* TIM1 RCC (APB2) */
	RCC->APB2ENR		|= RCC_APB2ENR_TIM1EN;
 8001fd8:	4a25      	ldr	r2, [pc, #148]	; (8002070 <Timer_CaptureInit+0xd8>)
 8001fda:	4b25      	ldr	r3, [pc, #148]	; (8002070 <Timer_CaptureInit+0xd8>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6453      	str	r3, [r2, #68]	; 0x44

	/* TIM1 tick time - 1us (PSC). */
	TIM1->PSC			=  16 - 1;
 8001fe4:	4b24      	ldr	r3, [pc, #144]	; (8002078 <Timer_CaptureInit+0xe0>)
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	851a      	strh	r2, [r3, #40]	; 0x28

	/* ARR is MAX. */
	TIM1->ARR			= 0xFFFFFFFF;
 8001fea:	4b23      	ldr	r3, [pc, #140]	; (8002078 <Timer_CaptureInit+0xe0>)
 8001fec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff0:	62da      	str	r2, [r3, #44]	; 0x2c

	/* CH1 is input IC1 (CCMR1_CC1S :01) */
	TIM1->CCMR1			|=  TIM_CCMR1_CC1S_0;
 8001ff2:	4a21      	ldr	r2, [pc, #132]	; (8002078 <Timer_CaptureInit+0xe0>)
 8001ff4:	4b20      	ldr	r3, [pc, #128]	; (8002078 <Timer_CaptureInit+0xe0>)
 8001ff6:	8b1b      	ldrh	r3, [r3, #24]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	8313      	strh	r3, [r2, #24]
	TIM1->CCMR1			&= ~TIM_CCMR1_CC1S_1;
 8002002:	4a1d      	ldr	r2, [pc, #116]	; (8002078 <Timer_CaptureInit+0xe0>)
 8002004:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <Timer_CaptureInit+0xe0>)
 8002006:	8b1b      	ldrh	r3, [r3, #24]
 8002008:	b29b      	uxth	r3, r3
 800200a:	f023 0302 	bic.w	r3, r3, #2
 800200e:	b29b      	uxth	r3, r3
 8002010:	8313      	strh	r3, [r2, #24]

	/* select rising and falling edges (CCER_CC1NP/CC1P: 11) */
	TIM1->CCER			|=  TIM_CCER_CC1P;
 8002012:	4a19      	ldr	r2, [pc, #100]	; (8002078 <Timer_CaptureInit+0xe0>)
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <Timer_CaptureInit+0xe0>)
 8002016:	8c1b      	ldrh	r3, [r3, #32]
 8002018:	b29b      	uxth	r3, r3
 800201a:	f043 0302 	orr.w	r3, r3, #2
 800201e:	b29b      	uxth	r3, r3
 8002020:	8413      	strh	r3, [r2, #32]
	TIM1->CCER			|=  TIM_CCER_CC1NP;
 8002022:	4a15      	ldr	r2, [pc, #84]	; (8002078 <Timer_CaptureInit+0xe0>)
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <Timer_CaptureInit+0xe0>)
 8002026:	8c1b      	ldrh	r3, [r3, #32]
 8002028:	b29b      	uxth	r3, r3
 800202a:	f043 0308 	orr.w	r3, r3, #8
 800202e:	b29b      	uxth	r3, r3
 8002030:	8413      	strh	r3, [r2, #32]

	/* Enable: Channel (CCER_CC1E) */
	TIM1->CCER			|= TIM_CCER_CC1E;
 8002032:	4a11      	ldr	r2, [pc, #68]	; (8002078 <Timer_CaptureInit+0xe0>)
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <Timer_CaptureInit+0xe0>)
 8002036:	8c1b      	ldrh	r3, [r3, #32]
 8002038:	b29b      	uxth	r3, r3
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	b29b      	uxth	r3, r3
 8002040:	8413      	strh	r3, [r2, #32]

	/* Enable: Timer   (CR1_CEN) */
	TIM1->CR1 			|= TIM_CR1_CEN;
 8002042:	4a0d      	ldr	r2, [pc, #52]	; (8002078 <Timer_CaptureInit+0xe0>)
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <Timer_CaptureInit+0xe0>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	b29b      	uxth	r3, r3
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	b29b      	uxth	r3, r3
 8002050:	8013      	strh	r3, [r2, #0]

	/* Capture/compare interrupt with TIM (DIER_CC1IE */
	TIM1->DIER			|= TIM_DIER_CC1IE;
 8002052:	4a09      	ldr	r2, [pc, #36]	; (8002078 <Timer_CaptureInit+0xe0>)
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <Timer_CaptureInit+0xe0>)
 8002056:	899b      	ldrh	r3, [r3, #12]
 8002058:	b29b      	uxth	r3, r3
 800205a:	f043 0302 	orr.w	r3, r3, #2
 800205e:	b29b      	uxth	r3, r3
 8002060:	8193      	strh	r3, [r2, #12]

	/* Capture/compare interrupt with NVIC and Global. */
	NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002062:	201b      	movs	r0, #27
 8002064:	f7ff ff7e 	bl	8001f64 <NVIC_EnableIRQ>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 8002068:	b662      	cpsie	i
	__enable_irq();
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800
 8002074:	40020000 	.word	0x40020000
 8002078:	40010000 	.word	0x40010000

0800207c <Timer_PWMInit>:

/* Output Compare and PWM */
void Timer_PWMInit(void){
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
	/* GPIOB PB9 (RCC, TIM1 alterate) */
	RCC->AHB1ENR 		|=  RCC_AHB1ENR_GPIOBEN;
 8002080:	4a41      	ldr	r2, [pc, #260]	; (8002188 <Timer_PWMInit+0x10c>)
 8002082:	4b41      	ldr	r3, [pc, #260]	; (8002188 <Timer_PWMInit+0x10c>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f043 0302 	orr.w	r3, r3, #2
 800208a:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB->MODER		&= ~(3<<(9*2));
 800208c:	4a3f      	ldr	r2, [pc, #252]	; (800218c <Timer_PWMInit+0x110>)
 800208e:	4b3f      	ldr	r3, [pc, #252]	; (800218c <Timer_PWMInit+0x110>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002096:	6013      	str	r3, [r2, #0]
	GPIOB->MODER		|=  (2<<(9*2));
 8002098:	4a3c      	ldr	r2, [pc, #240]	; (800218c <Timer_PWMInit+0x110>)
 800209a:	4b3c      	ldr	r3, [pc, #240]	; (800218c <Timer_PWMInit+0x110>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020a2:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[1]		&= ~(0xF<<(1*4));
 80020a4:	4a39      	ldr	r2, [pc, #228]	; (800218c <Timer_PWMInit+0x110>)
 80020a6:	4b39      	ldr	r3, [pc, #228]	; (800218c <Timer_PWMInit+0x110>)
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ae:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1]		|=  (0x2<<(1*4));
 80020b0:	4a36      	ldr	r2, [pc, #216]	; (800218c <Timer_PWMInit+0x110>)
 80020b2:	4b36      	ldr	r3, [pc, #216]	; (800218c <Timer_PWMInit+0x110>)
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	f043 0320 	orr.w	r3, r3, #32
 80020ba:	6253      	str	r3, [r2, #36]	; 0x24

	/* TIM4 RCC (APB1) */
	RCC->APB1ENR		|= RCC_APB1ENR_TIM4EN;
 80020bc:	4a32      	ldr	r2, [pc, #200]	; (8002188 <Timer_PWMInit+0x10c>)
 80020be:	4b32      	ldr	r3, [pc, #200]	; (8002188 <Timer_PWMInit+0x10c>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	6413      	str	r3, [r2, #64]	; 0x40

	/* TIM4 tick time - 1ms (PSC). */
	TIM4->PSC			=  (SystemCoreClock/1000000UL) - 1;
 80020c8:	4a31      	ldr	r2, [pc, #196]	; (8002190 <Timer_PWMInit+0x114>)
 80020ca:	4b32      	ldr	r3, [pc, #200]	; (8002194 <Timer_PWMInit+0x118>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4932      	ldr	r1, [pc, #200]	; (8002198 <Timer_PWMInit+0x11c>)
 80020d0:	fba1 1303 	umull	r1, r3, r1, r3
 80020d4:	0c9b      	lsrs	r3, r3, #18
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29b      	uxth	r3, r3
 80020dc:	8513      	strh	r3, [r2, #40]	; 0x28

	/* ARR is 20. */
	TIM4->ARR			= 20000;
 80020de:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <Timer_PWMInit+0x114>)
 80020e0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80020e4:	62da      	str	r2, [r3, #44]	; 0x2c

	/* CH4 is Output OC4 (CCMR2_CC4S :00) */
	TIM4->CCMR2			&= ~TIM_CCMR2_CC4S;
 80020e6:	4a2a      	ldr	r2, [pc, #168]	; (8002190 <Timer_PWMInit+0x114>)
 80020e8:	4b29      	ldr	r3, [pc, #164]	; (8002190 <Timer_PWMInit+0x114>)
 80020ea:	8b9b      	ldrh	r3, [r3, #28]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	8393      	strh	r3, [r2, #28]

	 /* Select PWM Mode 1 (CCMR2_OC4M :110) */
	TIM4->CCMR2			|=  TIM_CCMR2_OC4M;
 80020f6:	4a26      	ldr	r2, [pc, #152]	; (8002190 <Timer_PWMInit+0x114>)
 80020f8:	4b25      	ldr	r3, [pc, #148]	; (8002190 <Timer_PWMInit+0x114>)
 80020fa:	8b9b      	ldrh	r3, [r3, #28]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002102:	b29b      	uxth	r3, r3
 8002104:	8393      	strh	r3, [r2, #28]
	TIM4->CCMR2			&= ~TIM_CCMR2_OC4M_0;
 8002106:	4a22      	ldr	r2, [pc, #136]	; (8002190 <Timer_PWMInit+0x114>)
 8002108:	4b21      	ldr	r3, [pc, #132]	; (8002190 <Timer_PWMInit+0x114>)
 800210a:	8b9b      	ldrh	r3, [r3, #28]
 800210c:	b29b      	uxth	r3, r3
 800210e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002112:	b29b      	uxth	r3, r3
 8002114:	8393      	strh	r3, [r2, #28]

	/* preload enable  CCMR2_OC4PE and CR1_ARPE */
	TIM4->CCMR2			|=  TIM_CCMR2_OC4PE;
 8002116:	4a1e      	ldr	r2, [pc, #120]	; (8002190 <Timer_PWMInit+0x114>)
 8002118:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <Timer_PWMInit+0x114>)
 800211a:	8b9b      	ldrh	r3, [r3, #28]
 800211c:	b29b      	uxth	r3, r3
 800211e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002122:	b29b      	uxth	r3, r3
 8002124:	8393      	strh	r3, [r2, #28]
	TIM4->CR1			|=  TIM_CR1_ARPE;
 8002126:	4a1a      	ldr	r2, [pc, #104]	; (8002190 <Timer_PWMInit+0x114>)
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <Timer_PWMInit+0x114>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	b29b      	uxth	r3, r3
 800212e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002132:	b29b      	uxth	r3, r3
 8002134:	8013      	strh	r3, [r2, #0]

	/* set update event EGR_UG */
	TIM4->EGR			|=  TIM_EGR_UG;
 8002136:	4a16      	ldr	r2, [pc, #88]	; (8002190 <Timer_PWMInit+0x114>)
 8002138:	4b15      	ldr	r3, [pc, #84]	; (8002190 <Timer_PWMInit+0x114>)
 800213a:	8a9b      	ldrh	r3, [r3, #20]
 800213c:	b29b      	uxth	r3, r3
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	b29b      	uxth	r3, r3
 8002144:	8293      	strh	r3, [r2, #20]

	/* Enable: Main Output Unit		(BDTR_MOE) */
	TIM4->BDTR			|=  TIM_BDTR_MOE;
 8002146:	4a12      	ldr	r2, [pc, #72]	; (8002190 <Timer_PWMInit+0x114>)
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <Timer_PWMInit+0x114>)
 800214a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800214e:	b29b      	uxth	r3, r3
 8002150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002158:	b29b      	uxth	r3, r3
 800215a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44

	/* Enable: Channel (CCER_CC4E) */
	TIM4->CCER			|= TIM_CCER_CC4E;
 800215e:	4a0c      	ldr	r2, [pc, #48]	; (8002190 <Timer_PWMInit+0x114>)
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <Timer_PWMInit+0x114>)
 8002162:	8c1b      	ldrh	r3, [r3, #32]
 8002164:	b29b      	uxth	r3, r3
 8002166:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800216a:	b29b      	uxth	r3, r3
 800216c:	8413      	strh	r3, [r2, #32]

	/* Enable: Timer   (CR1_CEN) */
	TIM4->CR1 			|= TIM_CR1_CEN;
 800216e:	4a08      	ldr	r2, [pc, #32]	; (8002190 <Timer_PWMInit+0x114>)
 8002170:	4b07      	ldr	r3, [pc, #28]	; (8002190 <Timer_PWMInit+0x114>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	b29b      	uxth	r3, r3
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	b29b      	uxth	r3, r3
 800217c:	8013      	strh	r3, [r2, #0]
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	40023800 	.word	0x40023800
 800218c:	40020400 	.word	0x40020400
 8002190:	40000800 	.word	0x40000800
 8002194:	20000000 	.word	0x20000000
 8002198:	431bde83 	.word	0x431bde83

0800219c <Timer_PWMSetDuty>:
void Timer_PWMSetDuty(uint8_t duty){
 800219c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
	TIM4->CCR4			 = (TIM4->ARR) * (duty/100.0);
 80021a6:	4c11      	ldr	r4, [pc, #68]	; (80021ec <Timer_PWMSetDuty+0x50>)
 80021a8:	4b10      	ldr	r3, [pc, #64]	; (80021ec <Timer_PWMSetDuty+0x50>)
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f955 	bl	800045c <__aeabi_ui2d>
 80021b2:	4605      	mov	r5, r0
 80021b4:	460e      	mov	r6, r1
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe f95f 	bl	800047c <__aeabi_i2d>
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <Timer_PWMSetDuty+0x54>)
 80021c4:	f7fe faea 	bl	800079c <__aeabi_ddiv>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4628      	mov	r0, r5
 80021ce:	4631      	mov	r1, r6
 80021d0:	f7fe f9ba 	bl	8000548 <__aeabi_dmul>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	f7fe fbc6 	bl	800096c <__aeabi_d2uiz>
 80021e0:	4603      	mov	r3, r0
 80021e2:	6423      	str	r3, [r4, #64]	; 0x40
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ec:	40000800 	.word	0x40000800
 80021f0:	40590000 	.word	0x40590000

080021f4 <TIM1_CC_IRQHandler>:



volatile uint32_t pulse_width = 0;
static volatile uint8_t  edge_state  = 0; /* 0: Rising, 1: Falling */
void TIM1_CC_IRQHandler(void){
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
	TIM1->SR &= ~TIM_SR_CC1IF;
 80021f8:	4a12      	ldr	r2, [pc, #72]	; (8002244 <TIM1_CC_IRQHandler+0x50>)
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <TIM1_CC_IRQHandler+0x50>)
 80021fc:	8a1b      	ldrh	r3, [r3, #16]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f023 0302 	bic.w	r3, r3, #2
 8002204:	b29b      	uxth	r3, r3
 8002206:	8213      	strh	r3, [r2, #16]
	if(edge_state == 0){
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <TIM1_CC_IRQHandler+0x54>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <TIM1_CC_IRQHandler+0x2c>
		/* Rising */
		TIM1->CNT = 0;
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <TIM1_CC_IRQHandler+0x50>)
 8002214:	2200      	movs	r2, #0
 8002216:	625a      	str	r2, [r3, #36]	; 0x24
		edge_state = 1;
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <TIM1_CC_IRQHandler+0x54>)
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
	}else if(edge_state == 1){
		/* Falling */
		pulse_width = TIM1->CCR1;
		edge_state = 0;
	}
}
 800221e:	e00b      	b.n	8002238 <TIM1_CC_IRQHandler+0x44>
	}else if(edge_state == 1){
 8002220:	4b09      	ldr	r3, [pc, #36]	; (8002248 <TIM1_CC_IRQHandler+0x54>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b01      	cmp	r3, #1
 8002228:	d106      	bne.n	8002238 <TIM1_CC_IRQHandler+0x44>
		pulse_width = TIM1->CCR1;
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <TIM1_CC_IRQHandler+0x50>)
 800222c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222e:	4a07      	ldr	r2, [pc, #28]	; (800224c <TIM1_CC_IRQHandler+0x58>)
 8002230:	6013      	str	r3, [r2, #0]
		edge_state = 0;
 8002232:	4b05      	ldr	r3, [pc, #20]	; (8002248 <TIM1_CC_IRQHandler+0x54>)
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40010000 	.word	0x40010000
 8002248:	20000038 	.word	0x20000038
 800224c:	20000034 	.word	0x20000034

08002250 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void){
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
	if(TIM3->SR & TIM_SR_UIF){
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <TIM3_IRQHandler+0x2c>)
 8002256:	8a1b      	ldrh	r3, [r3, #16]
 8002258:	b29b      	uxth	r3, r3
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <TIM3_IRQHandler+0x28>
		TIM3->SR &= ~TIM_SR_UIF;
 8002262:	4a06      	ldr	r2, [pc, #24]	; (800227c <TIM3_IRQHandler+0x2c>)
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <TIM3_IRQHandler+0x2c>)
 8002266:	8a1b      	ldrh	r3, [r3, #16]
 8002268:	b29b      	uxth	r3, r3
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	b29b      	uxth	r3, r3
 8002270:	8213      	strh	r3, [r2, #16]
		notifyHandle();
 8002272:	4b03      	ldr	r3, [pc, #12]	; (8002280 <TIM3_IRQHandler+0x30>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4798      	blx	r3
		//TIM3->CR1	&= ~TIM_CR1_CEN;
	}
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40000400 	.word	0x40000400
 8002280:	20000054 	.word	0x20000054

08002284 <Uart_Init>:
 */

#include "uart.h"

/* UART2 */
void Uart_Init(USART_TypeDef* uart, uint32_t baudrate){
 8002284:	b5b0      	push	{r4, r5, r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
	uint8_t frac;
	uint16_t integ;
	float UARTDIV;

	if(uart == USART2){
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4a87      	ldr	r2, [pc, #540]	; (80024b0 <Uart_Init+0x22c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d13c      	bne.n	8002310 <Uart_Init+0x8c>
		RCC->AHB1ENR	|=RCC_AHB1ENR_GPIOAEN;
 8002296:	4a87      	ldr	r2, [pc, #540]	; (80024b4 <Uart_Init+0x230>)
 8002298:	4b86      	ldr	r3, [pc, #536]	; (80024b4 <Uart_Init+0x230>)
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	&= ~(3<<(2*2));
 80022a2:	4a85      	ldr	r2, [pc, #532]	; (80024b8 <Uart_Init+0x234>)
 80022a4:	4b84      	ldr	r3, [pc, #528]	; (80024b8 <Uart_Init+0x234>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80022ac:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	&= ~(3<<(3*2));
 80022ae:	4a82      	ldr	r2, [pc, #520]	; (80024b8 <Uart_Init+0x234>)
 80022b0:	4b81      	ldr	r3, [pc, #516]	; (80024b8 <Uart_Init+0x234>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80022b8:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(2*2));
 80022ba:	4a7f      	ldr	r2, [pc, #508]	; (80024b8 <Uart_Init+0x234>)
 80022bc:	4b7e      	ldr	r3, [pc, #504]	; (80024b8 <Uart_Init+0x234>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f043 0320 	orr.w	r3, r3, #32
 80022c4:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(3*2));
 80022c6:	4a7c      	ldr	r2, [pc, #496]	; (80024b8 <Uart_Init+0x234>)
 80022c8:	4b7b      	ldr	r3, [pc, #492]	; (80024b8 <Uart_Init+0x234>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d0:	6013      	str	r3, [r2, #0]

		GPIOA->AFR[0]	&= ~(0xF<<(2*4));
 80022d2:	4a79      	ldr	r2, [pc, #484]	; (80024b8 <Uart_Init+0x234>)
 80022d4:	4b78      	ldr	r3, [pc, #480]	; (80024b8 <Uart_Init+0x234>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022dc:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	&= ~(0xF<<(3*4));
 80022de:	4a76      	ldr	r2, [pc, #472]	; (80024b8 <Uart_Init+0x234>)
 80022e0:	4b75      	ldr	r3, [pc, #468]	; (80024b8 <Uart_Init+0x234>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022e8:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	|= (0x7<<(2*4));
 80022ea:	4a73      	ldr	r2, [pc, #460]	; (80024b8 <Uart_Init+0x234>)
 80022ec:	4b72      	ldr	r3, [pc, #456]	; (80024b8 <Uart_Init+0x234>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022f4:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	|= (0x7<<(3*4));
 80022f6:	4a70      	ldr	r2, [pc, #448]	; (80024b8 <Uart_Init+0x234>)
 80022f8:	4b6f      	ldr	r3, [pc, #444]	; (80024b8 <Uart_Init+0x234>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002300:	6213      	str	r3, [r2, #32]
		RCC->APB1ENR	|= RCC_APB1ENR_USART2EN;
 8002302:	4a6c      	ldr	r2, [pc, #432]	; (80024b4 <Uart_Init+0x230>)
 8002304:	4b6b      	ldr	r3, [pc, #428]	; (80024b4 <Uart_Init+0x230>)
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800230c:	6413      	str	r3, [r2, #64]	; 0x40
 800230e:	e080      	b.n	8002412 <Uart_Init+0x18e>
	}else if(uart == USART1){
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4a6a      	ldr	r2, [pc, #424]	; (80024bc <Uart_Init+0x238>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d13c      	bne.n	8002392 <Uart_Init+0x10e>
		RCC->AHB1ENR	|=RCC_AHB1ENR_GPIOAEN;
 8002318:	4a66      	ldr	r2, [pc, #408]	; (80024b4 <Uart_Init+0x230>)
 800231a:	4b66      	ldr	r3, [pc, #408]	; (80024b4 <Uart_Init+0x230>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	&= ~(3<<(9*2));
 8002324:	4a64      	ldr	r2, [pc, #400]	; (80024b8 <Uart_Init+0x234>)
 8002326:	4b64      	ldr	r3, [pc, #400]	; (80024b8 <Uart_Init+0x234>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800232e:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	&= ~(3<<(10*2));
 8002330:	4a61      	ldr	r2, [pc, #388]	; (80024b8 <Uart_Init+0x234>)
 8002332:	4b61      	ldr	r3, [pc, #388]	; (80024b8 <Uart_Init+0x234>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800233a:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(9*2));
 800233c:	4a5e      	ldr	r2, [pc, #376]	; (80024b8 <Uart_Init+0x234>)
 800233e:	4b5e      	ldr	r3, [pc, #376]	; (80024b8 <Uart_Init+0x234>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002346:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(10*2));
 8002348:	4a5b      	ldr	r2, [pc, #364]	; (80024b8 <Uart_Init+0x234>)
 800234a:	4b5b      	ldr	r3, [pc, #364]	; (80024b8 <Uart_Init+0x234>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002352:	6013      	str	r3, [r2, #0]

		GPIOA->AFR[1]	&= ~(0xF<<(1*4));
 8002354:	4a58      	ldr	r2, [pc, #352]	; (80024b8 <Uart_Init+0x234>)
 8002356:	4b58      	ldr	r3, [pc, #352]	; (80024b8 <Uart_Init+0x234>)
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800235e:	6253      	str	r3, [r2, #36]	; 0x24
		GPIOA->AFR[1]	&= ~(0xF<<(2*4));
 8002360:	4a55      	ldr	r2, [pc, #340]	; (80024b8 <Uart_Init+0x234>)
 8002362:	4b55      	ldr	r3, [pc, #340]	; (80024b8 <Uart_Init+0x234>)
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800236a:	6253      	str	r3, [r2, #36]	; 0x24
		GPIOA->AFR[1]	|= (0x7<<(1*4));
 800236c:	4a52      	ldr	r2, [pc, #328]	; (80024b8 <Uart_Init+0x234>)
 800236e:	4b52      	ldr	r3, [pc, #328]	; (80024b8 <Uart_Init+0x234>)
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002376:	6253      	str	r3, [r2, #36]	; 0x24
		GPIOA->AFR[1]	|= (0x7<<(2*4));
 8002378:	4a4f      	ldr	r2, [pc, #316]	; (80024b8 <Uart_Init+0x234>)
 800237a:	4b4f      	ldr	r3, [pc, #316]	; (80024b8 <Uart_Init+0x234>)
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002382:	6253      	str	r3, [r2, #36]	; 0x24
		RCC->APB2ENR	|= RCC_APB2ENR_USART1EN;
 8002384:	4a4b      	ldr	r2, [pc, #300]	; (80024b4 <Uart_Init+0x230>)
 8002386:	4b4b      	ldr	r3, [pc, #300]	; (80024b4 <Uart_Init+0x230>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	f043 0310 	orr.w	r3, r3, #16
 800238e:	6453      	str	r3, [r2, #68]	; 0x44
 8002390:	e03f      	b.n	8002412 <Uart_Init+0x18e>

	}else if(uart == USART6){
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4a4a      	ldr	r2, [pc, #296]	; (80024c0 <Uart_Init+0x23c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d13b      	bne.n	8002412 <Uart_Init+0x18e>
		RCC->AHB1ENR	|=RCC_AHB1ENR_GPIOCEN;
 800239a:	4a46      	ldr	r2, [pc, #280]	; (80024b4 <Uart_Init+0x230>)
 800239c:	4b45      	ldr	r3, [pc, #276]	; (80024b4 <Uart_Init+0x230>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	f043 0304 	orr.w	r3, r3, #4
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	&= ~(3<<(6*2));
 80023a6:	4a44      	ldr	r2, [pc, #272]	; (80024b8 <Uart_Init+0x234>)
 80023a8:	4b43      	ldr	r3, [pc, #268]	; (80024b8 <Uart_Init+0x234>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023b0:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	&= ~(3<<(7*2));
 80023b2:	4a41      	ldr	r2, [pc, #260]	; (80024b8 <Uart_Init+0x234>)
 80023b4:	4b40      	ldr	r3, [pc, #256]	; (80024b8 <Uart_Init+0x234>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80023bc:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(6*2));
 80023be:	4a3e      	ldr	r2, [pc, #248]	; (80024b8 <Uart_Init+0x234>)
 80023c0:	4b3d      	ldr	r3, [pc, #244]	; (80024b8 <Uart_Init+0x234>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023c8:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(7*2));
 80023ca:	4a3b      	ldr	r2, [pc, #236]	; (80024b8 <Uart_Init+0x234>)
 80023cc:	4b3a      	ldr	r3, [pc, #232]	; (80024b8 <Uart_Init+0x234>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d4:	6013      	str	r3, [r2, #0]

		GPIOA->AFR[0]	&= ~(0xF<<(6*4));
 80023d6:	4a38      	ldr	r2, [pc, #224]	; (80024b8 <Uart_Init+0x234>)
 80023d8:	4b37      	ldr	r3, [pc, #220]	; (80024b8 <Uart_Init+0x234>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80023e0:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	&= ~(0xF<<(7*4));
 80023e2:	4a35      	ldr	r2, [pc, #212]	; (80024b8 <Uart_Init+0x234>)
 80023e4:	4b34      	ldr	r3, [pc, #208]	; (80024b8 <Uart_Init+0x234>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80023ec:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	|= (0x8<<(6*4));
 80023ee:	4a32      	ldr	r2, [pc, #200]	; (80024b8 <Uart_Init+0x234>)
 80023f0:	4b31      	ldr	r3, [pc, #196]	; (80024b8 <Uart_Init+0x234>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023f8:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	|= (0x8<<(7*4));
 80023fa:	4a2f      	ldr	r2, [pc, #188]	; (80024b8 <Uart_Init+0x234>)
 80023fc:	4b2e      	ldr	r3, [pc, #184]	; (80024b8 <Uart_Init+0x234>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002404:	6213      	str	r3, [r2, #32]
		RCC->APB2ENR	|= RCC_APB2ENR_USART6EN;
 8002406:	4a2b      	ldr	r2, [pc, #172]	; (80024b4 <Uart_Init+0x230>)
 8002408:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <Uart_Init+0x230>)
 800240a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240c:	f043 0320 	orr.w	r3, r3, #32
 8002410:	6453      	str	r3, [r2, #68]	; 0x44

	}

	UARTDIV			= (SystemCoreClock/(16.0*baudrate));
 8002412:	4b2c      	ldr	r3, [pc, #176]	; (80024c4 <Uart_Init+0x240>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe f820 	bl	800045c <__aeabi_ui2d>
 800241c:	4604      	mov	r4, r0
 800241e:	460d      	mov	r5, r1
 8002420:	68b8      	ldr	r0, [r7, #8]
 8002422:	f7fe f81b 	bl	800045c <__aeabi_ui2d>
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	4b27      	ldr	r3, [pc, #156]	; (80024c8 <Uart_Init+0x244>)
 800242c:	f7fe f88c 	bl	8000548 <__aeabi_dmul>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4620      	mov	r0, r4
 8002436:	4629      	mov	r1, r5
 8002438:	f7fe f9b0 	bl	800079c <__aeabi_ddiv>
 800243c:	4603      	mov	r3, r0
 800243e:	460c      	mov	r4, r1
 8002440:	4618      	mov	r0, r3
 8002442:	4621      	mov	r1, r4
 8002444:	f7fe fab2 	bl	80009ac <__aeabi_d2f>
 8002448:	4603      	mov	r3, r0
 800244a:	617b      	str	r3, [r7, #20]
	integ			= (uint16_t)UARTDIV;
 800244c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002454:	edc7 7a01 	vstr	s15, [r7, #4]
 8002458:	88bb      	ldrh	r3, [r7, #4]
 800245a:	827b      	strh	r3, [r7, #18]
	frac			= (UARTDIV-integ)*16;
 800245c:	8a7b      	ldrh	r3, [r7, #18]
 800245e:	ee07 3a90 	vmov	s15, r3
 8002462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002466:	ed97 7a05 	vldr	s14, [r7, #20]
 800246a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800246e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800247a:	edc7 7a01 	vstr	s15, [r7, #4]
 800247e:	793b      	ldrb	r3, [r7, #4]
 8002480:	747b      	strb	r3, [r7, #17]
	uart->BRR		=(integ<<4)+frac;
 8002482:	8a7b      	ldrh	r3, [r7, #18]
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	b29a      	uxth	r2, r3
 8002488:	7c7b      	ldrb	r3, [r7, #17]
 800248a:	b29b      	uxth	r3, r3
 800248c:	4413      	add	r3, r2
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	811a      	strh	r2, [r3, #8]

	uart->CR1		|=((USART_CR1_TE)|(USART_CR1_RE)|(USART_CR1_UE));
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	899b      	ldrh	r3, [r3, #12]
 8002498:	b29b      	uxth	r3, r3
 800249a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800249e:	f043 030c 	orr.w	r3, r3, #12
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	819a      	strh	r2, [r3, #12]

}
 80024a8:	bf00      	nop
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bdb0      	pop	{r4, r5, r7, pc}
 80024b0:	40004400 	.word	0x40004400
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40020000 	.word	0x40020000
 80024bc:	40011000 	.word	0x40011000
 80024c0:	40011400 	.word	0x40011400
 80024c4:	20000000 	.word	0x20000000
 80024c8:	40300000 	.word	0x40300000

080024cc <Uart_SendByte>:
void Uart_SendByte(USART_TypeDef* uart, uint8_t data){
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	70fb      	strb	r3, [r7, #3]
	while(!(uart->SR &USART_SR_TXE));
 80024d8:	bf00      	nop
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f8      	beq.n	80024da <Uart_SendByte+0xe>
	uart->DR 		= data;
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	809a      	strh	r2, [r3, #4]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <Uart_SendString>:
void Uart_SendString(USART_TypeDef* uart, uint8_t* str){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
	while(str[i])
 800250a:	e00a      	b.n	8002522 <Uart_SendString+0x26>
	{
		Uart_SendByte(uart,str[i]);
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4413      	add	r3, r2
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ffd8 	bl	80024cc <Uart_SendByte>
		i++;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	3301      	adds	r3, #1
 8002520:	60fb      	str	r3, [r7, #12]
	while(str[i])
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1ee      	bne.n	800250c <Uart_SendString+0x10>
	}
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <Uart_ReceiveByte_Unblock>:

void Uart_ReceiveByte(USART_TypeDef* uart, uint8_t* pData){
	while(!(uart->SR &USART_SR_RXNE));
	(*pData)	=	uart->DR;
}
uint8_t Uart_ReceiveByte_Unblock(USART_TypeDef* uart, uint8_t* pData){
 8002536:	b480      	push	{r7}
 8002538:	b085      	sub	sp, #20
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
	uint8_t status = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	73fb      	strb	r3, [r7, #15]
	if(uart->SR &USART_SR_RXNE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	b29b      	uxth	r3, r3
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b00      	cmp	r3, #0
 8002550:	d007      	beq.n	8002562 <Uart_ReceiveByte_Unblock+0x2c>
	{
		(*pData) 	= uart->DR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	889b      	ldrh	r3, [r3, #4]
 8002556:	b29b      	uxth	r3, r3
 8002558:	b2da      	uxtb	r2, r3
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	701a      	strb	r2, [r3, #0]
		status 		= 1;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8002562:	7bfb      	ldrb	r3, [r7, #15]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <delayMs>:
 *  Created on: Nov 5, 2020
 *      Author: MahmoudH
 */
#include "delay.h"

void delayMs(uint32_t delay_ms){
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	uint32_t ind1 = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
	uint32_t ind2 = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	60bb      	str	r3, [r7, #8]
	for (ind1 = 0; ind1 < delay_ms; ++ind1) {
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	e00e      	b.n	80025a4 <delayMs+0x34>
		for (ind2 = 0; ind2 < 1250; ++ind2) {
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	e003      	b.n	8002594 <delayMs+0x24>
			asm("nop");
 800258c:	bf00      	nop
		for (ind2 = 0; ind2 < 1250; ++ind2) {
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	3301      	adds	r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800259a:	4293      	cmp	r3, r2
 800259c:	d9f6      	bls.n	800258c <delayMs+0x1c>
	for (ind1 = 0; ind1 < delay_ms; ++ind1) {
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3301      	adds	r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d3ec      	bcc.n	8002586 <delayMs+0x16>
		}
	}
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <main>:
 */



int main(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	System_Init();
 80025bc:	f7fe fcd2 	bl	8000f64 <System_Init>

	while(1)
	{

		InDoor_Ultra();
 80025c0:	f7fe fbec 	bl	8000d9c <InDoor_Ultra>
		Temp_Sensor();
 80025c4:	f7fe fb8e 	bl	8000ce4 <Temp_Sensor>
	{
 80025c8:	e7fa      	b.n	80025c0 <main+0x8>
	...

080025cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002604 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025d2:	e003      	b.n	80025dc <LoopCopyDataInit>

080025d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025da:	3104      	adds	r1, #4

080025dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025dc:	480b      	ldr	r0, [pc, #44]	; (800260c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025e4:	d3f6      	bcc.n	80025d4 <CopyDataInit>
  ldr  r2, =_sbss
 80025e6:	4a0b      	ldr	r2, [pc, #44]	; (8002614 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025e8:	e002      	b.n	80025f0 <LoopFillZerobss>

080025ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025ec:	f842 3b04 	str.w	r3, [r2], #4

080025f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025f0:	4b09      	ldr	r3, [pc, #36]	; (8002618 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80025f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025f4:	d3f9      	bcc.n	80025ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025f6:	f000 f83b 	bl	8002670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025fa:	f000 fa5d 	bl	8002ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025fe:	f7ff ffdb 	bl	80025b8 <main>
  bx  lr    
 8002602:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002604:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002608:	08002cfc 	.word	0x08002cfc
  ldr  r0, =_sdata
 800260c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002610:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8002614:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8002618:	20000058 	.word	0x20000058

0800261c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800261c:	e7fe      	b.n	800261c <ADC_IRQHandler>

0800261e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002630:	e7fe      	b.n	8002630 <HardFault_Handler+0x4>

08002632 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002636:	e7fe      	b.n	8002636 <MemManage_Handler+0x4>

08002638 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800263c:	e7fe      	b.n	800263c <BusFault_Handler+0x4>

0800263e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002642:	e7fe      	b.n	8002642 <UsageFault_Handler+0x4>

08002644 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002674:	4a16      	ldr	r2, [pc, #88]	; (80026d0 <SystemInit+0x60>)
 8002676:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <SystemInit+0x60>)
 8002678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002684:	4a13      	ldr	r2, [pc, #76]	; (80026d4 <SystemInit+0x64>)
 8002686:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <SystemInit+0x64>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002690:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <SystemInit+0x64>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002696:	4a0f      	ldr	r2, [pc, #60]	; (80026d4 <SystemInit+0x64>)
 8002698:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <SystemInit+0x64>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80026a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <SystemInit+0x64>)
 80026a8:	4a0b      	ldr	r2, [pc, #44]	; (80026d8 <SystemInit+0x68>)
 80026aa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80026ac:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <SystemInit+0x64>)
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <SystemInit+0x64>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <SystemInit+0x64>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80026be:	f000 f889 	bl	80027d4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026c2:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <SystemInit+0x60>)
 80026c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026c8:	609a      	str	r2, [r3, #8]
#endif
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	e000ed00 	.word	0xe000ed00
 80026d4:	40023800 	.word	0x40023800
 80026d8:	24003010 	.word	0x24003010

080026dc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	2302      	movs	r3, #2
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	2302      	movs	r3, #2
 80026f4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80026f6:	4b32      	ldr	r3, [pc, #200]	; (80027c0 <SystemCoreClockUpdate+0xe4>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
 80026fe:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2b04      	cmp	r3, #4
 8002704:	d007      	beq.n	8002716 <SystemCoreClockUpdate+0x3a>
 8002706:	2b08      	cmp	r3, #8
 8002708:	d009      	beq.n	800271e <SystemCoreClockUpdate+0x42>
 800270a:	2b00      	cmp	r3, #0
 800270c:	d13d      	bne.n	800278a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800270e:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <SystemCoreClockUpdate+0xe8>)
 8002710:	4a2d      	ldr	r2, [pc, #180]	; (80027c8 <SystemCoreClockUpdate+0xec>)
 8002712:	601a      	str	r2, [r3, #0]
      break;
 8002714:	e03d      	b.n	8002792 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002716:	4b2b      	ldr	r3, [pc, #172]	; (80027c4 <SystemCoreClockUpdate+0xe8>)
 8002718:	4a2c      	ldr	r2, [pc, #176]	; (80027cc <SystemCoreClockUpdate+0xf0>)
 800271a:	601a      	str	r2, [r3, #0]
      break;
 800271c:	e039      	b.n	8002792 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800271e:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <SystemCoreClockUpdate+0xe4>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	0d9b      	lsrs	r3, r3, #22
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800272a:	4b25      	ldr	r3, [pc, #148]	; (80027c0 <SystemCoreClockUpdate+0xe4>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002732:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00c      	beq.n	8002754 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800273a:	4a24      	ldr	r2, [pc, #144]	; (80027cc <SystemCoreClockUpdate+0xf0>)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002742:	4a1f      	ldr	r2, [pc, #124]	; (80027c0 <SystemCoreClockUpdate+0xe4>)
 8002744:	6852      	ldr	r2, [r2, #4]
 8002746:	0992      	lsrs	r2, r2, #6
 8002748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800274c:	fb02 f303 	mul.w	r3, r2, r3
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	e00b      	b.n	800276c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8002754:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <SystemCoreClockUpdate+0xec>)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	fbb2 f3f3 	udiv	r3, r2, r3
 800275c:	4a18      	ldr	r2, [pc, #96]	; (80027c0 <SystemCoreClockUpdate+0xe4>)
 800275e:	6852      	ldr	r2, [r2, #4]
 8002760:	0992      	lsrs	r2, r2, #6
 8002762:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800276c:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <SystemCoreClockUpdate+0xe4>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	0c1b      	lsrs	r3, r3, #16
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	3301      	adds	r3, #1
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	fbb2 f3f3 	udiv	r3, r2, r3
 8002784:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <SystemCoreClockUpdate+0xe8>)
 8002786:	6013      	str	r3, [r2, #0]
      break;
 8002788:	e003      	b.n	8002792 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <SystemCoreClockUpdate+0xe8>)
 800278c:	4a0e      	ldr	r2, [pc, #56]	; (80027c8 <SystemCoreClockUpdate+0xec>)
 800278e:	601a      	str	r2, [r3, #0]
      break;
 8002790:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002792:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <SystemCoreClockUpdate+0xe4>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	4a0c      	ldr	r2, [pc, #48]	; (80027d0 <SystemCoreClockUpdate+0xf4>)
 800279e:	5cd3      	ldrb	r3, [r2, r3]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80027a4:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <SystemCoreClockUpdate+0xe8>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	fa22 f303 	lsr.w	r3, r2, r3
 80027ae:	4a05      	ldr	r2, [pc, #20]	; (80027c4 <SystemCoreClockUpdate+0xe8>)
 80027b0:	6013      	str	r3, [r2, #0]
}
 80027b2:	bf00      	nop
 80027b4:	371c      	adds	r7, #28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800
 80027c4:	20000000 	.word	0x20000000
 80027c8:	00f42400 	.word	0x00f42400
 80027cc:	017d7840 	.word	0x017d7840
 80027d0:	20000004 	.word	0x20000004

080027d4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	2300      	movs	r3, #0
 80027e0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80027e2:	4a36      	ldr	r2, [pc, #216]	; (80028bc <SetSysClock+0xe8>)
 80027e4:	4b35      	ldr	r3, [pc, #212]	; (80028bc <SetSysClock+0xe8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ec:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80027ee:	4b33      	ldr	r3, [pc, #204]	; (80028bc <SetSysClock+0xe8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3301      	adds	r3, #1
 80027fc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d103      	bne.n	800280c <SetSysClock+0x38>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800280a:	d1f0      	bne.n	80027ee <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800280c:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <SetSysClock+0xe8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002818:	2301      	movs	r3, #1
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	e001      	b.n	8002822 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800281e:	2300      	movs	r3, #0
 8002820:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d142      	bne.n	80028ae <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002828:	4a24      	ldr	r2, [pc, #144]	; (80028bc <SetSysClock+0xe8>)
 800282a:	4b24      	ldr	r3, [pc, #144]	; (80028bc <SetSysClock+0xe8>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002832:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8002834:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <SetSysClock+0xec>)
 8002836:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <SetSysClock+0xec>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800283e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002840:	4a1e      	ldr	r2, [pc, #120]	; (80028bc <SetSysClock+0xe8>)
 8002842:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <SetSysClock+0xe8>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002848:	4a1c      	ldr	r2, [pc, #112]	; (80028bc <SetSysClock+0xe8>)
 800284a:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <SetSysClock+0xe8>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002852:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002854:	4a19      	ldr	r2, [pc, #100]	; (80028bc <SetSysClock+0xe8>)
 8002856:	4b19      	ldr	r3, [pc, #100]	; (80028bc <SetSysClock+0xe8>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800285e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002860:	4b16      	ldr	r3, [pc, #88]	; (80028bc <SetSysClock+0xe8>)
 8002862:	4a18      	ldr	r2, [pc, #96]	; (80028c4 <SetSysClock+0xf0>)
 8002864:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002866:	4a15      	ldr	r2, [pc, #84]	; (80028bc <SetSysClock+0xe8>)
 8002868:	4b14      	ldr	r3, [pc, #80]	; (80028bc <SetSysClock+0xe8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002870:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002872:	bf00      	nop
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <SetSysClock+0xe8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0f9      	beq.n	8002874 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <SetSysClock+0xf4>)
 8002882:	f240 7205 	movw	r2, #1797	; 0x705
 8002886:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002888:	4a0c      	ldr	r2, [pc, #48]	; (80028bc <SetSysClock+0xe8>)
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <SetSysClock+0xe8>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f023 0303 	bic.w	r3, r3, #3
 8002892:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002894:	4a09      	ldr	r2, [pc, #36]	; (80028bc <SetSysClock+0xe8>)
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <SetSysClock+0xe8>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f043 0302 	orr.w	r3, r3, #2
 800289e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80028a0:	bf00      	nop
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <SetSysClock+0xe8>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d1f9      	bne.n	80028a2 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40007000 	.word	0x40007000
 80028c4:	07405419 	.word	0x07405419
 80028c8:	40023c00 	.word	0x40023c00

080028cc <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
	int div = 1;
 80028d8:	2301      	movs	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80028dc:	e004      	b.n	80028e8 <ts_itoa+0x1c>
		div *= base;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	fb02 f303 	mul.w	r3, r2, r3
 80028e6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d2f3      	bcs.n	80028de <ts_itoa+0x12>

	while (div != 0)
 80028f6:	e029      	b.n	800294c <ts_itoa+0x80>
	{
		int num = d/div;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002900:	613b      	str	r3, [r7, #16]
		d = d%div;
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	fbb3 f1f2 	udiv	r1, r3, r2
 800290a:	fb02 f201 	mul.w	r2, r2, r1
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	60bb      	str	r3, [r7, #8]
		div /= base;
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	fb92 f3f3 	sdiv	r3, r2, r3
 800291a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	2b09      	cmp	r3, #9
 8002920:	dd0a      	ble.n	8002938 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	1c59      	adds	r1, r3, #1
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	6011      	str	r1, [r2, #0]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	3237      	adds	r2, #55	; 0x37
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]
 8002936:	e009      	b.n	800294c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	1c59      	adds	r1, r3, #1
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	6011      	str	r1, [r2, #0]
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	3230      	adds	r2, #48	; 0x30
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1d2      	bne.n	80028f8 <ts_itoa+0x2c>
	}
}
 8002952:	bf00      	nop
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b088      	sub	sp, #32
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800296e:	e07d      	b.n	8002a6c <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b25      	cmp	r3, #37	; 0x25
 8002976:	d171      	bne.n	8002a5c <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	3301      	adds	r3, #1
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d01e      	beq.n	80029c4 <ts_formatstring+0x66>
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	dc06      	bgt.n	8002998 <ts_formatstring+0x3a>
 800298a:	2b58      	cmp	r3, #88	; 0x58
 800298c:	d050      	beq.n	8002a30 <ts_formatstring+0xd2>
 800298e:	2b63      	cmp	r3, #99	; 0x63
 8002990:	d00e      	beq.n	80029b0 <ts_formatstring+0x52>
 8002992:	2b25      	cmp	r3, #37	; 0x25
 8002994:	d058      	beq.n	8002a48 <ts_formatstring+0xea>
 8002996:	e05d      	b.n	8002a54 <ts_formatstring+0xf6>
 8002998:	2b73      	cmp	r3, #115	; 0x73
 800299a:	d02b      	beq.n	80029f4 <ts_formatstring+0x96>
 800299c:	2b73      	cmp	r3, #115	; 0x73
 800299e:	dc02      	bgt.n	80029a6 <ts_formatstring+0x48>
 80029a0:	2b69      	cmp	r3, #105	; 0x69
 80029a2:	d00f      	beq.n	80029c4 <ts_formatstring+0x66>
 80029a4:	e056      	b.n	8002a54 <ts_formatstring+0xf6>
 80029a6:	2b75      	cmp	r3, #117	; 0x75
 80029a8:	d037      	beq.n	8002a1a <ts_formatstring+0xbc>
 80029aa:	2b78      	cmp	r3, #120	; 0x78
 80029ac:	d040      	beq.n	8002a30 <ts_formatstring+0xd2>
 80029ae:	e051      	b.n	8002a54 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	60fa      	str	r2, [r7, #12]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	1d11      	adds	r1, r2, #4
 80029ba:	6079      	str	r1, [r7, #4]
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]
				break;
 80029c2:	e047      	b.n	8002a54 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	1d1a      	adds	r2, r3, #4
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	da07      	bge.n	80029e4 <ts_formatstring+0x86>
					{
						val *= -1;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	425b      	negs	r3, r3
 80029d8:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	60fa      	str	r2, [r7, #12]
 80029e0:	222d      	movs	r2, #45	; 0x2d
 80029e2:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80029e4:	69f9      	ldr	r1, [r7, #28]
 80029e6:	f107 030c 	add.w	r3, r7, #12
 80029ea:	220a      	movs	r2, #10
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff6d 	bl	80028cc <ts_itoa>
				}
				break;
 80029f2:	e02f      	b.n	8002a54 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	1d1a      	adds	r2, r3, #4
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80029fe:	e007      	b.n	8002a10 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	60fa      	str	r2, [r7, #12]
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	1c51      	adds	r1, r2, #1
 8002a0a:	61b9      	str	r1, [r7, #24]
 8002a0c:	7812      	ldrb	r2, [r2, #0]
 8002a0e:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f3      	bne.n	8002a00 <ts_formatstring+0xa2>
					}
				}
				break;
 8002a18:	e01c      	b.n	8002a54 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	1d1a      	adds	r2, r3, #4
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	6819      	ldr	r1, [r3, #0]
 8002a22:	f107 030c 	add.w	r3, r7, #12
 8002a26:	220a      	movs	r2, #10
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff ff4f 	bl	80028cc <ts_itoa>
				break;
 8002a2e:	e011      	b.n	8002a54 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	1d1a      	adds	r2, r3, #4
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f107 030c 	add.w	r3, r7, #12
 8002a3e:	2210      	movs	r2, #16
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff43 	bl	80028cc <ts_itoa>
				break;
 8002a46:	e005      	b.n	8002a54 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	60fa      	str	r2, [r7, #12]
 8002a4e:	2225      	movs	r2, #37	; 0x25
 8002a50:	701a      	strb	r2, [r3, #0]
				  break;
 8002a52:	bf00      	nop
			}
			fmt++;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	3301      	adds	r3, #1
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	e007      	b.n	8002a6c <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	60fa      	str	r2, [r7, #12]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	1c51      	adds	r1, r2, #1
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	7812      	ldrb	r2, [r2, #0]
 8002a6a:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f47f af7d 	bne.w	8002970 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	1ad3      	subs	r3, r2, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3720      	adds	r7, #32
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8002a8c:	b40e      	push	{r1, r2, r3}
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b085      	sub	sp, #20
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8002a96:	f107 0320 	add.w	r3, r7, #32
 8002a9a:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	69f9      	ldr	r1, [r7, #28]
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff ff5c 	bl	800295e <ts_formatstring>
 8002aa6:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ab4:	b003      	add	sp, #12
 8002ab6:	4770      	bx	lr

08002ab8 <__libc_init_array>:
 8002ab8:	b570      	push	{r4, r5, r6, lr}
 8002aba:	4e0d      	ldr	r6, [pc, #52]	; (8002af0 <__libc_init_array+0x38>)
 8002abc:	4c0d      	ldr	r4, [pc, #52]	; (8002af4 <__libc_init_array+0x3c>)
 8002abe:	1ba4      	subs	r4, r4, r6
 8002ac0:	10a4      	asrs	r4, r4, #2
 8002ac2:	2500      	movs	r5, #0
 8002ac4:	42a5      	cmp	r5, r4
 8002ac6:	d109      	bne.n	8002adc <__libc_init_array+0x24>
 8002ac8:	4e0b      	ldr	r6, [pc, #44]	; (8002af8 <__libc_init_array+0x40>)
 8002aca:	4c0c      	ldr	r4, [pc, #48]	; (8002afc <__libc_init_array+0x44>)
 8002acc:	f000 f818 	bl	8002b00 <_init>
 8002ad0:	1ba4      	subs	r4, r4, r6
 8002ad2:	10a4      	asrs	r4, r4, #2
 8002ad4:	2500      	movs	r5, #0
 8002ad6:	42a5      	cmp	r5, r4
 8002ad8:	d105      	bne.n	8002ae6 <__libc_init_array+0x2e>
 8002ada:	bd70      	pop	{r4, r5, r6, pc}
 8002adc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ae0:	4798      	blx	r3
 8002ae2:	3501      	adds	r5, #1
 8002ae4:	e7ee      	b.n	8002ac4 <__libc_init_array+0xc>
 8002ae6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002aea:	4798      	blx	r3
 8002aec:	3501      	adds	r5, #1
 8002aee:	e7f2      	b.n	8002ad6 <__libc_init_array+0x1e>
 8002af0:	08002cf4 	.word	0x08002cf4
 8002af4:	08002cf4 	.word	0x08002cf4
 8002af8:	08002cf4 	.word	0x08002cf4
 8002afc:	08002cf8 	.word	0x08002cf8

08002b00 <_init>:
 8002b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b02:	bf00      	nop
 8002b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b06:	bc08      	pop	{r3}
 8002b08:	469e      	mov	lr, r3
 8002b0a:	4770      	bx	lr

08002b0c <_fini>:
 8002b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0e:	bf00      	nop
 8002b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b12:	bc08      	pop	{r3}
 8002b14:	469e      	mov	lr, r3
 8002b16:	4770      	bx	lr
